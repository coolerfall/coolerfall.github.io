<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Windows 下使用 Jekyll 在 github pages 搭建博客</title>
    <url>/2015/02/02/github-pages-with-jekyll/</url>
    <content><![CDATA[<p>一直想搭建一个博客来记录些开发中遇到的问题，但是自己对前端不熟悉以及服务器主机等等原因，迟迟没有行动起来。后来发现了 github pages 这个东西，可以支持用户在 github 上搭建个人博客，于是乎开始折腾起 Jekyll 了。</p>
<span id="more"></span>

<h3 id="Jekyll的简单教程"><a href="#Jekyll的简单教程" class="headerlink" title="Jekyll的简单教程"></a>Jekyll 的简单教程</h3><p>1.Jekyll 是基于 Ruby 开发的，所以先安装 <a href="http://rubyinstaller.org/downloads/">rubyinstaller 以及 DevKit</a>，要注意 DevKit 需下载与 rubyinstaller 对应的版本。安装好 ruby 之后，将 DevKit 解压，在 cmd 中切换到 DevKit 的根目录，执行 <code>$ ruby dk.rb init</code> 生成 config.yml 配置文件，然后在 config.yml 添加 ruby 的安装目录：</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">---</span><br><span class="line">- E:/Ruby200</span><br></pre></td></tr></tbody></table></figure>

<p>注意是 *— <em>下面加</em> -* 和空格最后在 cmd 中执行 <code>$ ruby dk.rb install</code>，出现提示：</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">$ ruby dk.rb install</span><br><span class="line">[INFO] Updating convenience notice gem override for 'E:/Ruby200'</span><br><span class="line">[INFO] Installing 'E:/Ruby200/lib/ruby/site_ruby/devkit.rb'</span><br></pre></td></tr></tbody></table></figure>
<p>则 ruby 环境搭建完成了。</p>
<p>2. 在 cmd 中通过 gem 来安装 jekyll，首先使用 <code>$ gem list</code> 查看是否安装 liquid，若未安装则执行 <code>$ gem install liquid</code>，安装完成后再执行 <code>$ gem install jekyll</code> 来安装 jekyll。如果安装速度很慢，可以考虑将 ruby 源更换为淘宝源：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">$ gem sources --remove https://rubygems.org/</span><br><span class="line">$ gem sources -a https://ruby.taobao.org/</span><br><span class="line">$ gem sources -l</span><br><span class="line">*** CURRENT SOURCES ***</span><br><span class="line"></span><br><span class="line">https://ruby.taobao.org</span><br></pre></td></tr></tbody></table></figure>
<p>如果在执行 <code>$ gem list</code> 出现如下时：</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">ERROR:  Could not find a valid gem 'liquid' (&gt;= 0), here is why:</span><br><span class="line">          Unable to download data from https://rubygems.org/ - SSL_connect returned=1 errno=0 state=SSLv3 read server certificate</span><br><span class="line">B: certificate verify failed (https://rubygems.org/latest_specs.4.8.gz)</span><br></pre></td></tr></tbody></table></figure>
<p>则需要下载 <a href="http://curl.haxx.se/ca/cacert.pem">cacert.pem</a> 文件，并添加一个环境变量命名为 <code>SSL_CERT_FILE</code> 指向 <code>cacert.pem</code> 所在路径，然后就可以下载了。<br><br></p>
<p>3. 安装好 jekyll 后，从 github 上下载 <a href="https://github.com/plusjade/jekyll-bootstrap/">jekyll bootstrap</a> 模板:</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">$ git clone https://github.com/plusjade/jekyll-bootstrap.git jekyll</span><br><span class="line">$ cd jekyll</span><br><span class="line">$ jekyll server</span><br></pre></td></tr></tbody></table></figure>
<p>在浏览器中输入 localhost:4000，成功的话会看到一个 demo 网页。</p>
]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>github pages</tag>
        <tag>jekyll</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Android Studio 中利用 gradle 来自动编译 jni</title>
    <url>/2015/02/07/use-ndk-in-android-studio/</url>
    <content><![CDATA[<p>在最近的 Android 开发中，项目逐渐从 Eclipse 迁移到 Android Studio 中来，google 官方现在并未在 Android Studio 中支持 ndk 的开发，但是我们可以利用 gradle 自动编译 jni。</p>
<span id="more"></span>

<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1. 在新建项目中找到 local.properties，在里面加入 ndk 的路径 (ndk 必须是 r9 以上)：</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">ndk.dir=E\:\\Android\\ndk-r10d</span><br></pre></td></tr></tbody></table></figure>

<p>2. 在 app\src\main 中新建 jni 文件夹，在这里面存放要编译的 c/c++ 文件以及 Android.mk</p>
<p>3. 在 app 中的 build.gradle 中加入两个 task：ndkBuild 和 copyJniLibs，第一个 task 为 ndk 执行编译，第二个 task 将编译好的 so 库 copy 至 jniLibs 目录，这样才 Android Studio 最后打包的时候才会将 so 库打包进去：</p>
<figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">android {</span><br><span class="line">    compileSdkVersion <span class="number">21</span></span><br><span class="line">    buildToolsVersion <span class="string">"21.1.2"</span></span><br><span class="line">    defaultConfig {</span><br><span class="line">        applicationId <span class="string">"com.xxx.yyy"</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">'1.0'</span></span><br><span class="line">	    minSdkVersion <span class="number">10</span></span><br><span class="line">	    targetSdkVersion <span class="number">21</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    buildTypes {</span><br><span class="line">        release {</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles (<span class="string">'proguard-android.txt'</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    tasks.withType(JavaCompile) {</span><br><span class="line">        compileTask -&gt; compileTask.dependsOn <span class="string">'ndkBuild'</span>, <span class="string">'copyJniLibs'</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    sourceSets {</span><br><span class="line">        main {</span><br><span class="line">	        jni.srcDirs = []</span><br><span class="line">            jniLibs.srcDirs = [<span class="string">'src/main/jniLibs'</span>]</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">task ndkBuild(<span class="attr">type:</span> Exec) {</span><br><span class="line">	<span class="keyword">def</span> ndkDir = project.plugins.findPlugin(<span class="string">'com.android.application'</span>).sdkHandler.getNdkFolder()</span><br><span class="line">    commandLine <span class="string">"$ndkDir/ndk-build.cmd"</span>, <span class="string">'-C'</span>, <span class="string">'src/main/jni'</span>,</span><br><span class="line">		    <span class="string">"NDK_OUT=$buildDir/ndk/obj"</span>,</span><br><span class="line">		    <span class="string">"NDK_APP_DST_DIR=$buildDir/ndk/libs/\$(TARGET_ARCH_ABI)"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">task copyJniLibs(<span class="attr">type:</span> Copy) {</span><br><span class="line">    from fileTree(<span class="attr">dir:</span> file(buildDir.absolutePath + <span class="string">'/ndk/libs'</span>), <span class="attr">include:</span> <span class="string">'**/*.so'</span>)</span><br><span class="line">    into file(<span class="string">'src/main/jniLibs'</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>这两个 task 不要放在 android {} 中，放在 android {} 外即可，否则无法编译。其中 <em>NDK_APP_DST_DIR</em> 为编译后的库存放的文件夹，根据需求自己设定，我在这里是设置为的 buildDir 下的 nkd 文件夹</p>
<p>4. 最后编译，Android Studo 会自动执行 ndkBuild 和 copyJniLibs 这两个 task</p>
<p>ps: 也可以使用命令行的方式来执行这两个 task</p>
<pre><code>$ gradle ndkBuild copyJniLibs
</code></pre>
<p>使用这个命令前，请先找到 gradle 的目录下 bin 目录，并添加到环境变量中去</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>android studio</tag>
        <tag>ndk</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Studio 更新时连接服务器失败问题解决</title>
    <url>/2015/02/13/andoird-studio-update/</url>
    <content><![CDATA[<p>最近被墙得厉害，连 AS 都不能自动更新了，最终找到了个比较简单有效的办法。</p>
<span id="more"></span>

<p>解决方法很简单，打开 AS 安装目录下的 bin 目录，找到 &amp; nbsp;<code>studio64.exe.vmoptions</code>&amp;nbsp;（32 位找 &amp; nbsp;<code>studio.exe.vmoptions</code>&amp;nbsp; 即可）这个文件，往里面添加几行：</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">-Djava.net.preferIPv4Stack=true</span><br><span class="line"></span><br><span class="line">-Didea.updates.url=http://dl.google.com/android/studio/patches/updates.xml  </span><br><span class="line">-Didea.patches.url=http://dl.google.com/android/studio/patches/</span><br></pre></td></tr></tbody></table></figure>
<p>保存退出，重启 AS，不出意外就能更新了。</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>android studio</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Studio 多渠道批量打包</title>
    <url>/2015/02/13/multiple-channel-packing/</url>
    <content><![CDATA[<p>Android 市场众多，在打包 App 的时候需要对每个渠道添加不同的参数用于统计，但是针对每个渠道单独打包比较麻烦，所以要考虑使用批量打包。AS 使用 gradle 来构建 android 项目，我们可以利用来进行批量打包操作。</p>
<span id="more"></span>

<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1. 在 manifest 中找到与渠道相关的参数，增加相应的 PlaceHolder，例如：</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:name</span>=<span class="string">"aid"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:value</span>=<span class="string">"${APP_AID}"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:name</span>=<span class="string">"pid"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:value</span>=<span class="string">"${APP_PID}"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>2. 在 build.gradle 设置 productFlavors：</p>
<figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">android {</span><br><span class="line">	productFlavors {</span><br><span class="line">		wandoujia {</span><br><span class="line">			manifestPlaceholders = [<span class="attr">APP_AID :</span> <span class="number">80</span>, <span class="attr">APP_PID :</span> <span class="number">43</span>]</span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line">		yingyongbao {</span><br><span class="line">			manifestPlaceholders = [<span class="attr">APP_AID :</span> <span class="number">60</span>, <span class="attr">APP_PID :</span> <span class="number">45</span>]</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>manifestPlaceholders 是一个数组，可以根据实际需求增减参数</p>
<p>3. 最后在 AS 中 Build-&gt;Generate Signed APK，最后根据提示打包 APK，AS 会根据 productFlavors 生成相应的包</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>android studio</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 监听 Home 键</title>
    <url>/2015/03/15/listen-home-key/</url>
    <content><![CDATA[<p>Android 的 Home 比较特殊，不能像其他键 (如返回键) 那样直接用 onKeyDown 或 onKeyUp 来监听，需要用其他的方法来实现监听。</p>
<span id="more"></span>

<p>在 Home 键按下时，系统会发出一个广播，我们只需要注册一个 Receiver 来接收这个广播即可：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeKeyReceiver</span> <span class="keyword">extends</span> <span class="title class_">BroadcastReceiver</span> {</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> HomeKeyReceiver.class.getSimpleName();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* extra from home key broadcase receiver */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SYSTEM_DIALOG_REASON_EXTRA</span> <span class="operator">=</span> <span class="string">"reason"</span>;</span><br><span class="line">    <span class="comment">/* press home key to go back to home */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SYSTEM_DIALOG_REASON_HOME_KEY</span> <span class="operator">=</span> <span class="string">"homekey"</span>;</span><br><span class="line">	<span class="comment">/* long press home key to show recent apps */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SYSTEM_DIALOG_REASON_RECENT_APPS</span> <span class="operator">=</span> <span class="string">"recentapps"</span>;</span><br><span class="line">    <span class="comment">/* (long) press home key to show assistant */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SYSTEM_DIALOG_REASON_ASSIST</span> <span class="operator">=</span> <span class="string">"assist"</span>;</span><br><span class="line">    <span class="comment">/* (long) press home key to lock */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SYSTEM_DIALOG_REASON_LOCK</span> <span class="operator">=</span> <span class="string">"lock"</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> Context mContext;</span><br><span class="line">	<span class="comment">/* listeners used in this broadcast receiver */</span></span><br><span class="line">	<span class="keyword">private</span> OnHomeKeyListener mOnHomeKeyListener;</span><br><span class="line">	<span class="keyword">private</span> OnRecentAppListener mOnRecentAppListener;</span><br><span class="line">	<span class="keyword">private</span> OnAssistListener mOnAssistListener;</span><br><span class="line">	<span class="keyword">private</span> OnLockListener mOnLockListener;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">HomeKeyReceiver</span><span class="params">(Context context)</span> {</span><br><span class="line">		mContext = context;</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Interface definition for a callback to be invoked when the reason is "homekey".</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OnHomeKeyListener</span> {</span><br><span class="line">		<span class="keyword">void</span> <span class="title function_">onKeypressed</span><span class="params">()</span>;</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Interface definition for a callback to be invoked when the reason is "recentapps".</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OnRecentAppListener</span> {</span><br><span class="line">		<span class="keyword">void</span> <span class="title function_">onKeypressed</span><span class="params">()</span>;</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Interface definition for a callback to be invoked when the reason is "assist".</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OnAssistListener</span> {</span><br><span class="line">		<span class="keyword">void</span> <span class="title function_">onKeypressed</span><span class="params">()</span>;</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Interface definition for a callback to be invoked when the reason is "lock".</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OnLockListener</span> {</span><br><span class="line">		<span class="keyword">void</span> <span class="title function_">onKeypressed</span><span class="params">()</span>;</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context context, Intent intent)</span> {</span><br><span class="line">		<span class="keyword">if</span> (intent.getAction().equals(Intent.ACTION_CLOSE_SYSTEM_DIALOGS)) {</span><br><span class="line">			<span class="type">String</span> <span class="variable">reason</span> <span class="operator">=</span> intent.getStringExtra(SYSTEM_DIALOG_REASON_EXTRA);</span><br><span class="line">			<span class="keyword">if</span> (TextUtils.isEmpty(reason)) {</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			}</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">switch</span> (reason) {</span><br><span class="line">			<span class="keyword">case</span> SYSTEM_DIALOG_REASON_HOME_KEY:</span><br><span class="line">				<span class="keyword">if</span> (mOnHomeKeyListener != <span class="literal">null</span>) {</span><br><span class="line">					mOnHomeKeyListener.onKeypressed();</span><br><span class="line">				}</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">				</span><br><span class="line">			<span class="keyword">case</span> SYSTEM_DIALOG_REASON_RECENT_APPS:</span><br><span class="line">				<span class="keyword">if</span> (mOnRecentAppListener != <span class="literal">null</span>) {</span><br><span class="line">					mOnRecentAppListener.onKeypressed();</span><br><span class="line">				}</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">				</span><br><span class="line">			<span class="keyword">case</span> SYSTEM_DIALOG_REASON_ASSIST:</span><br><span class="line">				<span class="keyword">if</span> (mOnAssistListener != <span class="literal">null</span>) {</span><br><span class="line">					mOnAssistListener.onKeypressed();</span><br><span class="line">				}</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">				</span><br><span class="line">			<span class="keyword">case</span> SYSTEM_DIALOG_REASON_LOCK:</span><br><span class="line">				<span class="keyword">if</span> (mOnLockListener != <span class="literal">null</span>) {</span><br><span class="line">					mOnLockListener.onKeypressed();</span><br><span class="line">				}</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				Log.d(TAG, <span class="string">"other reason: "</span> + reason);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Register a callback to be invoked when system dialog reason is "homekey".</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOnHomeKeyListener</span><span class="params">(OnHomeKeyListener l)</span> {</span><br><span class="line">		mOnHomeKeyListener = l;</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Register a callback to be invoked when system dialog reason is "recentapps".</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOnRecentAppListener</span><span class="params">(OnRecentAppListener l)</span> {</span><br><span class="line">		mOnRecentAppListener = l;</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Register a callback to be invoked when system dialog reason is "assist".</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOnAssistListener</span><span class="params">(OnAssistListener l)</span> {</span><br><span class="line">		mOnAssistListener = l;</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Register a callback to be invoked when system dialog reason is "lock".</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOnLockListener</span><span class="params">(OnLockListener l)</span> {</span><br><span class="line">		mOnLockListener = l;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Register the home key boradcasr receiver.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span> {</span><br><span class="line">		<span class="type">IntentFilter</span> <span class="variable">homeFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntentFilter</span>(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);</span><br><span class="line">		mContext.registerReceiver(<span class="built_in">this</span>, homeFilter);</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Unregister the home key boradcasr receiver.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unregister</span><span class="params">()</span> {</span><br><span class="line">		mContext.unregisterReceiver(<span class="built_in">this</span>);</span><br><span class="line">	}</span><br></pre></td></tr></tbody></table></figure>

<p>由于 home 键在不同手机上，长 / 短按有不同的效果，代码列举出常用的几种，其中 <code>homekey</code> 表示短按 home 键退到桌面。</p>
<p>简单使用：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> HomeKeyReceiver mHomeKeyReceiver;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> {</span><br><span class="line">	<span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">	mHomeKeyReceiver = <span class="keyword">new</span> <span class="title class_">HomeKeyReceiver</span>(<span class="built_in">this</span>);</span><br><span class="line">	mHomeKeyReceiver.setOnHomeKeyListener(<span class="keyword">new</span> <span class="title class_">OnHomeKeyListener</span>() {</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onKeypressed</span><span class="params">()</span> {</span><br><span class="line">			Log.d(TAG, <span class="string">"home key pressed"</span>);</span><br><span class="line">		}</span><br><span class="line">	});</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onResume</span><span class="params">()</span> {</span><br><span class="line">	<span class="built_in">super</span>.onResume();</span><br><span class="line">	mHomeKeyReceiver.register();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onPause</span><span class="params">()</span> {</span><br><span class="line">	<span class="built_in">super</span>.onPause();</span><br><span class="line">	mHomeKeyReceiver.unregister();</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>注意：这个 Receiver 需要在 <code>onResume</code> 中注册，在 <code>onPause</code> 中注销。</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>home key</tag>
      </tags>
  </entry>
  <entry>
    <title>golang 计算字符以及文件的 hash 值</title>
    <url>/2015/03/18/golang-hash/</url>
    <content><![CDATA[<p>学习 golang 一段时间了，逐渐开始编写一些工具使用，最近需要用来计算 hash 值。使用 golang 来计算字符和文件的 hash 值 (md5, sha1, sha256) 比较简单。</p>
<span id="more"></span>

<p>计算字符串的 hash 比较简单，直接上代码：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">md5Str</span><span class="params">(origin <span class="type">string</span>)</span></span> <span class="type">string</span> {</span><br><span class="line">	m := md5.New()</span><br><span class="line">	m.Write([]<span class="type">byte</span>(origin))</span><br><span class="line">	<span class="keyword">return</span> hex.EncodeToString(m.Sum(<span class="literal">nil</span>))</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>计算文件的 hash 值稍微麻烦一点：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">md5File</span><span class="params">(filepath <span class="type">string</span>)</span></span> <span class="type">string</span> {</span><br><span class="line">	file, err := os.Open(filepath)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">		<span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">	m := md5.New()</span><br><span class="line">	_, err = io.Copy(m, file)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">		<span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> hex.EncodeToString(m.Sum(<span class="literal">nil</span>))</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>sha1 和 sha256 的计算方法类似，具体的代码已经提交至 <a href="https://github.com/Coolerfall/go-utils/blob/master/hash.go">github</a> 上。</p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>hash</tag>
      </tags>
  </entry>
  <entry>
    <title>Android App Daemon</title>
    <url>/2015/03/22/android-app-daemon/</url>
    <content><![CDATA[<p>一直没空把 App Daemon 的原理整理一下，见不少人在问原理，我这里就把整个流程大概的说一下。关于进程守护，从接触 Android 没多久就一直想实现，网上给出的方案也是各种各样，有双服务方式，有利用系统定时器方式的等等等等，但我都有过尝试，最终都没有达到自己想要的结果。后来想到自己以前在搞 linux 的时候用到子进程来处理一些任务，而 Android 正是基于 linux 的，觉得这样的话应该是可行的。最初直接在 JNI 的 c 代码中 fork 出一个子进程出来，然后在子进程中加一个 while (1)，再在 while 中 sleep 并打开一个指定的 service，这样一个最简单的守护完成了。但是后来测试发现，虽然能实现功能，不过使用 adb shell 查看进程 (命令: ps | grep com.coolerfall….)，发现 fork 出来的进程的 VSIZE (进程虚拟地址空间大小) 和 RSS (进程正在使用的物理内存的大小) 都很大，而且 UI 线程有时候会出现莫名其妙的问题，于是进程守护也就暂时放下了。后来由于项目需求，又不得不开始折腾进程守护。一次在看开源项目 <a href="https://github.com/ukanth/afwall">afwall</a>(android 上的流量防火墙)，发现其中的命令是直接使用 linux 命令行的方式在执行的，这才想起 linux 可以直接编译一个可执行的二进制文件，然后在命令行中直接执行。看了看 Android.mk 的文档，加入 <code>include $(BUILD_EXECUTABLE)</code> 可以让 c 文件编译成在 Android 上运行的二进制文件，最后把以前的代码直接拿过来，一切 OK 了。</p>
<span id="more"></span>
<p>原理分析：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	<span class="type">pid_t</span> pid;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ((pid = fork()) &lt; <span class="number">0</span>)</span><br><span class="line">	{</span><br><span class="line">	    <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">	{</span><br><span class="line">		<span class="comment">/* child process become session leader */</span></span><br><span class="line">		setsid();</span><br><span class="line">		<span class="comment">/* change work directory */</span></span><br><span class="line">		chdir(<span class="string">"/"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i ++)</span><br><span class="line">		{</span><br><span class="line">			close(i);</span><br><span class="line">		}</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">		{</span><br><span class="line">			sleep(interval);</span><br><span class="line"></span><br><span class="line">			LOGD(LOG_TAG, <span class="string">"check the service once"</span>);</span><br><span class="line"></span><br><span class="line">			<span class="comment">/* start service */</span></span><br><span class="line">			start_service(package_name, service_name);</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	{</span><br><span class="line">		<span class="comment">/* parent process, do nothing */</span></span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>由于要在 shell 中直接执行，因此这里使用 <code>int main(int argc, char *argv[])</code>，让可执行文件有入口。frok 出子进程之后，让子进程成为新的会话的领头进程，并与其父进程的会话组和进程组脱离，紧接着就是在子进程中定时去启动服务，这样一个简单的进程守护就 OK 了。<br>其中 <code>start_service</code> 为启动一个 Service:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/* start daemon service */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">start_service</span><span class="params">(<span class="type">char</span> *package_name, <span class="type">char</span> *service_name)</span></span><br><span class="line">{</span><br><span class="line">	<span class="comment">/* get the sdk version */</span></span><br><span class="line">	<span class="type">int</span> version = get_version();</span><br><span class="line"></span><br><span class="line">	<span class="type">pid_t</span> pid;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ((pid = fork()) &lt; <span class="number">0</span>)</span><br><span class="line">	{</span><br><span class="line">		<span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">	{</span><br><span class="line">		<span class="keyword">if</span> (package_name == <span class="literal">NULL</span> || service_name == <span class="literal">NULL</span>)</span><br><span class="line">		{</span><br><span class="line">			LOGE(LOG_TAG, <span class="string">"package name or service name is null"</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line">		<span class="type">char</span> *p_name = str_stitching(package_name, <span class="string">"/"</span>);</span><br><span class="line">		<span class="type">char</span> *s_name = str_stitching(p_name, service_name);</span><br><span class="line">		LOGD(LOG_TAG, <span class="string">"service: %s"</span>, s_name);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (version &gt;= <span class="number">17</span> || version == <span class="number">0</span>)</span><br><span class="line">		{</span><br><span class="line">			<span class="type">int</span> ret = execlp(<span class="string">"am"</span>, <span class="string">"am"</span>, <span class="string">"startservice"</span>,</span><br><span class="line">						<span class="string">"--user"</span>, <span class="string">"0"</span>, <span class="string">"-n"</span>, s_name, (<span class="type">char</span> *) <span class="literal">NULL</span>);</span><br><span class="line">			LOGD(LOG_TAG, <span class="string">"result %d"</span>, ret);</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		{</span><br><span class="line">			execlp(<span class="string">"am"</span>, <span class="string">"am"</span>, <span class="string">"startservice"</span>, <span class="string">"-n"</span>, s_name, (<span class="type">char</span> *) <span class="literal">NULL</span>);</span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line">		LOGD(LOG_TAG , <span class="string">"exit start-service child process"</span>);</span><br><span class="line">		<span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	{</span><br><span class="line">		waitpid(pid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>这里说明下：execlp 执行后，如果没有错误则不返回，有错时才有返回值，因此又 fork 了一个子进程，然后在子进程中启动指定的 Service。其次是 Android SDK 版本小于 17 的执行命令有所不同，17 及以上命令为：<code>execlp("am", "am", "startservice", "--user", "0", "-n", s_name, (char *) NULL)</code>, 17 以下:<code>execlp("am", "am", "startservice", "-n", s_name, (char *) NULL)</code>。获取 version 比较简单:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/system_properties.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get the version of current SDK.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">get_version</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">	<span class="type">char</span> value[<span class="number">8</span>] = <span class="string">""</span>;</span><br><span class="line">    __system_property_get(<span class="string">"ro.build.version.sdk"</span>, value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> atoi(value);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>由于编译出来的是可执行的二进制文件，所以调用就不像 so 库那样了。需要将可执行文件放在 assets 中，并在执行的时候将其 copy 至 /data/data/packagename/app_bin 文件夹下，然后在 java 中这样调用: </p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">"/data/data/&lt;packagename&gt;/app_bin/daemon"</span></span><br><span class="line">Runtime.getRuntime().exec(cmd);</span><br></pre></td></tr></tbody></table></figure>
<p>进程守护大致的原理就是这样了，只要搞清楚了原理，其实是进程守护并不复杂。</p>
<p>ps: 并不是所有手机都能用此方法实现进程守护，有的手机（如小米），自带清理进程会清理掉应用相关的所有进程。5.x 以上可参考 <a href="https://github.com/Marswin/MarsDaemon">MarsDaemon</a>.</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>ndk</tag>
      </tags>
  </entry>
  <entry>
    <title>Android App Uninstall Watcher</title>
    <url>/2015/03/24/android-app-uninstall-watcher/</url>
    <content><![CDATA[<p>很多应用在卸载后都会弹出一个网页做用户卸载反馈，这就需要监听 App 的卸载，但是应用一旦卸载就不会再执行任何程序了，如何才能弹出网页，答案就是在应用开启时就 fork 出一个子进程来，在进程中对 App 进行卸载监听。在 linux 中有个东西叫 inotify，可以对指定的文件进行监听（包括修改，删除等等），基本的流程就是 inotify_init-&gt;inotify_add_watch-&gt;inotify_event，在 inotify_event 读取操作的时候是阻塞的，一直会等到指定的文件变动后才会往下执行。</p>
<span id="more"></span>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">	<span class="type">char</span> *app_dir = <span class="string">"/data/data/com.xx.yy"</span>;</span><br><span class="line">	<span class="type">char</span> *watch_file_path = str_stitching(app_dir, <span class="string">"/uninstall.watch"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">pid_t</span> pid = fork();</span><br><span class="line">	<span class="keyword">if</span> (pid &lt; <span class="number">0</span>)</span><br><span class="line">	{</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">	{</span><br><span class="line">		<span class="comment">/* inotify init */</span></span><br><span class="line">		<span class="type">int</span> fd = inotify_init();</span><br><span class="line">		<span class="keyword">if</span> (fd &lt; <span class="number">0</span>)</span><br><span class="line">		{</span><br><span class="line">			<span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line">		<span class="type">int</span> w_fd = open(watch_file_path, O_RDWR | O_CREAT | O_TRUNC,</span><br><span class="line">				S_IRWXU | S_IRWXG | S_IRWXO);</span><br><span class="line">		<span class="keyword">if</span> (w_fd &lt; <span class="number">0</span>)</span><br><span class="line">		{</span><br><span class="line">			<span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line">		close(w_fd);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* add watch in inotify */</span></span><br><span class="line">		<span class="type">int</span> watch_fd = inotify_add_watch(fd, watch_file_path, IN_DELETE);</span><br><span class="line">		<span class="keyword">if</span> (watch_fd &lt; <span class="number">0</span>)</span><br><span class="line">		{</span><br><span class="line">			<span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line">		<span class="type">void</span> *p_buf = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> inotify_event));</span><br><span class="line">		<span class="keyword">if</span> (p_buf == <span class="literal">NULL</span>)</span><br><span class="line">		{</span><br><span class="line">			LOGD(LOG_TAG, <span class="string">"malloc inotify event failed"</span>);</span><br><span class="line">			<span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* read will block process */</span></span><br><span class="line">		read(fd, p_buf, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> inotify_event));</span><br><span class="line"></span><br><span class="line">		<span class="built_in">free</span>(p_buf);</span><br><span class="line">		inotify_rm_watch(fd, IN_DELETE);</span><br><span class="line"></span><br><span class="line">		open_browser(url);</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>与 <a href="http://coolerfall.com/android/android-app-daemon">App Daemon</a> 一样，使用命令行的方式来调用 wathcer，所有这里也 <code>int main(int argc, char *argv[])</code>，最终将这个 c 文件编译成可执行文件。为了要监听某个文件的删除，首先在 /data/data/<packagename>/ 下新建了一个 uninstall.watch 文件，在后面我们将对此文件进行监听，然后同样的，为了不妨碍主进程，这里 fork 出一个子进程，在子进程里面进行操作。接下来是关键的地方：调用 <code>inotify_init()</code> 初始化 inotify，接着将刚刚新建的 uninstall.watch 文件加入 <code>inotify_add_watch(fd, watch_file_path, IN_DELETE)</code> 中监听，这里是监听该文件的删除（第三个参数还可以是 IN_CREATE, IN_MODIFY, IN_MOVED_TO 等等，根据需求更改），接下来就是读取 <code>read(fd, p_buf, sizeof(struct inotify_event))</code>，这个函数会一直阻塞直到条件满足才会继续往下执行，最后释放并加入打开浏览器。打开浏览器也比较简单了:</packagename></p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/* open browser with specified url */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">open_browser</span><span class="params">(<span class="type">char</span> *url)</span></span><br><span class="line">{</span><br><span class="line">	<span class="comment">/* the url cannot be null */</span></span><br><span class="line">	<span class="keyword">if</span> (url == <span class="literal">NULL</span> || <span class="built_in">strlen</span>(url) &lt; <span class="number">4</span>) {</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* get the sdk version */</span></span><br><span class="line">	<span class="type">char</span> value[<span class="number">8</span>] = <span class="string">""</span>;</span><br><span class="line">	__system_property_get(<span class="string">"ro.build.version.sdk"</span>, value);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> version = atoi(value);</span><br><span class="line">	<span class="comment">/* is the version is greater than 17 */</span></span><br><span class="line">	<span class="keyword">if</span> (version &gt;= <span class="number">17</span> || version == <span class="number">0</span>)</span><br><span class="line">	{</span><br><span class="line">		execlp(<span class="string">"am"</span>, <span class="string">"am"</span>, <span class="string">"start"</span>, <span class="string">"--user"</span>, <span class="string">"0"</span>,</span><br><span class="line">				<span class="string">"-a"</span>, <span class="string">"android.intent.action.VIEW"</span>, <span class="string">"-d"</span>, url, (<span class="type">char</span> *)<span class="literal">NULL</span>);</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	{</span><br><span class="line">		execlp(<span class="string">"am"</span>, <span class="string">"am"</span>, <span class="string">"start"</span>, <span class="string">"-a"</span>, <span class="string">"android.intent.action.VIEW"</span>, <span class="string">"-d"</span>, url, (<span class="type">char</span> *)<span class="literal">NULL</span>);</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>和 <a href="http://coolerfall.com/android/android-app-daemon">App Daemon</a> 类似，也是使用 execlp 来调用 am 命令打开默认浏览器，最后就会弹出一个指定的网页了。<br>　　以上是卸载监听的基本流程，但我在实际操作过程中遇到了比如调试应用，实际上是覆盖，但这时候也会弹出网页等等，所有在子进程中的操作有所改动和优化，并在打开浏览器前使用了 <a href="http://curl.haxx.se/libcurl/">libcurl</a> 请求服务器，以满足不需要打开网页的需求，具体请查看 <a href="https://github.com/Coolerfall/Android-AppUninstallWatcher/blob/master/app/src/main/jni/watcher/watcher.c">wathcer.c</a>。</p>
<p>ps: 此方法和 <a href="http://coolerfall.com/android/android-app-daemon">App Daemon</a> 一样由于系统原因不能适配所有手机，请注意。</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>ndk</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 gradle 将项目上传到 maven 中央库</title>
    <url>/2015/03/27/gradle-push-to-maven/</url>
    <content><![CDATA[<p>用 AS 开发也有一段时间了，发现 AS 可以使用 maven，在 gradle 中可以很方便的解决依赖问题，再也不用去下载相应的 jar 包了。gradle 添加一些依赖库比较方便，但是如果想把自己的一些开源项目上传到 maven 中央库给别人使用，就稍微有些麻烦了。现在比较简单的办法是先将自己在 github 上的项目提交到 Sonatype，然后再同步到 maven 中央库去，大致说一下流程。</p>
<span id="more"></span>

<h4 id="注册JIRA账号"><a href="#注册JIRA账号" class="headerlink" title="注册JIRA账号"></a>注册 JIRA 账号</h4><p>要想把项目提交到 Sonatype，首先得得去 <a href="https://issues.sonatype.org/">Sonatype Issue</a> 去注册一个 JIRA 账号，注册流程很简单，挨着填写就 ok 了，这个账号在后面配置的时候要用到。</p>
<h4 id="创建一个issue"><a href="#创建一个issue" class="headerlink" title="创建一个issue"></a>创建一个 issue</h4><p>账号注册好之后，就开始创建一个 issue，这个 issue 对应你的一个项目，在上面导航栏中有个 Create 按钮：<br><img data-src="/images/gradle-maven/new-issue.jpg" alt="img"><br>然后再弹出的对话框中填写项目的信息：<br><img data-src="/images/gradle-maven/create_issue1.jpg" alt="img"><br><img data-src="/images/gradle-maven/create_issue2.jpg" alt="img"><br>其中 Group Id 很重要，一般为自己的域名，这个在后面提交项目的时候要用到。创建好 issue 后，接下来就是等待，然后工作人员会给你发送邮件。这个时候可以在导航栏中的 Issue 中找到自己创建的 issue，到下面的 comments 可以看到工作人员问你之前填写的 group id 这个域名是否是你的，回答是，然后工作人员就会让你提交你的项目到 Sonatype:<br><img data-src="/images/gradle-maven/comments1.jpg" alt="img"></p>
<h4 id="生成GPG密钥，用于上传的文件加密和签名"><a href="#生成GPG密钥，用于上传的文件加密和签名" class="headerlink" title="生成GPG密钥，用于上传的文件加密和签名"></a>生成 GPG 密钥，用于上传的文件加密和签名</h4><p>linux 下可以直接使用 gpg。windows 上则可以使用 git 自带的 gpg (如果没有安装 git，可以直接安装 <a href="http://gpg4win.org/">gpg4win</a>)，在 cmd 中执行：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gpg --gen-key</span></span><br></pre></td></tr></tbody></table></figure>
<p>姓名，邮箱以及备注要认真填写，最后要求输入 passphase，这个是密码，上传 maven 要用到。</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gpg --list-keys --keyid-format SHORT</span></span><br><span class="line">/home/xxxx/.gnupg/pubring.kbx</span><br><span class="line">-------------------------------</span><br><span class="line">pub   rsa4096/BB090204 2019-01-03 [SC]</span><br><span class="line">      7B0A1A36C235E95636B75C53D781EED2BB090204</span><br><span class="line">uid           [ultimate] Vincent Cheung (coolerfall.com) &lt;coolingfall@gmail.com&gt;</span><br><span class="line">sub   rsa4096/9123FD1A 2019-01-03 [E]</span><br></pre></td></tr></tbody></table></figure>

<p>其中 BB090204 是 key id，接下来将公钥上传至服务器：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gpg --keyserver hkp://pool.sks-keyservers.net --send-keys BB090204</span></span><br></pre></td></tr></tbody></table></figure>

<p>gpg 2.1 之后需要手动导出 secring：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">gpg --keyring secring.gpg --export-secret-keys &gt; ~/.gnupg/secring.gpg</span><br></pre></td></tr></tbody></table></figure>

<h4 id="使用gradle提交项目到Sonatype"><a href="#使用gradle提交项目到Sonatype" class="headerlink" title="使用gradle提交项目到Sonatype"></a>使用 gradle 提交项目到 Sonatype</h4><p>在网上找到了 Chris Banes 写的 <a href="https://raw.githubusercontent.com/chrisbanes/gradle-mvn-push/master/gradle-mvn-push.gradle">gradle-mvn-push.gradle</a> 脚本，参照这个基本就可以了，然后将这个脚本在你项目的 <code>build.gradle</code> 的最后加入 <code>apply from: '../maven_push.gradle'</code>，如果想发布 jar，需要在脚本中加入：</p>
<figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">artifacts {</span><br><span class="line">	archives packageReleaseJar</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>然后需要在项目下的 <code>gradle.properties</code> 中加入相应参数的值：</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">VERSION_NAME=1.3.0</span><br><span class="line">POM_GROUP_ID=com.coolerfall</span><br><span class="line">POM_NAME=Http Download Manager</span><br><span class="line">POM_ARTIFACT_ID=android-http-download-manager</span><br><span class="line">POM_DESCRIPTION=An useful and effective http/https download manager for Android, support breakpoint downloading</span><br><span class="line">POM_URL=https://github.com/Coolerfall/Android-HttpDownloadManager</span><br><span class="line">POM_SCM_URL=https://github.com/Coolerfall/Android-HttpDownloadManager</span><br><span class="line">POM_SCM_CONNECTION=scm:git@github.com:Coolerfall/Android-HttpDownloadManager.git</span><br><span class="line">POM_SCM_DEV_CONNECTION=scm:git@github.com:Coolerfall/Android-HttpDownloadManager.git</span><br><span class="line">POM_LICENCE_NAME=The Apache Software License, Version 2.0</span><br><span class="line">POM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt</span><br><span class="line">POM_LICENCE_DIST=repo</span><br><span class="line">POM_PACKAGING=jar</span><br><span class="line"></span><br><span class="line">POM_DEVELOPER_ID=coolerfall</span><br><span class="line">POM_DEVELOPER_NAME=Vincent Cheung</span><br><span class="line">POM_INCEPTION_YEAR=2014</span><br></pre></td></tr></tbody></table></figure>

<p>VERSION_NAME 如果后面带有 SNAPSHOT 字符串将会提交到 <a href="https://oss.sonatype.org/content/repositories/snapshots">snapshots</a>，这个不需要同步就可以下载 jar 以及源码等，如果不加则是发布 release 版本，这个就需要同步到 maven center 了。然后还需要在 <code>C:/Users/xxx/.gradle/gradle.properties</code> 中添加 Sonatype 账号、密码以及签名信息</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">NEXUS_USERNAME=username</span><br><span class="line">NEXUS_PASSWORD=password</span><br><span class="line"></span><br><span class="line">signing.keyId=BB090204</span><br><span class="line">signing.password=password</span><br><span class="line">signing.secretKeyRingFile=C:/Users/xxx/AppData/Roaming/gnupg/secring.gpg</span><br></pre></td></tr></tbody></table></figure>
<p>其中 signing.password 就是刚刚生成 gpg 时候的 passphase。接下来就可以使用 gralde 提交项目：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">%GRADLE_HOME%/bin/gradle uploadArchives</span></span><br></pre></td></tr></tbody></table></figure>
<p>我使用的是 AS 最新版本，gradle home 在 AS 目录下（如果不是请自行找到 gradle home）<br>登陆到 <a href="https://oss.sonatype.org/">Sonatype Nexus</a>，查看 Staging Repositories，然后在搜索中过滤出你的 Group Id，就可以看到你刚刚提交的项目，接下来发布 release 版本了，先 close 再 Release:<br><img data-src="/images/gradle-maven/release.jpg" alt="img"><br>然后在 <a href="https://issues.sonatype.org/">Sonatype Issue</a> 给工作人员回复，你已经成功发布，让他们帮你同步到 maven 中央库去：<br><img data-src="/images/gradle-maven/comments2.jpg" alt="img"><br>最后就是等待工作人员给你同步，成功同步后，一般 10 几分钟左右就可以在 <a href="http://search.maven.org/">maven center</a> 搜索到你的项目了，这样就可以在 AS 中使用 gradle 来添加依赖了。如果对 <a href="https://raw.githubusercontent.com/chrisbanes/gradle-mvn-push/master/gradle-mvn-push.gradle">gradle-mvn-push.gradle</a> 配置还有什么疑问，请参考我的项目：<a href="https://github.com/Coolerfall/Android-HttpDownloadManager">Android-HttpDownloadManger</a>。<br>ps: 如果创建 issue 的时候，工作人员回复 <code>Only one JIRA issue per top-level groupId is necessary. You should already have all the necessary permissions to deploy and new artifacts to this groupId or to any sub-groups thanks to OSSRH-14919.</code>, 说明之前已经成功的 release 了一个项目，就不需要再创建一个新的 issue 了，直接将项目提交到 <a href="https://oss.sonatype.org/content/repositories/snapshots">snapshots</a>，并进行 closed 和 realease 操作即可，过 10 分钟左右就可以在 gradle 中使用了。</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android studio</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Android taskAffinity 与桌面快捷方式</title>
    <url>/2015/04/02/android-task-affinity/</url>
    <content><![CDATA[<p>最近在做一个像豌豆荚游戏文件类似的东西，但是遇到个奇怪的问题，就是应用打开后 home 键退出，然后再点击文件夹，会同时弹出文件夹以及 home 退出之前的界面，经过一番折腾，算是整明白了问题。首先说说 taskAffinity，每个 application 创建的时候，都会有 taskAffinity，默认情况下同一个 application 下的所有 activity 都属于同一个 taskAffinity，都会在相同的 task 中。而这里创建的文件夹快捷方式，相当于是让其指定到了应用的某个 acitivity，如果没有给这个 activity 指定 taskAffinity 的话，那么将会与前面的 activity 运行在相同的 task 中，也就是在打开快捷方式后，若前面的 activity 未 finish 掉，这个时候会从栈中弹出，出现我所遇到的问题。最后在文件夹快捷方式指定的 activity 中加入 <code>android:taskAffinity=":icon"</code>，问题就解决了。</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>taskAffinity</tag>
      </tags>
  </entry>
  <entry>
    <title>记录 git 使用中遇到的一些小问题</title>
    <url>/2015/05/13/git-problems/</url>
    <content><![CDATA[<p>现在在项目中 git 的使用已经比较频繁了，难免会遇到各种各样的小问题，这里记录下这些问题。</p>
<h4 id="1-在push大文件的时候遇到"><a href="#1-在push大文件的时候遇到" class="headerlink" title="1.在push大文件的时候遇到"></a>1. 在 push 大文件的时候遇到</h4><pre><code>error: RPC failed; result=22, HTTP code = 411
fatal: The remote end hung up unexpectedly
fatal: The remote end hung up unexpectedly
</code></pre>
<p>这个是因为 http buffer 不够造成的，可以简单配置 git 来解决：</p>
<pre><code>git config http.postBuffer 67108864
</code></pre>
<h4 id="2-想要把已经push的文件（夹）加入到-ignore中"><a href="#2-想要把已经push的文件（夹）加入到-ignore中" class="headerlink" title="2.想要把已经push的文件（夹）加入到.ignore中"></a>2. 想要把已经 push 的文件（夹）加入到.ignore 中</h4><p>直接添加到.ignore 中是不能成功的，因为已经 push 到服务器了，需要先删除本地缓存的文件：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">rm</span> -r --cached .idea</span></span><br></pre></td></tr></tbody></table></figure>
<p>然后再将其添加到.ignore 中，最后 git push 就 ok 了</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Android activity 的四种 launchMode</title>
    <url>/2015/06/02/android-launch-mode/</url>
    <content><![CDATA[<p>Android 的四种 launchMode 是我们比较常用的基础点，但是有时候很容易就混淆了。Activity 一共有四种启动方式：standard、singleTask、singleInstance、singleTop，四种方式各有个的特点，在不同情况下会使用不同的启动方式。</p>
<span id="more"></span>

<h4 id="1-standard启动方式"><a href="#1-standard启动方式" class="headerlink" title="1. standard启动方式"></a>1. standard 启动方式</h4><p>这种方式是 sdk 种默认的方式，如果不给 activity 设置启动方式，那么就会默认的采用这种启动方式，这种方式在调用 startActivity 的时候，不管之前是否启动过，系统都会重新创建一个实例出来</p>
<h4 id="2-singleTask启动方式"><a href="#2-singleTask启动方式" class="headerlink" title="2. singleTask启动方式"></a>2. singleTask 启动方式</h4><p>如果有其他 task 已经创建了这个 activity，则会直接调用这个实例</p>
<h4 id="3-singleInstance启动方式"><a href="#3-singleInstance启动方式" class="headerlink" title="3. singleInstance启动方式"></a>3. singleInstance 启动方式</h4><p>新建一个 task，并且该 task 中有且只有一个该 activity 的实例，如果后面再次调用 startActivity，会重用这个实例</p>
<h4 id="4-singleTop启动方式"><a href="#4-singleTop启动方式" class="headerlink" title="4. singleTop启动方式"></a>4. singleTop 启动方式</h4><p>如字面意思，在 task 栈顶只有一个实例，也就是如果当前栈顶是 acticity A，如果启动 intent 又跳转到 A，则不会产生新的实例，但如果 A 最初不在栈顶，则会产生一个实例（如：任务栈 A B C D，D 在栈顶，这个时候有 Intent 启动了 D，则启动后的任务栈情况为 A B C D；如果有 Intent 启动了 B，则任务栈的情况为： A B C D B。<br>以上为 activity 的四种方式，比较容易混淆，记录下来以备查看。</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>launch mode</tag>
      </tags>
  </entry>
  <entry>
    <title>linux shell 报错 bad interpreter No such file or directory</title>
    <url>/2015/06/23/bad-interpreter/</url>
    <content><![CDATA[<p>最近在 linux 使用 ndk 编译一些东西，就使用到了 shell 脚本，结果在执行的时候出现：</p>
<pre><code>bash: ./build_android.sh: /bin/bash^M: bad interpreter: No such file or directory
</code></pre>
<p>使用 vim 打开 shell 脚本，发现并没有问题，最后发现是由于 shell 脚本在 windows 下编写的，copy 到 linux 后文本格式不对，所以只需要更改一下文本格式就可以了，用 vim 打开 shell 脚本，在命令行模式下：</p>
<pre><code>:set fileformat=unix
</code></pre>
<p>最后保存退出就可以执行了。</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Android JNI 类型、方法签名规范</title>
    <url>/2015/07/03/jni-signature/</url>
    <content><![CDATA[<p>在 Android 开发中不免会使用到 JNI，JNI 编程中可以使用 javah 等工具自动生成 jni 的头文件，但是如果想自己手动注册，那么就需要了解 JNI 方法的签名规范，记录一下，以备以后查看。</p>
<span id="more"></span>

<table>
<thead>
<tr>
<th align="center">Java 类型</th>
<th align="center"> Native 类型</th>
<th align="center"> JNI 签名</th>
</tr>
</thead>
<tbody><tr>
<td align="center"> boolean</td>
<td align="center">jboolean</td>
<td align="center">Z</td>
</tr>
<tr>
<td align="center">byte</td>
<td align="center">jbyte</td>
<td align="center">B</td>
</tr>
<tr>
<td align="center">char</td>
<td align="center">jchar</td>
<td align="center">C</td>
</tr>
<tr>
<td align="center">short</td>
<td align="center">jshort</td>
<td align="center">S</td>
</tr>
<tr>
<td align="center">int</td>
<td align="center">jint</td>
<td align="center">I</td>
</tr>
<tr>
<td align="center">long</td>
<td align="center">jlong</td>
<td align="center">J</td>
</tr>
<tr>
<td align="center">float</td>
<td align="center">jfloat</td>
<td align="center">F</td>
</tr>
<tr>
<td align="center">double</td>
<td align="center">jdouble</td>
<td align="center">D</td>
</tr>
<tr>
<td align="center">byte[]</td>
<td align="center">jbyteArray</td>
<td align="center">[B</td>
</tr>
<tr>
<td align="center">char[]</td>
<td align="center">jcharArray</td>
<td align="center">[C</td>
</tr>
<tr>
<td align="center">short[]</td>
<td align="center">jshortArray</td>
<td align="center">[S</td>
</tr>
<tr>
<td align="center">int[]</td>
<td align="center">jintArray</td>
<td align="center">[I</td>
</tr>
<tr>
<td align="center">long[]</td>
<td align="center">jlongArray</td>
<td align="center">[L</td>
</tr>
<tr>
<td align="center">float[]</td>
<td align="center">jfloatArray</td>
<td align="center">[F</td>
</tr>
<tr>
<td align="center">double[]</td>
<td align="center">jdoubleArray</td>
<td align="center">[D</td>
</tr>
<tr>
<td align="center">Java 类 (例: String)</td>
<td align="center">jstring/jobject</td>
<td align="center">L 全类名；(例: Ljava/lang/String;</td>
</tr>
<tr>
<td align="center">Java 方法 (例: start (String path, long pos, long duration))</td>
<td align="center">Native 方法 (例: start (jstring path, jlong pos, jlong duration))</td>
<td align="center">(参数签名…) 返回值签名 (例: (Ljava/lang/String;JJ) V)</td>
</tr>
</tbody></table>
<p>要注意的是 java 类的签名，最后的分号不要忘记。String 类比较特别，jni 提供了就 jstring 与之对应，java 方法签名中，括号里面是所有参数的类型签名，中间无间隔，括号外面是返回值类型签名。</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>jni</tag>
      </tags>
  </entry>
  <entry>
    <title>Android JNI 注册的两种方式</title>
    <url>/2015/07/09/jni_register/</url>
    <content><![CDATA[<p>Android JNI 开发时，如何注册 JNI 的方法，Java 才能调用，下面说一下 JNI 的两种注册方法。</p>
<h4 id="第一种方法：静态注册"><a href="#第一种方法：静态注册" class="headerlink" title="第一种方法：静态注册"></a>第一种方法：静态注册</h4><p>所谓静态注册就是调用 java 的命令工具 javah 来生成头文件，然后再实现头文件中的所有函数即可。这种方法比较简单，首先在命令行中（我这里使用的是 windows cmd，linux、mac 是一样的），进入到 src 目录下，然后执行：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">javah -d E:\SourceCode\Android\JniTest\ -jni com.coolerfall.HelloJni</span></span><br></pre></td></tr></tbody></table></figure>
<p>其中 - d 表示生成的头文件的输出目录，可以自行设置，com.coolerfall.HelloJni 是包含有 native 方法的类，native 方法如：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>最后生成一个 com_coolerfall_player_HelloJni.h 头文件，接下来就可以新建一个 c 文件实现这些函数就 ok 了。</p>
<span id="more"></span>
<h4 id="第二种方法：动态注册"><a href="#第二种方法：动态注册" class="headerlink" title="第二种方法：动态注册"></a>第二种方法：动态注册</h4><p>静态方法虽然用起来方便，只需要使用一句命令行就搞定了，但是这种方法我们不知道 jni 的注册过程是怎样的，而且如果新添加一个方法后，又得重新生成一次，比较麻烦，动态注册就可以避免这个问题。和静态注册的区别在于，不使用 javah，而由我们自己来写注册函数等等。<br>　　我们可以新建一个 c 文件，比如 init.c，然后在里面添加</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> JNINativeMethod g_methods[] = {</span><br><span class="line">	{<span class="string">"init"</span>, <span class="string">"()V"</span>, (<span class="type">void</span> *)init},</span><br><span class="line">	{<span class="string">"start"</span>, <span class="string">"(Ljava/lang/String;JJ)V"</span>, (<span class="type">void</span> *)start},</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">register_native_methods</span><span class="params">(JNIEnv* env, <span class="type">const</span> <span class="type">char</span>* class_name,</span></span><br><span class="line"><span class="params">		JNINativeMethod* methods, <span class="type">int</span> num_methods)</span></span><br><span class="line">{</span><br><span class="line">	jclass clazz;</span><br><span class="line">	clazz = (*env)-&gt;FindClass(env, class_name);</span><br><span class="line">	<span class="keyword">if</span> (clazz == <span class="literal">NULL</span>) {</span><br><span class="line">		<span class="keyword">return</span> JNI_FALSE;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">if</span> ((*env)-&gt;RegisterNatives(env, clazz, methods, num_methods) &lt; <span class="number">0</span>) {</span><br><span class="line">		<span class="keyword">return</span> JNI_FALSE;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> JNI_TRUE;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">jint <span class="title function_">JNI_OnLoad</span><span class="params">(JavaVM *vm, <span class="type">void</span> *reserved)</span></span><br><span class="line">{</span><br><span class="line">	JNIEnv* env = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ((*vm)-&gt;GetEnv(vm, (<span class="type">void</span> **) &amp;env, JNI_VERSION_1_4) != JNI_OK)</span><br><span class="line">	{</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!register_native_methods(env, <span class="string">"com/coolerfall/HelloJni"</span>, g_methods,</span><br><span class="line">			<span class="keyword">sizeof</span>(g_methods) / <span class="keyword">sizeof</span>(g_methods[<span class="number">0</span>])))</span><br><span class="line">	{</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> JNI_VERSION_1_4;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Java 层调用 System.loadLibrary (“xxx”) 的时候，会首先进入 JNI_OnLoad 这个函数里面，因此，我们就在这里面调用 register_native_methods 对 JNI 的一些列方法进行注册，最终在 register_native_methods 调用了 jni 函数 RegisterNatives 来对 native 方法注册到对应的类上去，这样就完成了 jni 的注册，java 就可以调用 jni 的方法了。使用这种方法时，添加一个 native 方法就非常方便了，直接在 g_methods 数组里面添加新的方法即可。</p>
<p>关于 g_methods 数组里面方法的签名规则可以查看 <a href="http://coolerfall.com/android/jni-signature/">Android JNI 类型、方法签名规范</a>。</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>jni</tag>
      </tags>
  </entry>
  <entry>
    <title>TextView 实现跑马灯效果</title>
    <url>/2015/07/20/android-marquee/</url>
    <content><![CDATA[<p>最近在自己的音乐播放器项目中要加入跑马灯效果，于是便研究了下。跑马灯效果是 TextView 自带的一个属性，使用 TextView 来实现单个、多个跑马灯效果比较简单。</p>
<span id="more"></span>
<h4 id="1-单个跑马灯效果"><a href="#1-单个跑马灯效果" class="headerlink" title="1.单个跑马灯效果"></a>1. 单个跑马灯效果</h4><p>这种比较简单，只需要在布局文件中加入几个属性就可以了：</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:ellipsize</span>=<span class="string">"marquee"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:focusable</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:focusableInTouchMode</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:marqueeRepeatLimit</span>=<span class="string">"marquee_forever"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:singleLine</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-多个跑马灯效果"><a href="#2-多个跑马灯效果" class="headerlink" title="2.多个跑马灯效果"></a>2. 多个跑马灯效果</h4><p>在同一个 layout 中，两个 TextView 如果都设置了焦点，只有后一个会处于 focused 的状态，这个时候需要写一个类来继承 TextView，稍作修改即可：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MarqueeView</span> <span class="keyword">extends</span> <span class="title class_">TextView</span> {</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">MarqueeView</span><span class="params">(Context context)</span> {</span><br><span class="line">		<span class="built_in">this</span>(context, <span class="literal">null</span>);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">MarqueeView</span><span class="params">(Context context, AttributeSet attrs)</span> {</span><br><span class="line">		<span class="built_in">this</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">MarqueeView</span><span class="params">(Context context, AttributeSet attrs, <span class="type">int</span> defStyleAttr)</span> {</span><br><span class="line">		<span class="built_in">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onFocusChanged</span><span class="params">(<span class="type">boolean</span> focused, <span class="type">int</span> direction, Rect previouslyFocusedRect)</span> {</span><br><span class="line">		<span class="built_in">super</span>.onFocusChanged(<span class="literal">true</span>, direction, previouslyFocusedRect);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onWindowFocusChanged</span><span class="params">(<span class="type">boolean</span> hasWindowFocus)</span> {</span><br><span class="line">		<span class="built_in">super</span>.onWindowFocusChanged(<span class="literal">true</span>);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFocused</span><span class="params">()</span> {</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>然后就可以在布局文件中使用了：</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">MarqueeView</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:ellipsize</span>=<span class="string">"marquee"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:marqueeRepeatLimit</span>=<span class="string">"marquee_forever"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:singleLine</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="3-在appwidget中实现跑马灯效果"><a href="#3-在appwidget中实现跑马灯效果" class="headerlink" title="3.在appwidget中实现跑马灯效果"></a>3. 在 appwidget 中实现跑马灯效果</h4><p>appwidget 比较特殊，它只支持几个固定的 view，所以就不能实现多个跑马灯效果，只能实现单个效果，不过和在普通 layout 中的实现稍微有所不同：</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:ellipsize</span>=<span class="string">"marquee"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:focusable</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:focusableInTouchMode</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:marqueeRepeatLimit</span>=<span class="string">"marquee_forever"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:singleLine</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">requestFocus</span></span></span><br><span class="line"><span class="tag">		<span class="attr">android:duplicateParentState</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">android:focusable</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">android:focusableInTouchMode</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>需要在 TextView 中加入 requestFocus 标签才可以实现跑马灯效果。</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>widget</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 中计算字符串以及文件的 hash 值</title>
    <url>/2015/07/23/java-hash/</url>
    <content><![CDATA[<p>Android 开发中常常会使用到 hash 值，字符串的 hash 用的比较多，一般用于字段、存储的 key 等等，文件的 hash 一般用于校验文件的正确性，记录下最简单的方式。<br> <span id="more"></span><br>计算字符串的 hash 值，网上也有其他的计算方法，这里给出一个相对简洁的方法：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">md5</span><span class="params">(String origin)</span> {</span><br><span class="line">	<span class="keyword">try</span> {</span><br><span class="line">		<span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">		md.update(origin.getBytes(<span class="string">"UTF-8"</span>));</span><br><span class="line">		<span class="type">BigInteger</span> <span class="variable">bi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="number">1</span>, md.digest());</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> bi.toString(<span class="number">16</span>);</span><br><span class="line">	} <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">		<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>注意要把字符串用 utf-8 的方式获取 byte，否则会导致不用语言之间得出的结果不一样（比如 php 或 go）。<br>计算文件的 hash 值略麻烦一点：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">fileHash</span><span class="params">(String filePath)</span> {</span><br><span class="line">	<span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">	<span class="keyword">if</span> (file == <span class="literal">null</span> || !file.exists()) {</span><br><span class="line">		<span class="keyword">return</span> NULL;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> NULL;</span><br><span class="line">	<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> {</span><br><span class="line">		fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">		<span class="type">MappedByteBuffer</span> <span class="variable">mbf</span> <span class="operator">=</span> fis.getChannel().map(</span><br><span class="line">				FileChannel.MapMode.READ_ONLY, <span class="number">0</span>, file.length());</span><br><span class="line">		<span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">		md.update(mbf);</span><br><span class="line">		<span class="type">BigInteger</span> <span class="variable">bi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="number">1</span>, md.digest());</span><br><span class="line">		result = bi.toString(<span class="number">16</span>);</span><br><span class="line">	} <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">		<span class="keyword">return</span> NULL;</span><br><span class="line">	} <span class="keyword">finally</span> {</span><br><span class="line">		<span class="keyword">if</span> (fis != <span class="literal">null</span>) {</span><br><span class="line">			<span class="keyword">try</span> {</span><br><span class="line">				fis.close();</span><br><span class="line">			} <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">				<span class="comment">/* ignore */</span></span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>如果文件较大，这个计算过程可能会比较长。</p>
<p>sha1 和 sha256 的计算方法就很类似了，只需要将 <code>MessageDigest.getInstance("MD5")</code> 换一下就可以用了。go 版本的 hash 计算请查看 <a href="http://coolerfall.com/go/golang-hash">go-hash</a>。</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>hash</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux c 语言一些字符串操作函数的实现</title>
    <url>/2015/07/21/linux-c-string-operation/</url>
    <content><![CDATA[<p>c 语言对字符串的操作函数有很多都没有实现，比如 java 中的 trim、indexOf、substring 等等，于是就动手实现了几个字符串操作函数，以备以后开发中使用。</p>
<span id="more"></span>
<h4 id="1-trim函数（去掉字符串首尾空格）"><a href="#1-trim函数（去掉字符串首尾空格）" class="headerlink" title="1.trim函数（去掉字符串首尾空格）"></a>1.trim 函数（去掉字符串首尾空格）</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Remove space from string at the beginning and end.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param src pointer to source string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">trim</span><span class="params">(<span class="type">char</span> *src)</span></span><br><span class="line">{</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	<span class="type">int</span> len = <span class="built_in">strlen</span>(src);</span><br><span class="line">	<span class="type">int</span> start = <span class="number">0</span>, end = len - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (start &lt; end &amp;&amp; src[start] &lt;= <span class="string">' '</span> &amp;&amp; src[start] != <span class="number">0</span>)</span><br><span class="line">	{</span><br><span class="line">		start ++;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (end &gt;= start &amp;&amp; src[end] &lt;= <span class="string">' '</span> &amp;&amp; src[end] != <span class="number">0</span>)</span><br><span class="line">	{</span><br><span class="line">		end --;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	memmove(src, src + start, end - start + <span class="number">1</span>);</span><br><span class="line">	src[end - start + <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-index-of函数（获得某个字符串在另一个字符串中第一次出现时的位置）"><a href="#2-index-of函数（获得某个字符串在另一个字符串中第一次出现时的位置）" class="headerlink" title="2.index_of函数（获得某个字符串在另一个字符串中第一次出现时的位置）"></a>2.index_of 函数（获得某个字符串在另一个字符串中第一次出现时的位置）</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * To get the index when sub string first appear in src.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param src src string</span></span><br><span class="line"><span class="comment"> * @param sub the string to search</span></span><br><span class="line"><span class="comment"> * @return    the index of substring in source string, </span></span><br><span class="line"><span class="comment"> *            otherwise return -1 if not exists</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">index_of</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *src, <span class="type">const</span> <span class="type">char</span> *sub)</span></span><br><span class="line">{</span><br><span class="line">	<span class="type">char</span> *result = <span class="built_in">strstr</span>(src, sub);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> result ? <span class="built_in">strlen</span>(src) - <span class="built_in">strlen</span>(result) : <span class="number">-1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="3-last-index-of函数（获得某个字符串在另一个字符串中最后一次出现时的位置）"><a href="#3-last-index-of函数（获得某个字符串在另一个字符串中最后一次出现时的位置）" class="headerlink" title="3.last_index_of函数（获得某个字符串在另一个字符串中最后一次出现时的位置）"></a>3.last_index_of 函数（获得某个字符串在另一个字符串中最后一次出现时的位置）</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * To get the index when need string last appear in src.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param src  src string</span></span><br><span class="line"><span class="comment"> * @param need the string to search</span></span><br><span class="line"><span class="comment"> * @return     the index of substring in source string, </span></span><br><span class="line"><span class="comment"> *             otherwise return -1 if not exists</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">last_index_of</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *src, <span class="type">const</span> <span class="type">char</span> *need)</span></span><br><span class="line">{</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> *p = src + <span class="built_in">strlen</span>(src);</span><br><span class="line">	<span class="type">size_t</span> len = <span class="built_in">strlen</span>(need);</span><br><span class="line">	<span class="type">char</span> *buf;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(src); i ++)</span><br><span class="line">	{</span><br><span class="line">		buf = <span class="built_in">strchr</span>(p --, *need);</span><br><span class="line">		<span class="keyword">if</span> (!buf)</span><br><span class="line">		{</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strncmp</span>(buf, need, len) == <span class="number">0</span>)</span><br><span class="line">		{</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">strlen</span>(src) - <span class="built_in">strlen</span>((<span class="type">char</span> *)buf);</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="4-substring函数（截取字符串）"><a href="#4-substring函数（截取字符串）" class="headerlink" title="4.substring函数（截取字符串）"></a>4.substring 函数（截取字符串）</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get sub string from source string.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param dest  dest poniter to save string</span></span><br><span class="line"><span class="comment"> * @param src   source string poniter</span></span><br><span class="line"><span class="comment"> * @param start the start index</span></span><br><span class="line"><span class="comment"> * @param end   the end index</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">substring</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src, <span class="type">int</span> start, <span class="type">int</span> end)</span></span><br><span class="line">{</span><br><span class="line">	<span class="type">int</span> i = start;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (start &gt; <span class="built_in">strlen</span>(src))</span><br><span class="line">	{</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (end &gt; <span class="built_in">strlen</span>(src))</span><br><span class="line">	{</span><br><span class="line">		end = <span class="built_in">strlen</span>(src);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (i &lt; end)</span><br><span class="line">	{</span><br><span class="line">		dest[i - start] = src[i];</span><br><span class="line">		i ++;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	dest[i - start] = <span class="string">'\0'</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="5-starts-with函数（检测字符串是否以某个字符串开头）"><a href="#5-starts-with函数（检测字符串是否以某个字符串开头）" class="headerlink" title="5.starts_with函数（检测字符串是否以某个字符串开头）"></a>5.starts_with 函数（检测字符串是否以某个字符串开头）</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * To check if the string start with specified string.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param  src    source string pointer</span></span><br><span class="line"><span class="comment"> * @param  prefix prefix string poniter</span></span><br><span class="line"><span class="comment"> * @return        ture if start with specified string, otherwise return false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">starts_with</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *src, <span class="type">const</span> <span class="type">char</span> *prefix)</span></span><br><span class="line">{</span><br><span class="line">	<span class="type">int</span> len = <span class="built_in">strlen</span>(prefix);</span><br><span class="line">	<span class="type">char</span> buf[len];</span><br><span class="line"></span><br><span class="line">	substring(buf, src, <span class="number">0</span>, len);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> !<span class="built_in">strcmp</span>(buf, prefix);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="6-ends-with函数（检测字符串是否以某个字符串结尾）"><a href="#6-ends-with函数（检测字符串是否以某个字符串结尾）" class="headerlink" title="6.ends_with函数（检测字符串是否以某个字符串结尾）"></a>6.ends_with 函数（检测字符串是否以某个字符串结尾）</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * To check if the string end with specified string.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param  src    source string pointer</span></span><br><span class="line"><span class="comment"> * @param  suffix suffix string poniter</span></span><br><span class="line"><span class="comment"> * @return        ture if end with specified string, otherwise return false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ends_with</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *src, <span class="type">const</span> <span class="type">char</span> *suffix)</span></span><br><span class="line">{</span><br><span class="line">	<span class="type">int</span> len = <span class="built_in">strlen</span>(suffix);</span><br><span class="line">	<span class="type">char</span> buf[len];</span><br><span class="line"></span><br><span class="line">	substring(buf, src, <span class="built_in">strlen</span>(src) - len, <span class="built_in">strlen</span>(src));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> !<span class="built_in">strcmp</span>(buf, suffix);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>其中 starts_with 和 ends_with 使用了 substring 函数，其他函数都可以单独使用。</p>
]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>Android AppWidget 中实现动画效果</title>
    <url>/2015/07/26/app-widget-animation/</url>
    <content><![CDATA[<p>最近在写 AppWidget 的时候，想实现一个淡入的动画效果，由于 AppWidget 只支持几种 view 并且没有提供实现动画的方法，折腾了很久发现只有使用 LayoutAnimation 可以勉强实现动画效果。</p>
<span id="more"></span>
<p>这里就拿淡入动画作为例子。首先在 <code>res/anim</code> 中新建一个动画 <code>fade_in.xml</code>：</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alpha</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:duration</span>=<span class="string">"1200"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:fromAlpha</span>=<span class="string">"0.0"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:interpolator</span>=<span class="string">"@android:anim/accelerate_interpolator"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:toAlpha</span>=<span class="string">"0.8"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>然后再新建一个 layoutAnimation，<code>widget_fade_in.xml</code>：</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">layoutAnimation</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">android:animation</span>=<span class="string">"@anim/fade_in"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>动画效果准备好后，接下来就是在 AppWidget 布局中使用了。比如 AppWidget 的布局，<code>widget_layout.xml</code> 如下：</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"@color/widget_bg"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/widget_layout_iv"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layoutAnimation</span>=<span class="string">"@anim/widget_fade_in"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/widget_iv"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"100.0dip"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"100.0dip"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/widget_tv"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"@string/app_name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>要让 ImageView 实现淡入动画，需要将其单独加入到一个 layout 中，然后在 layout 中加入 <code>android:layoutAnimation="@anim/widget_fade_in"</code>。这样 ImageView 所在的 layout 就有动画效果了，不过这个动画效果只会在 AppWidget 第一次加载的时候有，如果想每隔一段时间去切换，就需要让 AppWidget 不断的实现重新加载的过程，需要使用到 RemoteViews 的 removeAllViews 和 addView 方法，这两个方法可以让 AppWidget 的 layout 刷新来实现重复动画的效果。再新建一个 layout 文件 <code>widget_image.xml</code>:</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/widget_layout_iv"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layoutAnimation</span>=<span class="string">"@anim/widget_fade_in"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/widget_iv"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"100.0dip"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"100.0dip"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>这里面的内容保持和 <code>widget_layout.xml</code> 中要实现动画的 layout 一致就行了。<br>最后需要在 AppWidgetProvider 中使用 removeAllViews 和 addView 方法：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleWidget</span> <span class="keyword">extends</span> <span class="title class_">AppWidgetProvider</span> {</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onUpdate</span><span class="params">(Context context, AppWidgetManager appWidgetManager, <span class="type">int</span>[] appWidgetIds)</span> {</span><br><span class="line">		updateWidget(context, appWidgetManager, appWidgetIds);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">updateWidget</span><span class="params">(Context context, AppWidgetManager appWidgetManager, <span class="type">int</span>[] appWidgetIds)</span> {</span><br><span class="line">		<span class="type">String</span> <span class="variable">pkgName</span> <span class="operator">=</span> context.getPackageName();</span><br><span class="line">		<span class="type">RemoteViews</span> <span class="variable">views</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteViews</span>(pkgName, R.layout.widget_layout);</span><br><span class="line">		<span class="type">RemoteViews</span> <span class="variable">subView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteViews</span>(pkgName, R.layout.widget_image);</span><br><span class="line">		views.removeAllViews(R.id.widget_layout);</span><br><span class="line">		views.addView(R.id.widget_layout, subView);</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>最后就是在 Activity 或者 Service 中，在需要更新的时候调用 <code>updateWidget</code> 就有动画效果了。</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>animation</tag>
      </tags>
  </entry>
  <entry>
    <title>Error: The output jar is empty. Did you specify the proper &#39;-keep&#39; options</title>
    <url>/2015/11/19/proguard-shrink-error/</url>
    <content><![CDATA[<p>最近在写个小工具混淆 Android lib 包，用到了 proguard 命令行的方式，结果出现 <code>Error: The output jar is empty. Did you specify the proper '-keep' options</code> 的错误。” 出现这个错误是因为我这里混淆的 lib 包里面所有方法都没有调用，所以输入类全被压缩移除，导致没有输出。解决这个问题很简单，只需要加上 <code>-dontshrink</code> 就可以了。</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>proguard</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 MediaSessionCompat 来实现 Media Button 的监听</title>
    <url>/2016/01/05/media-session-compat/</url>
    <content><![CDATA[<p>在 API21 之前，如果想实现线控，则只需要使用:</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">AudioManager.reregisterMediaButtonEventReceiver(ComponentName eventReceiver)</span><br></pre></td></tr></tbody></table></figure>
<p>即可，但是最近更新 SDK 之后发现这个 API 已经废弃掉了，推荐使用 MediaSession 来代替。</p>
<span id="more"></span>
<p>API21 之前的实现可以参考<a href="http://blog.csdn.net/qinjuning/article/details/6938436">这篇文章</a>，但是 MediaSession 是在新的 api 中加入的，我们可以使用 android.support.v4.media.session.MediaSessionCompat：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a new session.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> context The context.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tag A short name for debugging purposes.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mediaButtonEventReceiver The component name for your receiver.</span></span><br><span class="line"><span class="comment"> *            If null, this will attempt to find an appropriate</span></span><br><span class="line"><span class="comment"> *            {<span class="doctag">@link</span> BroadcastReceiver} that handles</span></span><br><span class="line"><span class="comment"> *            {<span class="doctag">@link</span> Intent#ACTION_MEDIA_BUTTON} from your manifest.</span></span><br><span class="line"><span class="comment"> *            A receiver is required to support platform versions earlier</span></span><br><span class="line"><span class="comment"> *            than {<span class="doctag">@link</span> android.os.Build.VERSION_CODES#LOLLIPOP}.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mbrIntent The PendingIntent for your receiver component that</span></span><br><span class="line"><span class="comment"> *            handles media button events. This is optional and will be used</span></span><br><span class="line"><span class="comment"> *            on {<span class="doctag">@link</span> android.os.Build.VERSION_CODES#JELLY_BEAN_MR2} and</span></span><br><span class="line"><span class="comment"> *            later instead of the component name.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MediaSessionCompat</span><span class="params">(Context context, String tag, ComponentName mediaButtonEventReceiver,</span></span><br><span class="line"><span class="params">            PendingIntent mbrIntent)</span> {</span><br></pre></td></tr></tbody></table></figure>
<p>MediaSessionCompat 的构造函数一共有四个参数，我们这里简单实现 Media Button 的监听，只需要 context 和 mediaButtonEventReceiver 即可，tag 用于调试，mbrIntent 设置为 null 即可。首先和 API21 之前一样实现了一个 MediaButtonReceiver：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MediaButtonReceiver</span> <span class="keyword">extends</span> <span class="title class_">BroadcastReceiver</span> {</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context context, Intent intent)</span> {</span><br><span class="line">		<span class="keyword">if</span> (!Intent.ACTION_MEDIA_BUTTON.equals(intent.getAction())) {</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line">		<span class="type">KeyEvent</span> <span class="variable">event</span> <span class="operator">=</span> intent.getParcelableExtra(Intent.EXTRA_KEY_EVENT);</span><br><span class="line">		<span class="keyword">if</span> (event == <span class="literal">null</span> || event.getAction() != KeyEvent.ACTION_UP) {</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line">		<span class="comment">// do something</span></span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>接下来我们要做的就是 new 一个 MediaSessionCompat：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PlayerService</span> <span class="keyword">extends</span> <span class="title class_">Service</span> {</span><br><span class="line">	<span class="keyword">private</span> MediaSessionCompat mMediaSession;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> {</span><br><span class="line">		<span class="built_in">super</span>.onCreate();</span><br><span class="line"></span><br><span class="line">		<span class="type">ComponentName</span> <span class="variable">mbr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComponentName</span>(getPackageName(), MediaButtonReceiver.class.getName());</span><br><span class="line">		mMediaSession = <span class="keyword">new</span> <span class="title class_">MediaSessionCompat</span>(<span class="built_in">this</span>, <span class="string">"mbr"</span>, mbr, <span class="literal">null</span>);</span><br><span class="line">		<span class="comment">/* set flags to handle media buttons */</span></span><br><span class="line">		mMediaSession.setFlags(MediaSessionCompat.FLAG_HANDLES_MEDIA_BUTTONS | </span><br><span class="line">			MediaSessionCompat.FLAG_HANDLES_TRANSPORT_CONTROLS);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* this is need after Lolipop */</span></span><br><span class="line">		mMediaSession.setCallback(<span class="keyword">new</span> <span class="title class_">MediaSessionCompat</span>.Callback() {</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onMediaButtonEvent</span><span class="params">(Intent intent)</span> {</span><br><span class="line">				<span class="keyword">if</span> (!Intent.ACTION_MEDIA_BUTTON.equals(intent.getAction())) {</span><br><span class="line">					<span class="keyword">return</span> <span class="built_in">super</span>.onMediaButtonEvent(intent);</span><br><span class="line">				}</span><br><span class="line"></span><br><span class="line">				<span class="type">KeyEvent</span> <span class="variable">event</span> <span class="operator">=</span> intent.getParcelableExtra(Intent.EXTRA_KEY_EVENT);</span><br><span class="line">				<span class="keyword">if</span> (event == <span class="literal">null</span> || event.getAction() != KeyEvent.ACTION_UP) {</span><br><span class="line">					<span class="keyword">return</span> <span class="built_in">super</span>.onMediaButtonEvent(intent);</span><br><span class="line">				}</span><br><span class="line"></span><br><span class="line">				<span class="comment">// do something</span></span><br><span class="line"></span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			}</span><br><span class="line">		});</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* to make sure the media session is active */</span></span><br><span class="line">		<span class="keyword">if</span> (!mMediaSession.isActive()) {</span><br><span class="line">			mMediaSession.setActive(<span class="literal">true</span>);</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> {</span><br><span class="line">		mMediaSession.release();</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>其他的和 API21 之前一样，需要在 manifest 中注册这个 MediaButtonReceiver</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;receiver android:name=<span class="string">"com.coolerfall.managers.receivers.MediaButtonReceiver"</span>&gt;</span><br><span class="line">    &lt;intent-filter&gt;</span><br><span class="line">        &lt;action android:name=<span class="string">"android.intent.action.MEDIA_BUTTON"</span>/&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">&lt;/receiver&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>这样就可以实现和 API21 之前的监听效果了。</p>
<p>PS: API21 之前 MediaButtonReceiver 是必须的；API21 之后 MediaSessionCompat.setCallback 是必须的，因为 MediaSessionCompatAPI21 之后通过 callback 来处理 media button。</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>media</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 UrlQuerySanitizer 来处理 url</title>
    <url>/2016/03/29/url-query-sanitizer/</url>
    <content><![CDATA[<p>网上对于 UrlQuerySanitizer 的资料比较少，这个是 Android 提供的一个用来处理 url 的 API。由于项目的需要，需要对 url 的 query 参数进行排序，因此需要解析 url 并处理 query 参数。</p>
<span id="more"></span>
<p>最初的方法是使用 Uri：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parseUrl</span><span class="params">(String url)</span> {</span><br><span class="line">	<span class="type">Uri</span> <span class="variable">uri</span> <span class="operator">=</span> Uri.parse(url);</span><br><span class="line">	Set&lt;String&gt; query = uri.getQueryParameterNames();</span><br><span class="line">	<span class="keyword">if</span> (!query.isEmpty()) {</span><br><span class="line">		TreeSet&lt;String&gt; treeQuery = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(query);</span><br><span class="line">		<span class="keyword">for</span> (String key : treeQuery) {</span><br><span class="line">			<span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> uri.getQueryParameter(key);</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>通过这样的方式就可以解析 url，并获取到各个 query 参数。但后来发现 Uri 不能处理一些特殊字符，比如<code>#</code>，Uri 会截断<code>#</code>以后的内容，这样就不能满足开发需求。经过各种 google，最后发现了一个 UrlQuerySanitizer 的 API：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parseUrl</span><span class="params">(String url)</span> {</span><br><span class="line">	<span class="type">UrlQuerySanitizer</span> <span class="variable">sanitizer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlQuerySanitizer</span>();</span><br><span class="line">	sanitizer.setAllowUnregisteredParamaters(<span class="literal">true</span>);</span><br><span class="line">	sanitizer.setUnregisteredParameterValueSanitizer(UrlQuerySanitizer.getAllButNulLegal());</span><br><span class="line">	sanitizer.parseUrl(url);</span><br><span class="line">	<span class="keyword">final</span> Set&lt;String&gt; query = sanitizer.getParameterSet();</span><br><span class="line">	<span class="keyword">if</span> (!query.isEmpty()) {</span><br><span class="line">		TreeSet&lt;String&gt; treeQuery = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(query);</span><br><span class="line">		<span class="keyword">for</span> (String key : treeQuery) {</span><br><span class="line">			<span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> sanitizer.getValue(key);</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>首先要使用 <code>setAllowUnregisteredParamaters</code> 让其支持特殊字符，然后使用 <code>setUnregisteredParameterValueSanitizer</code> 来设置支持哪些特殊字符，UrlQuerySanitizer 提供了集中默认的 ValueSanitizer：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return a value sanitizer that does not allow any special characters,</span></span><br><span class="line"><span class="comment"> * and also does not allow script URLs.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a value sanitizer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ValueSanitizer <span class="title function_">getAllIllegal</span><span class="params">()</span> {</span><br><span class="line">	<span class="keyword">return</span> sAllIllegal;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return a value sanitizer that allows everything except Nul ('\0')</span></span><br><span class="line"><span class="comment"> * characters. Script URLs are allowed.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a value sanitizer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ValueSanitizer <span class="title function_">getAllButNulLegal</span><span class="params">()</span> {</span><br><span class="line">	<span class="keyword">return</span> sAllButNulLegal;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return a value sanitizer that allows everything except Nul ('\0')</span></span><br><span class="line"><span class="comment"> * characters, space (' '), and other whitespace characters.</span></span><br><span class="line"><span class="comment"> * Script URLs are allowed.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a value sanitizer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ValueSanitizer <span class="title function_">getAllButWhitespaceLegal</span><span class="params">()</span> {</span><br><span class="line">	<span class="keyword">return</span> sAllButWhitespaceLegal;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return a value sanitizer that allows all the characters used by</span></span><br><span class="line"><span class="comment"> * encoded URLs. Does not allow script URLs.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a value sanitizer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ValueSanitizer <span class="title function_">getUrlLegal</span><span class="params">()</span> {</span><br><span class="line">	<span class="keyword">return</span> sURLLegal;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return a value sanitizer that allows all the characters used by</span></span><br><span class="line"><span class="comment"> * encoded URLs and allows spaces, which are not technically legal</span></span><br><span class="line"><span class="comment"> * in encoded URLs, but commonly appear anyway.</span></span><br><span class="line"><span class="comment"> * Does not allow script URLs.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a value sanitizer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ValueSanitizer <span class="title function_">getUrlAndSpaceLegal</span><span class="params">()</span> {</span><br><span class="line">	<span class="keyword">return</span> sUrlAndSpaceLegal;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return a value sanitizer that does not allow any special characters</span></span><br><span class="line"><span class="comment"> * except ampersand ('&amp;'). Does not allow script URLs.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a value sanitizer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ValueSanitizer <span class="title function_">getAmpLegal</span><span class="params">()</span> {</span><br><span class="line">	<span class="keyword">return</span> sAmpLegal;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return a value sanitizer that does not allow any special characters</span></span><br><span class="line"><span class="comment"> * except ampersand ('&amp;') and space (' '). Does not allow script URLs.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a value sanitizer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ValueSanitizer <span class="title function_">getAmpAndSpaceLegal</span><span class="params">()</span> {</span><br><span class="line">	<span class="keyword">return</span> sAmpAndSpaceLegal;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return a value sanitizer that does not allow any special characters</span></span><br><span class="line"><span class="comment"> * except space (' '). Does not allow script URLs.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a value sanitizer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ValueSanitizer <span class="title function_">getSpaceLegal</span><span class="params">()</span> {</span><br><span class="line">	<span class="keyword">return</span> sSpaceLegal;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return a value sanitizer that allows any special characters</span></span><br><span class="line"><span class="comment"> * except angle brackets ('&lt;' and '&gt;') and Nul ('\0').</span></span><br><span class="line"><span class="comment"> * Allows script URLs.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a value sanitizer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ValueSanitizer <span class="title function_">getAllButNulAndAngleBracketsLegal</span><span class="params">()</span> {</span><br><span class="line">	<span class="keyword">return</span> sAllButNulAndAngleBracketsLegal;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>每种 ValueSanitizer 都对应过滤哪些字符，被过滤掉的特殊字符会被替换成_或者空格。<br>如果默认的 ValueSanitizer 不能满足开发需求，还可以自己构造 ValueSanitizer：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parseUrl</span><span class="params">(String url)</span> {</span><br><span class="line">	.....</span><br><span class="line">	<span class="type">ValueSanitizer</span> <span class="variable">sanitizer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlQuerySanitizer</span>.IllegalCharacterValueSanitizer(UrlQuerySanitizer.IllegalCharacterValueSanitizer.ALL_OK);</span><br><span class="line">	setUnregisteredParameterValueSanitizer(sanitizer);</span><br><span class="line">	.....</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>UrlQuerySanitizer 也可以通过 key 来获取相应的 value，比如给一个 url：<a href="http://coolerfall.com/?name=vincent%EF%BC%9A">http://coolerfall.com?name=vincent：</a></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parseUrl</span><span class="params">(String url)</span> {</span><br><span class="line">	<span class="type">UrlQuerySanitizer</span> <span class="variable">sanitizer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlQuerySanitizer</span>();</span><br><span class="line">	sanitizer.setAllowUnregisteredParamaters(<span class="literal">true</span>);</span><br><span class="line">	sanitizer.setUnregisteredParameterValueSanitizer(UrlQuerySanitizer.getAllButNulLegal());</span><br><span class="line">	sanitizer.parseUrl(url);</span><br><span class="line">	<span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sanitizer.getValue(<span class="string">"name"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>UrlQuerySanitizer 还可以只解析 query 参数，比如：name=vincent&amp;article=first：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parseUrl</span><span class="params">(String query)</span> {</span><br><span class="line">	<span class="type">UrlQuerySanitizer</span> <span class="variable">sanitizer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlQuerySanitizer</span>();</span><br><span class="line">	sanitizer.setAllowUnregisteredParamaters(<span class="literal">true</span>);</span><br><span class="line">	sanitizer.setUnregisteredParameterValueSanitizer(UrlQuerySanitizer.getAllButNulLegal());</span><br><span class="line">	sanitizer.parseQuery(query);</span><br><span class="line">	<span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sanitizer.getValue(<span class="string">"name"</span>);</span><br><span class="line">	.....</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>以上就是 UrlQuerySanitizer 大致用法，用来解析处理 url 非常的方便。</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>url</tag>
        <tag>sanitizer</tag>
      </tags>
  </entry>
  <entry>
    <title>从 Jekyll 迁移到 Hexo</title>
    <url>/2018/10/16/jekyll-to-hexo/</url>
    <content><![CDATA[<p>自上次更新博客以来已超过 2 年，其一是工作太忙，其二主要是因为自己太懒，不过这其间学习非常多的新知识。最近新增了几个项目之后，发现已经太久没更新博客，同时感觉 jekyll 用起来还是不够舒服，经过一番 google，找到 <a href="https://github.com/hexojs/hexo">hexo</a>，hexo 原理和 jekyll 差不多，但是代码块高亮直接使用的 markdown 的语法，无需像 jekyll 那样的高亮语法，又找了个简洁的主题 <a href="https://github.com/theme-next/hexo-theme-next">hexo-theme-next</a>, 于是折腾起 hexo 来，至于为什么不去折腾 hugo，主要是因为找了半天主题没找到满意的，遂放弃了。hexo 的使用可以参见<a href="https://hexo.io/zh-cn/docs/">官网</a>的步骤，非常的详细，大致记录一下迁移过程。</p>
<span id="more"></span>
<h4 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install -g hexo-cli</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo init coolerfall.github.io</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> coolerfall.github.io &amp;&amp; npm install</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>完全配置文件可参考官网的文档，一般来说需要改下作者信息，描述等等，默认是使用 landscape 主题，我这里使用的是 <a href="https://github.com/theme-next/hexo-theme-next">hexo-theme-next</a>，参见文档将代码加入 hexo 目录下的 <code>themes</code> 下，修改根目录<code>_config.yml</code> 中的 <code>theme</code> 为 <code>next</code> 即可，next 主题完全配置参见官网文档，需要注意的是 next 默认没有生成 <code>tags</code> 和 <code>categories</code> 的 index 页面，需要自己手动生成：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo new page tags</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo new page categories</span></span><br></pre></td></tr></tbody></table></figure>
<p>生成的文件在<code>_posts</code> 下的 <code>tags</code> 和 <code>categories</code> 中，将 <code>type</code> 分别改为 <code>tags</code> 和 <code>categories</code> 即可，后面自动生成。配置好后，可以简单运行下看看效果：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo serve</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h4><p>由于之前用的是 Jekyll，post 文章的格式为<code>:year-:month-:day-:title.md</code>，因此 hexo 也采用同样的格式即可，只需将 <code>new_post_name</code> 改为这种格式。将 Jekyll 目录下的<code>_posts</code> 中文章全部 copy 到 hexo 目录下的 <code>source/_posts</code> 中，由于文章是 Markdown 格式，所以基本没有太大改动，我之前使用了 Jekyll 的一个高亮插件，写法与 Markdown 有所区别，只需把这些写法改为 Markdown 的写法即可，然后运行可看到效果。关于文章长度太长，需显示<code>阅读全文</code>，有两种方式：</p>
<ul>
<li>自动截取<br>需修改 <code>next</code> 主题配置文件中 <code>auto_excerpt</code> 为 true，以及截取开始长度（但这种方式不推荐）。</li>
<li>手动添加<br>只需要在每篇 post 中需要截取的地方加入 <code>&lt;!-- more --&gt;</code> 即可。</li>
</ul>
<h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>最后部署至 github，hexo 有多种部署方式，可部署至 <code>Git</code>，<code>Heroku</code>，<code>Netlify</code> 等等，都有相应部署工具。这里使用 <code>hexo-deployer-git</code>，需在根目录下加入</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-deployer-git --save</span></span><br></pre></td></tr></tbody></table></figure>
<p>在根目录配置文件中的 <code>deploy</code> 中加入相关配置，然后执行部署</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo g -d</span></span><br></pre></td></tr></tbody></table></figure>
<p>注意，Hexo 与 Jekyll 有区别，github 默认在服务器上生成并部署，而 Hexo 需要我们在本地生成好静态文件后再上传，因此，需要分两个分支来存放代码，master 分支放静态文件，另起一个分支（如：source）来存放源码，这里就需要在 deploy 中加入这两个分支的操作：</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">git@github.com:you/your.github.io.git</span></span><br><span class="line">    <span class="attr">branch:</span> [<span class="string">master</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">git@github.com:you/anothergit.git</span></span><br><span class="line">    <span class="attr">branch:</span> [<span class="string">master</span>]</span><br><span class="line">    <span class="attr">extend_dirs:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">ignore_hidden:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">ignore_pattern:</span></span><br><span class="line">        <span class="attr">public:</span> <span class="string">.</span></span><br></pre></td></tr></tbody></table></figure>
<p>至此，博客从 Jekll 成功迁移到了 Hexo。</p>
]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>jekyll</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Linux 下进行开发工作（一）</title>
    <url>/2018/10/17/work-on-linux-part-one/</url>
    <content><![CDATA[<p>之前在做嵌入式开发时，经常会使用到 Linux，但都是使用的虚拟机来安装 Linux，然后在 Windows 上通过 ssh 连接，使用的命令行方式，并未使用 Linux 当桌面。后来做 Android 开发后，基本是在 Windows 下进行开发工作的，部分 Linux 下的命令工具可以通过 <a href="http://www.mingw.org/">mingw</a> 来使用，但终究还是不如直接在 Linux 下来得方便。年中的时候，入手了一台新本，开始折腾起来 Linux，选择的是 <a href="https://manjaro.org/get-manjaro/">Manjaro</a> 发行版的 Mate Desktop，几个桌面版本尝试后，最终选择了 Mate。Manjaro 是 <a href="https://www.archlinux.org/">Arch Linux</a> 衍生版，但是简化了安装过程，几乎是一键安装，省去了 Arch Linux 的繁琐配置，但却拥有 Arch Linux 同样丰富的软件库。折腾过程中遇到不少问题，都通过各种 google 解决了，如果没准备好用 Linux 作为日常开发桌面，千万不要尝试 : )。</p>
<span id="more"></span>


<h4 id="安装Manjaro"><a href="#安装Manjaro" class="headerlink" title="安装Manjaro"></a>安装 Manjaro</h4><p>在 <a href="https://manjaro.org/get-manjaro/">Manjaro 官网</a>找自己比较喜欢的桌面下载镜像文件，准备一个空的 U 盘（后面会被格式化），Windows 下使用 <a href="http://rufus.ie/">rufus</a> 来创建 USB 启动盘。将镜像文件烧写到 U 盘（注意：rufus 中需选择 DD 模式），电脑上选择 U 盘启动，就会进入到 Manjaro 的安装界面，选择对应的语言，驱动等等，然后启动可以进入到 Manjaro 系统进行体验，直接进入安装步骤，都是些个性化设置。在分区的时候需要注意，选择手动分区，如果想要安装双系统，需要找到 Windows 的 <code>efi</code> 分区（一般是一个 100M 的 FAT32 分区），然后挂载 <code>/boot/efi</code>（不要选择格式化），其他分区按需分配即可。我的分区结构：</p>
<ul>
<li><code>/</code> 分区（必须有此分区） — 50G</li>
<li><code>/boot</code> 分区 — 512M</li>
<li><code>/var</code> 分区（pacman 会缓存安装包） — 30G</li>
<li><code>/swap</code> 分区 — 4G</li>
<li><code>/home</code> 分区 — 余下的所有空间<br>最后到安装等待界面，待安装完成重新启动应该会有个 GRUB bootloader 了。但我的电脑死活没看到 grub，最后看到<a href="https://wiki.manjaro.org/index.php?title=UEFI_-_Install_Guide">官网安装教程</a>才知道，有些电脑装双系统后，GRUB 会显示不出来，解决方案就是安装 <a href="http://www.rodsbooks.com/refind/index.html">rEFInd</a>，这步操作需要重启电脑，通过 USB 启动，这里会显示出刚刚安装的系统（不要选择安装在 U 盘的那个系统，其实就是通过 U 盘来做引导），选择进入，然后在 Terminal 中安装 rEFInd：<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo pacman -S refind-efi</span></span><br></pre></td></tr></tbody></table></figure>
安装完后重启，这次就看到 rEFInd 界面了，在这里可以选择启动 Windows 或者 Manjaro。</li>
</ul>
<h4 id="更新系统"><a href="#更新系统" class="headerlink" title="更新系统"></a>更新系统</h4><p>首次进入系统，第一件事情就是更新系统，首先我们需要做的是设置国内的镜像源，这样下载的速度会快些。</p>
<ul>
<li>配置镜像源  <figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">$ sudo pacman-mirrors -i -c China -m rank</span><br></pre></td></tr></tbody></table></figure>
  这条命令会获取中国的镜像源并进行排序，最后生成一个镜像列表，然后选择需要的源地址。</li>
<li>设置 archlinux 源<br>  打开 <code>/etc/pacman.conf</code>，并添加一下内容  <figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">SigLevel = Optional TrustedOnly</span><br><span class="line">Server = http://repo.archlinuxcn.org/$arch</span><br></pre></td></tr></tbody></table></figure>
  然后根据上面的配置，生成一个新的 <code>mirrolist</code>：  <figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo pacman-mirrors -g</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>更新<br>  镜像里面设置完成后，就进行系统的全面升级:  <figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo pacman -Syyu</span></span><br></pre></td></tr></tbody></table></figure>
  由于使用了 archlinuxcn 的镜像，还需要安装 <code>archlinuxcn-keyring</code>，才能安装镜像上的软件：  <figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo pacman -S archlinuxcn-keyring</span></span><br></pre></td></tr></tbody></table></figure>
平时使用中还会安装一些非官方软件（也就是 AUR 包），这需要安装一个额外的工具，一般安装的 <code>yaourt</code>，当然还有其他很多 <a href="https://wiki.archlinux.org/index.php/AUR_helpers">AUR 工具</a>，可以根据喜好自行选择。如果不习惯使用命令行安装，也可以使用 pacman 的 GUI，在首选项中可以设置打开 AUR，然后搜索时候选择 AUR 即可安装相应的 AUR 包。</li>
</ul>
]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Linux 下进行开发工作（二）</title>
    <url>/2018/10/18/work-on-linux-part-two/</url>
    <content><![CDATA[<a href="/2018/10/17/work-on-linux-part-one/" title="在Linux下进行开发工作（一）">在 Linux 下进行开发工作（一）</a>中记录了Manjaro的安装过程以及源设置等等，这一篇主要记录下常用软件的安装等等。Manjaro固然非常的方便，各种开发工具一条命令就可以安装好，但有些Windows常用软件Linux上也没有，有的可以使用Linux上的替代品，不过还是有少许软件不可避免的要使用（如微信，QQ等），这会给我们的工作带来了不少的麻烦，刚从Windows转Linux会有诸多的不习惯，不过都还好，我们总是有各种各样的办法来折腾Linux来适合我们用来做日常的开发桌面。还是那句话，如果没准备好用Linux作为日常开发桌面，千万不要尝试 : )。
<span id="more"></span>


<h4 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h4><p>毕竟日常还是使用中文，中文输入法是必须得安装的，Linux 下的输入框架常用的有 <code>fcitx</code> 和 <code>ibus</code>，我选用的是 <a href="https://wiki.archlinux.org/index.php/Fcitx">fcitx</a>：</p>
<ul>
<li>安装 fcitx  <figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo pacman -S fcitx fcitx-configtool</span> </span><br></pre></td></tr></tbody></table></figure></li>
<li>安装输入法引擎<br>  fcitx 默认自带了中文输入引擎，其他选择就比较多了，（比如国内常用的 sougou 拼音），我选择的是 <a href="https://wiki.archlinux.org/index.php/Rime_IME">Rime</a>，配上一个 <code>fcitx-skin-material</code> 用来非常不错。不过 Rime 默认是繁体输入，如果要改为默认简体，需新增一个自定义配置文件 <code>$HOME/.config/fcitx/rime/   luna_pinyin.custom.yaml</code>：  <figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">patch:</span></span><br><span class="line"><span class="attr">"menu/page_size":</span> <span class="number">9</span></span><br><span class="line"><span class="attr">switches:</span>                   <span class="comment"># 注意缩进</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ascii_mode</span></span><br><span class="line">    <span class="attr">reset:</span> <span class="number">0</span>                <span class="comment"># reset 0 的作用是当从其他输入法切换到本输入法重设为指定状态</span></span><br><span class="line">    <span class="attr">states:</span> [ <span class="string">中文</span>, <span class="string">西文</span> ]   <span class="comment"># 选择输入方案后通常需要立即输入中文，故重设 ascii_mode = 0</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">full_shape</span></span><br><span class="line">    <span class="attr">states:</span> [ <span class="string">半角</span>, <span class="string">全角</span> ]   <span class="comment"># 而全／半角则可沿用之前方案的用法。</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">simplification</span></span><br><span class="line">    <span class="attr">reset:</span> <span class="number">1</span>                <span class="comment"># 增加这一行：默认启用「繁→簡」转换。</span></span><br><span class="line">    <span class="attr">states:</span> [ <span class="string">漢字</span>, <span class="string">汉字</span> ]</span><br></pre></td></tr></tbody></table></figure>
  这里面还包括候选字数，全 / 半角等配置。</li>
<li>安装输入法模组<br>  要在桌面上使用（包括浏览器，应用等等），还需要安装输入法模组，尽可能的安装完全：  <figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo pacman -S fcitx-gtk2 fcitx-gtk3 fcitx-qt4 fcitx-qt5</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>添加配置<br>  在 <code>$HOME/.xprofile</code> 中添加如下配置  <figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">export GTK_IM_MODULE=fcitx</span><br><span class="line">export QT_IM_MODULE=fcitx</span><br><span class="line">export XMODIFIERS=@im=fcitx</span><br></pre></td></tr></tbody></table></figure>
最后重启电脑，既可以使用输入法了，关于快捷键和字体大小，可在 fcitx config GUI 里面配置。至此，输入法基本上就搞定了。</li>
</ul>
<h4 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h4><p>日常中微信使用的频率比较高，不可避免的要安装，一般有几种解决方案：</p>
<ul>
<li><a href="https://github.com/geeeeeeeeek/electronic-wechat">electronic-wechat</a><br>使用的是微信 web 版，然后用 electronic 封装的，作者似乎以及停更了，安装后体验了下，弃了。</li>
<li><a href="https://github.com/trazyn/weweChat">weweChat</a><br>界面做得比较好看，和 electronic-wechat 使用同样的原理，没体验过。</li>
<li><a href="https://aur.archlinux.org/packages/deepin-wechat/">deepin-wechat</a><br>使用 deepin 自己定制的 <a href="https://www.winehq.org/">wine</a>，安装后，不知道为什么我电脑上问题挺多（比如不能贴图），遂弃之。</li>
</ul>
<p>体验过这么多之后，最后还是决定使用 wine 版本的，不过是自己进行配置。在 github 上找到一个专门针对国内软件的 wine 脚本 <a href="https://github.com/hillwoodroc/winetricks-zh">winetricks-zh</a>，会自动安装一些依赖，最后尝试下来这个版本体验最好，除了不能截图（当然有替代方案，<a href="http://shutter-project.org/">shutter</a>），其他基本和 Windows 上没太大差别。</p>
<ul>
<li>安装 wine 及相关依赖  <figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo pacman -S wine wine-mono wine_gecko</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>使用 winetricks-zh 安装微信<br>  作者有较长时间未更新了，目前微信官网的微信已更新，会导致文件校验失败，不过只需要把脚本中的 hash 值改一下即可（文件为在 <code>winetricks-zh/verb/wechat.verb</code>），下载官网最新安装包，然后计算 sha256:  <figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sha256sum</span> WeChatSetup.exe</span></span><br></pre></td></tr></tbody></table></figure>
  最后将 hash 值替换为此 hash 值即可，后续就会自动安装一些依赖。</li>
<li>配置<br>  安装完后可以直接打开使用，不过由于屏幕适配以及字体问题，可能会导致乱码，字体小的问题，因此我们还需要修改些配置才能正常使用。<ul>
<li>字体安<br>  需要将<code>微软雅黑</code>和<code>新宋</code>字体复制到 <code>$HOME/.local/share/fonts</code> 下，并刷新字体缓存：  <figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">fc-cache -fv</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>修改 <code>$HOME/.wine/system.reg</code><br>  找到 <code>LogPixels</code>，将值修改为 80（根据自己的屏幕调整）</li>
<li>修改 <code>$HOME/.wine/driver_c/windows/win.ini</code><br>  在文件尾新增：  <figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">[Desktop]</span><br><span class="line">menufontsize=13</span><br><span class="line">messagefontsize=13</span><br><span class="line">statusfontsize=13</span><br><span class="line">IconTitleSize=13</span><br></pre></td></tr></tbody></table></figure></li>
<li>新增 <code>$HOME/.wine/zh.reg</code><br>  在文件中添加以下参数：  <figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">REGEDIT4</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\FontSubstitutes]</span><br><span class="line"></span><br><span class="line">"Arial"="simsun"</span><br><span class="line">"Arial CE,238"="simsun"</span><br><span class="line">"Arial CYR,204"="simsun"</span><br><span class="line">"Arial Greek,161"="simsun"</span><br><span class="line">"Arial TUR,162"="simsun"</span><br><span class="line">"Courier New"="simsun"</span><br><span class="line">"Courier New CE,238"="simsun"</span><br><span class="line">"Courier New CYR,204"="simsun"</span><br><span class="line">"Courier New Greek,161"="simsun"</span><br><span class="line">"Courier New TUR,162"="simsun"</span><br><span class="line">"FixedSys"="simsun"</span><br><span class="line">"Helv"="simsun"</span><br><span class="line">"Helvetica"="simsun"</span><br><span class="line">"MS Sans Serif"="simsun"</span><br><span class="line">"MS Shell Dlg"="simsun"</span><br><span class="line">"MS Shell Dlg 2"="simsun"</span><br><span class="line">"System"="simsun"</span><br><span class="line">"Tahoma"="simsun"</span><br><span class="line">"Times"="simsun"</span><br><span class="line">"Times New Roman CE,238"="simsun"</span><br><span class="line">"Times New Roman CYR,204"="simsun"</span><br><span class="line">"Times New Roman Greek,161"="simsun"</span><br><span class="line">"Times New Roman TUR,162"="simsun"</span><br><span class="line">"Tms Rmn"="simsun"</span><br></pre></td></tr></tbody></table></figure>
重新打开微信，应该就没什么问题了。关于快捷键问题，Linux 下无法直接使用微信中的快捷键（其实是没有焦点，如果打开微信的设置页面，再使用打开快捷键，发现还是有用的，当然这非常不方便），最后找了个办法，在系统快捷键中，添加一个快捷键来打开微信即可，命令使用 wine 来打开：<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">env WINEPREFIX="/home/cooler/.wine" wine "/home/cooler/.wine/drive_c/Program Files/Tencent/WeChat/WeChat.exe"</span><br></pre></td></tr></tbody></table></figure>
这样就可以使用快捷键打开微信，不过不能关闭，只能使用 <code>Esc</code> 来关闭，不过这点小问题不影响使用。至于其他软件，可以参考 <code>winetricks-zh</code>。</li>
</ul>
</li>
</ul>
<h4 id="开发软件"><a href="#开发软件" class="headerlink" title="开发软件"></a>开发软件</h4><p>一般开发软件都有 Linux 版本的，除非是系统特有的软件（如 Windows 的 visual studio 等等），这种就没办法了，只能放弃使用 Linux 了。</p>
<h4 id="截图软件"><a href="#截图软件" class="headerlink" title="截图软件"></a>截图软件</h4><p>Linux 下首推 <a href="http://shutter-project.org/">shutter</a>，功能已经非常完善了，在系统快捷键中新增一个，命令如下：</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">shutter -s</span><br></pre></td></tr></tbody></table></figure>
<p>然后配合微信，QQ 等使用，直接粘贴到对话框中即可。</p>
<h4 id="办公软件"><a href="#办公软件" class="headerlink" title="办公软件"></a>办公软件</h4><p>Windows 下办公软件莫过于 Office 全家桶，但 Linux 下就没这么好的办公软件了，替代品为 <a href="https://www.wps.com/">WPS Office</a> 和 <a href="https://www.libreoffice.org/">Libre Office</a>，wps 用起来比较接近 MS Office，这个看个人喜好选择。</p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul>
<li>制图软件 <a href="https://www.gimp.org/">GIMP</a></li>
<li> 思维导图 <a href="https://www.xmind.net/">XMind</a></li>
<li>PDF 阅读使用自带的 <code>Atril Document Viewer</code> 就可以了</li>
<li>视频播放软件 <a href="https://www.videolan.org/vlc/">VLC</a>。</li>
<li>邮件客户端 <a href="https://wiki.gnome.org/Apps/Evolution">Evolution</a></li>
<li>……</li>
</ul>
]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Linux 下进行开发工作（三）</title>
    <url>/2018/10/22/work-on-linux-part-three/</url>
    <content><![CDATA[<a href="/2018/10/18/work-on-linux-part-two/" title="在Linux下进行开发工作（二）">在 Linux 下进行开发工作（二）</a>中记录了Manjaro日常使用中的一些常用软件和配置。基本可以在Linux进行开发了，不过由于屏幕适配以及字体的问题，会出现字体发虚，太小等等问题（4k屏以上一般来说不会有这些问题，但也不排除有个别情况），在Manjaro上的中文展示不是特别理想。这一篇主要记录下如何通过配置来调优字体显示，以适配自己的电脑。依然那句话，如果没准备好用Linux作为日常开发桌面，千万不要尝试 : )。
<span id="more"></span>


<h4 id="字体安装"><a href="#字体安装" class="headerlink" title="字体安装"></a>字体安装</h4><p>首先找一个能够对中文展示比较友好字体，几番寻找，找到了 <code>Noto Sans CJK</code>，也有人使用<code>文泉驿微米黑</code>，不过我试用了几天，还是觉得 <code>Noto</code> 系列看起来舒服些（这就看个人喜好了），这些字体都可以直接使用 <code>pacman</code> 安装：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo pacman -S noto-fonts noto-fonts-cjk noto-fonts-emoji wqy-microhei</span>  </span><br></pre></td></tr></tbody></table></figure>

<h4 id="配置字体"><a href="#配置字体" class="headerlink" title="配置字体"></a>配置字体</h4><p>在 <code>$HOME/.config/fontconfig/fonts.conf</code>（若没有则创建，若存在则覆盖）中添加如下配置：</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">fontconfig</span> <span class="keyword">SYSTEM</span> <span class="string">"fonts.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">fontconfig</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">match</span> <span class="attr">target</span>=<span class="string">"font"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">edit</span> <span class="attr">mode</span>=<span class="string">"assign"</span> <span class="attr">name</span>=<span class="string">"rgba"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">const</span>&gt;</span>rgb<span class="tag">&lt;/<span class="name">const</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">match</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">match</span> <span class="attr">target</span>=<span class="string">"font"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">edit</span> <span class="attr">mode</span>=<span class="string">"assign"</span> <span class="attr">name</span>=<span class="string">"hintstyle"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">const</span>&gt;</span>hintfull<span class="tag">&lt;/<span class="name">const</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">match</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">match</span> <span class="attr">target</span>=<span class="string">"font"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">edit</span> <span class="attr">mode</span>=<span class="string">"assign"</span> <span class="attr">name</span>=<span class="string">"antialias"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bool</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">match</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">match</span> <span class="attr">target</span>=<span class="string">"font"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">"lcdfilter"</span> <span class="attr">mode</span>=<span class="string">"assign"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">const</span>&gt;</span>lcddefault<span class="tag">&lt;/<span class="name">const</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">match</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Default font (no fc-match pattern) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">match</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">edit</span> <span class="attr">mode</span>=<span class="string">"prepend"</span> <span class="attr">name</span>=<span class="string">"family"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>Noto Sans Mono<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">match</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Default font for the zh_CN locale (no fc-match pattern) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">match</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span> <span class="attr">compare</span>=<span class="string">"contains"</span> <span class="attr">name</span>=<span class="string">"lang"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>zh_CN<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">edit</span> <span class="attr">mode</span>=<span class="string">"prepend"</span> <span class="attr">name</span>=<span class="string">"family"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>Noto Sans CJK SC<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">match</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Default sans-serif font --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">match</span> <span class="attr">target</span>=<span class="string">"pattern"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span> <span class="attr">qual</span>=<span class="string">"any"</span> <span class="attr">name</span>=<span class="string">"family"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>sans-serif<span class="tag">&lt;/<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">"family"</span> <span class="attr">mode</span>=<span class="string">"prepend"</span> <span class="attr">binding</span>=<span class="string">"same"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>Noto Sans<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">match</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Default serif fonts --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">match</span> <span class="attr">target</span>=<span class="string">"pattern"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span> <span class="attr">qual</span>=<span class="string">"any"</span> <span class="attr">name</span>=<span class="string">"family"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>serif<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">"family"</span> <span class="attr">mode</span>=<span class="string">"prepend"</span> <span class="attr">binding</span>=<span class="string">"same"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>Noto Serif<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">match</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Fallback fonts preference order --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">alias</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">family</span>&gt;</span>sans-serif<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">prefer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Sans<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Sans CJK SC<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Sans CJK TC<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Sans CJK JP<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Sans CJK KR<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Color Emoji<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Emoji<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">prefer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">alias</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">alias</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">family</span>&gt;</span>serif<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">prefer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Serif<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Serif CJK SC<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Serif CJK TC<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Serif CJK JP<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Serif CJK KR<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Color Emoji<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Emoji<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">prefer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">alias</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">alias</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">family</span>&gt;</span>monospace<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">prefer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Sans Mono<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Color Emoji<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Emoji<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">prefer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">alias</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">fontconfig</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>然后刷新字体缓存：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">fc-cache -fv</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="桌面字体设置"><a href="#桌面字体设置" class="headerlink" title="桌面字体设置"></a>桌面字体设置</h4><ul>
<li>在<code>菜单-&gt;首选项-&gt;外观-&gt;字体</code>中可以找到桌面相关字体配置，这里将这些字体（除等宽）都改为 <code>Noto Sans CJK SC Regular</code>，等宽字体改为 <code>Noto Sans Mono Regular</code>，字体大小设置为 10 左右，当然这些根据个人的电脑的效果调整。</li>
<li>在渲染中的细节中，关闭分辨率的自动检测，然后手动设置 DPI，我的电脑是 1080 的，故设置为 124 左右即可（其他屏幕可视效果调整）；微调设置为完全，其他的可以保持不动。</li>
</ul>
<h4 id="Qt应用字体设置"><a href="#Qt应用字体设置" class="headerlink" title="Qt应用字体设置"></a>Qt 应用字体设置</h4><ul>
<li>在<code>菜单-&gt;首选项-&gt;Qt5设置</code>中，将字体设置为 <code>Noto Sans CJK</code> 系列，根据效果调整大小。</li>
</ul>
<h4 id="浏览器字体设置"><a href="#浏览器字体设置" class="headerlink" title="浏览器字体设置"></a>浏览器字体设置</h4><p>浏览器页面的字体不受桌面字体设置的影响，桌面字体仅仅只能改变浏览器顶部选项卡以及菜单的字体大小，网页的字体还需要在浏览器中单独设置，这里以 chrome 为例，其他浏览器有类似设置。打开 chrome 设置页面，找到自定义字体，然后打开高级字体设置。浏览器的配置经过反复的尝试折腾，最终配置如下:<br><img data-src="/images/work-on-linux/font-config.png" alt="img"><br>以上为 <code>Default</code> 的配置，还需要配置下 <code>Simplified Han</code>，在 Script 中找到并修改成一样即可。如果有 emoji 显示不正常的问题，需检查<a href="#%E9%85%8D%E7%BD%AE%E5%AD%97%E4%BD%93">字体配置</a>是否正确，最后看下我的配置效果：<br><img data-src="/images/work-on-linux/font-config-effects1.png" alt="img"><br><img data-src="/images/work-on-linux/font-config-effects2.png" alt="img"><br>至于中文字体的效果，可根据自己的喜好选择 Noto 系列或者文泉驿字体，或者其他好看的中文字体。</p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>至于其他应用（如：IDEA，VS Code 等等），内部都有相应设置字体的地方，按自己的喜好设置字体及大小即可。</p>
]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>迁移评论系统 disqus 到 colina [待更新]</title>
    <url>/2019/02/19/migrate-disqus-to-colina/</url>
    <content><![CDATA[<p>自从迁移至 Hexo 后，就开始折腾评论系统，现目前有比较多的评论系统，如 <code>disqus</code>、<code>来必力</code>、<code>gitment</code> 等等， 经过一番比较，选择了老牌的评论系统 <code>disqus</code>，用起来还是非常不错的。但是用了一段时间，由于 disqus 需要科学上网才能使用，对于国内的用户不太友好，于是乎开始寻找其他的解决方案，找到了一些可以自己搭建的博客系统，发现多多少少不能满足需求，最终还是决定自己来造个轮子，方便自己管理评论系统，又可以保证数据不丢失。于是利用空闲时间，花了些时间折腾出了 <a href="https://hub.docker.com/r/coolerfall/colina">colina</a>，一款轻量、简单易用、支持 Markdown 的评论系统。</p>
<span id="more"></span>

<h4 id="部署Colina"><a href="#部署Colina" class="headerlink" title="部署Colina"></a>部署 Colina</h4><p>现目前 colina 的主要功能已开发完成，但还有不少细节未完善，暂时只提供了 <code>docker</code> 的部署方式，后续将逐步完善。</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker pull coolerfall/colina:latest</span></span><br></pre></td></tr></tbody></table></figure>
<p>使用 <code>docker compose</code> 来编排，方便启动 / 关闭：</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">colina:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">coolerfall/colina:latest</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">COLINA_URL=http://localhost:3000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">COLINA_DSN=postgres://colina:colinapass@db/colina?sslmode=disable</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">COLINA_DATA_DIR=/data</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3000</span><span class="string">:3000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/colina:/data</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:11-alpine</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_USER=colina</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_PASSWORD=colinapass</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_INITDB_ARGS="--encoding=UTF8"</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/colina/db:/var/lib/postgresql/data</span></span><br></pre></td></tr></tbody></table></figure>
<p>然后使用 <code>docker-compose</code> 命令启动起来即可：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker-compose -f docker-compose.yml up -d</span> </span><br></pre></td></tr></tbody></table></figure>
<p>在浏览器中打开 <code>http://localhost:3000</code>，显示管理登录页面即表示运行正常，根据提示配置后台相应参数。</p>
<h4 id="在hexo中接入Colina（以next主题为例）"><a href="#在hexo中接入Colina（以next主题为例）" class="headerlink" title="在hexo中接入Colina（以next主题为例）"></a>在 hexo 中接入 Colina（以 <a href="https://github.com/theme-next/hexo-theme-next">next</a> 主题为例）</h4><ul>
<li><p>在管理页面新增一个站点，获取到 <code>site id</code>。 –&gt;</p>
</li>
<li><p>在 <code>themes/next/layout/_third-party</code> 中新增 <code>colina.swig</code> 文件，并添加以下内容：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">  {% if theme.colina.enable %}</span><br><span class="line">  &lt;link rel="stylesheet" href="{{ theme.colina.url }}/embed/colina.min.css"&gt;</span><br><span class="line"></span><br><span class="line">  {% if theme.disqus.count %}</span><br><span class="line">    &lt;script type="text/javascript"&gt;</span><br><span class="line">      var colinaConfig = {</span><br><span class="line">        siteId: "{{ theme.colina.site_id }}",</span><br><span class="line">        apiUrl: "{{ theme.colina.url }}",</span><br><span class="line">        lang: "{{ theme.colina.language }}" || navigator.language || </span><br><span class="line">          navigator.systemLanguage || navigator.userLanguage</span><br><span class="line">      };</span><br><span class="line">      (function() {</span><br><span class="line">          var d = document, s = d.createElement("script");</span><br><span class="line">          s.src = "{{ theme.colina.url }}/embed/counter.min.js";</span><br><span class="line">          (d.head || d.body).appendChild(s);</span><br><span class="line">        })();</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  {% endif %}</span><br><span class="line"></span><br><span class="line">  {% if page.comments %}</span><br><span class="line">    &lt;script type="text/javascript"&gt;</span><br><span class="line">      var colinaConfig = {</span><br><span class="line">        identifier: "{{ page.path }}",</span><br><span class="line">        siteId: "{{ theme.colina.site_id }}",</span><br><span class="line">        apiUrl: "{{ theme.colina.url }}",</span><br><span class="line">        title: "{{ page.title| addslashes }}",</span><br><span class="line">        lang: "{{ theme.colina.language }}" || navigator.language || </span><br><span class="line">          navigator.systemLanguage || navigator.userLanguage</span><br><span class="line">      };</span><br><span class="line">      function loadComments() {</span><br><span class="line">        (function() {</span><br><span class="line">          var d = document, s = d.createElement("script");</span><br><span class="line">          s.src = "{{ theme.colina.url }}/embed/colina.min.js";</span><br><span class="line">          (d.head || d.body).appendChild(s);</span><br><span class="line">        })();</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      {% if theme.colina.lazyload %}</span><br><span class="line">        $(function () {</span><br><span class="line">          var offsetTop = $('#comments').offset().top - $(window).height();</span><br><span class="line">          if (offsetTop &lt;= 0) {</span><br><span class="line">            // load directly when there's no a scrollbar</span><br><span class="line">            loadComments();</span><br><span class="line">          } else {</span><br><span class="line">            $(window).on('scroll.colina_scroll', function () {</span><br><span class="line">              // offsetTop may changes because of manually resizing browser window or lazy loading images.</span><br><span class="line">              var offsetTop = $('#comments').offset().top - $(window).height();</span><br><span class="line">              var scrollTop = $(window).scrollTop();</span><br><span class="line"></span><br><span class="line">              // pre-load comments a bit? (margin or anything else)</span><br><span class="line">              if (offsetTop - scrollTop &lt; 60) {</span><br><span class="line">                $(window).off('.colina_scroll');</span><br><span class="line">                loadComments();</span><br><span class="line">              }</span><br><span class="line">            });</span><br><span class="line">          }</span><br><span class="line">        });</span><br><span class="line">      {% else %}</span><br><span class="line">        loadComments();</span><br><span class="line">      {% endif %}</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  {% endif %}</span><br><span class="line"></span><br><span class="line">{% endif %}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>在同目录下的 <code>index.swig</code> 中追加：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% include 'colina.swig' %}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>在 <code>themes/next/layout/_partials/comments.swig</code> 中追加以下内容，用于渲染评论内容：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% elseif theme.colina.enable %}</span><br><span class="line">    &lt;div class="comments" id="comments"&gt;</span><br><span class="line">      &lt;div id="colina-comments"&gt;</span><br><span class="line">        &lt;noscript&gt;</span><br><span class="line">          Please enable JavaScript to view comments powered by Colina.</span><br><span class="line">        &lt;/noscript&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>在 <code>themes/next/layout/_macro/post.swig</code> 中添加以下内容，用于展示评论条数：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% if post.comments %}</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  {% elseif theme.colina.enable and theme.colina.count %}</span><br><span class="line">    &lt;span class="post-comments-count"&gt;</span><br><span class="line">      &lt;span class="post-meta-divider"&gt;|&lt;/span&gt;</span><br><span class="line">      &lt;span class="post-meta-item-icon"&gt;</span><br><span class="line">        &lt;i class="fa fa-comment-o"&gt;&lt;/i&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">      &lt;a href="{{ url_for(post.path) }}#comments" itemprop="discussionUrl"&gt;</span><br><span class="line">        &lt;span class="post-meta-item-text"&gt;{{ __('post.comments_count') + __('symbol.colon') }}&lt;/span&gt;</span><br><span class="line">        &lt;span class="post-comments-count colina-comment-count"</span><br><span class="line">                data-colina-identifier="{{ post.path }}" itemprop="commentCount"&gt;&lt;/span&gt;</span><br><span class="line">      &lt;/a&gt;</span><br><span class="line">    &lt;/span&gt;</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>在 <code>themes/next/_config.yml</code> 中添加配置项：</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">colina:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">site_id:</span> <span class="string">your</span> <span class="string">site</span> <span class="string">id</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">http://localhost:3000</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">language:</span></span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>最后运行 hexo 即可看到显示效果</p>
</li>
</ul>
]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>colina</tag>
        <tag>comment</tag>
      </tags>
  </entry>
</search>
