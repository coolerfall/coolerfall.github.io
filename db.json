{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/README.md","path":"README.md","modified":0,"renderable":0},{"_id":"source/images/alipay.png","path":"images/alipay.png","modified":0,"renderable":0},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"source/images/wechatpay.png","path":"images/wechatpay.png","modified":0,"renderable":0},{"_id":"source/images/gradle-maven/comments1.jpg","path":"images/gradle-maven/comments1.jpg","modified":0,"renderable":0},{"_id":"source/images/gradle-maven/comments2.jpg","path":"images/gradle-maven/comments2.jpg","modified":0,"renderable":0},{"_id":"source/images/gradle-maven/create_issue1.jpg","path":"images/gradle-maven/create_issue1.jpg","modified":0,"renderable":0},{"_id":"source/images/gradle-maven/create_issue2.jpg","path":"images/gradle-maven/create_issue2.jpg","modified":0,"renderable":0},{"_id":"source/images/gradle-maven/new-issue.jpg","path":"images/gradle-maven/new-issue.jpg","modified":0,"renderable":0},{"_id":"source/images/gradle-maven/release.jpg","path":"images/gradle-maven/release.jpg","modified":0,"renderable":0},{"_id":"source/images/work-on-linux/font-config-effects1.png","path":"images/work-on-linux/font-config-effects1.png","modified":0,"renderable":0},{"_id":"source/images/work-on-linux/font-config-effects2.png","path":"images/work-on-linux/font-config-effects2.png","modified":0,"renderable":0},{"_id":"source/images/work-on-linux/font-config.png","path":"images/work-on-linux/font-config.png","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"9b4489655b1ef5a8a62dbb844ac72a53edbffdfb","modified":1684811275025},{"_id":"source/_posts/2015-02-03-github-pages-with-jekyll.md","hash":"157e726b89e813ec0c77a34ea5d3424659f903f0","modified":1684822275083},{"_id":"source/README.md","hash":"1c4b1a59fcbe980d2bb7070fb056101dc98d7aac","modified":1684811275025},{"_id":"source/404.html","hash":"0905e426789258bc7e8b93e6c485cef4dbf3a0c6","modified":1684811275025},{"_id":"source/_posts/2015-02-14-andoird-studio-update.md","hash":"b338dba66819e887805e1f4ba31ee2b6728c0738","modified":1684811275015},{"_id":"source/_posts/2015-02-08-use-ndk-in-android-studio.md","hash":"e0d3dd08e4e3604bdc4dd4e02fdee3ccd7df9525","modified":1684822279443},{"_id":"source/_posts/2015-02-14-multiple-channel-packing.md","hash":"acca4525f0528b24f1c1e80522ca21aa64b58d4a","modified":1684811275015},{"_id":"source/_posts/2015-03-19-golang-hash.md","hash":"7d34955abd458fbb04fdc293ba005585f03d9a27","modified":1684811275015},{"_id":"source/_posts/2015-03-16-listen-home-key.md","hash":"816beea961fffc12deded25a2c41434bc0160635","modified":1684811275015},{"_id":"source/_posts/2015-03-23-android-app-daemon.md","hash":"1dad7d71124a5b4d711962d5079e8502e369b7cc","modified":1684811275015},{"_id":"source/_posts/2015-03-28-gradle-push-to-maven.md","hash":"9cae20aa5c9ade11f6f6a4b13bfa202611a8ea4e","modified":1684822334672},{"_id":"source/_posts/2015-03-25-android-app-uninstall-watcher.md","hash":"bb405769e5340e4d383cbc91a8ebddf7bc0618f4","modified":1684811275015},{"_id":"source/_posts/2015-04-03-android-task-affinity.md","hash":"296ecfb37dd5281dbc632da6ee5a43038ba1231f","modified":1684811275015},{"_id":"source/_posts/2015-05-14-git-problems.md","hash":"d9072742afaddf73656469d2bf1569104d70fa78","modified":1684811275015},{"_id":"source/_posts/2015-06-03-android-launch-mode.md","hash":"ff3effb67f095167b561a39d32131d57b0326f24","modified":1684822451810},{"_id":"source/_posts/2015-07-10-jni_register.md","hash":"0cfd7cb0ef01ffd6c35d5815c17fd1b5254cee8f","modified":1684822459364},{"_id":"source/_posts/2015-07-21-android-marquee.md","hash":"eafacdeec580216e7486aa787a8a0b365aff4e70","modified":1684822462424},{"_id":"source/_posts/2015-07-04-jni-signature.md","hash":"64d777a56c765473e79c0bc2b7b5e468915e443c","modified":1684822456010},{"_id":"source/_posts/2015-07-22-linux-c-string-operation.md","hash":"02bab84de6fd48f55f5548bc09f2859276980b35","modified":1684811275015},{"_id":"source/_posts/2015-06-24-bad-interpreter.md","hash":"de5a0ccbe132d364d8465514a5dd9f4810cdb966","modified":1684811275015},{"_id":"source/_posts/2015-07-27-app-widget-animation.md","hash":"9d02d078b8b866ba3e1bfebbe57fd3412741f464","modified":1684822481857},{"_id":"source/_posts/2015-07-24-java-hash.md","hash":"e7c0a041e407b9a0bb877f195796218bb2aa1cbb","modified":1684822479000},{"_id":"source/_posts/2015-11-20-proguard-shrink-error.md","hash":"eb813ae695753e78c72d8044bab1d42e0faa63ae","modified":1684822485100},{"_id":"source/_posts/2016-01-06-media-session-compat.md","hash":"84a5ea9c7f65ac32d2b8c878c9754acee55dc9d7","modified":1684822488363},{"_id":"source/_posts/2016-03-30-url-query-sanitizer.md","hash":"b94e7274f3f79e0981bad13e5272e853efd6600b","modified":1684822492093},{"_id":"source/_posts/2018-10-16-jekyll-to-hexo.md","hash":"b8ccc87cdd08910cdc01d3e2d36cc94e83520488","modified":1684811275015},{"_id":"source/_posts/2018-10-17-work-on-linux-part-one.md","hash":"481aa55f555eb498befc73807cacf736b66c16f4","modified":1684821525346},{"_id":"source/_posts/2018-10-22-work-on-linux-part-three.md","hash":"88556287a3f3fd770b94d7b14556cf58edb6368d","modified":1684822357285},{"_id":"source/_posts/2018-10-18-work-on-linux-part-two.md","hash":"09dce324de77b7ef36aa2c4e2ea4474fb73d757a","modified":1684821632378},{"_id":"source/_posts/2019-02-19-migrate-disqus-to-colina.md","hash":"b2e28b0ae766bce09b4e3edc1aeda287b06117b7","modified":1684811275015},{"_id":"source/categories/index.md","hash":"679b5caa332d7a1eb0f3dceb36c51e2c5f9d17b4","modified":1684811275025},{"_id":"source/tags/index.md","hash":"0f9ac295928a2afea7f8907033507a139523132f","modified":1684811275025},{"_id":"source/about/index.md","hash":"59cd7a023d0f3d535f0f4fbb5e5f1bc8fedf4c10","modified":1684811275025},{"_id":"source/images/avatar.png","hash":"b69aec231b881359c97247f63bbc25462d481c11","modified":1684811275021},{"_id":"source/images/alipay.png","hash":"c8443414f9b2590d9a630b278c854198c1761e8f","modified":1684811275018},{"_id":"source/images/gradle-maven/comments2.jpg","hash":"95a5831572ff51fc60a4f563269d3219c93ab331","modified":1684811275021},{"_id":"source/images/gradle-maven/comments1.jpg","hash":"6ea4f3d15753162c707d33609705ca59768de51b","modified":1684811275021},{"_id":"source/images/gradle-maven/create_issue1.jpg","hash":"020e68f315291e73d532cdf951ccaab32666914d","modified":1684811275025},{"_id":"source/images/gradle-maven/create_issue2.jpg","hash":"569521df1f50986cc0a9cf00b096f9f7ccb51af6","modified":1684811275025},{"_id":"source/images/gradle-maven/new-issue.jpg","hash":"b7f17e54afeca6ad9e75fdefa358d8ea440a923a","modified":1684811275025},{"_id":"source/images/gradle-maven/release.jpg","hash":"6581e3076e8ea3d6ca4136c22851c082a42ac29e","modified":1684811275025},{"_id":"source/images/wechatpay.png","hash":"2af6b90efcea76f509ef60456b9603d136267a60","modified":1684811275015},{"_id":"source/images/work-on-linux/font-config.png","hash":"2c9e9bb309cb78ccab4be097d7fdb4e1f50500c1","modified":1684811275018},{"_id":"source/images/work-on-linux/font-config-effects2.png","hash":"af5e42b0ab4bcc4ab4de3a777c0c53fd3df5eef7","modified":1684811275018},{"_id":"source/images/work-on-linux/font-config-effects1.png","hash":"83a80717a3ccd61f5a95ec19215332f1231bb0a4","modified":1684811275018},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"418a7887d4aa96422956d3c992f4e788082cd8a1","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/package.json","hash":"3eed20f67ef9c107e3c952b7b05d2a2714c6a7c9","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"c0b057baab99a49fb2640029276479442e5f3ccb","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/README.md","hash":"36c4b25587ca494102323dab5a38de5490451a64","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"9f791494afa263c3e31f14b8a5fa2996dfc834c0","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"44cd26479f503751329f6da2ed80cce1bbf18117","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"70de366e10ea584ba039d40d6b35ac97f93454ad","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/languages/th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"88ea50eeb9097ab4a87a44981a102d8594feb064","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"4695c87d6b81b3a23d16ad6513d9eaa925f8d8ad","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"b0660b2af0ac7d3fda14ca4d9f2c9e79ef06c6f9","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"ac3c4a7616ea80f0d32d68d6e53233952ba756dc","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"9bbdbb0656505acceef9b9895a576164175fe888","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"c40760b559c516677c8b11a00ba50c011f2079fd","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"95822069cce2c4702e035c770b3089bc12a3404c","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/addtoany.njk","hash":"ef64c6bfb8540cd874701236b9be47db2496e98e","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"e7f988ecddb2159313699a00827a45eca5622bd4","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"3f5b48ad3a34cce8bb35f2346b4fbf94078af2e4","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"ce8477e7fb226525bae5872cd68a1c2c23ad50c8","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"226fccbe9c93265e65a300e3cb4bf6f9065cfdd7","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"fd24abfaba4d91923ddb6aecf0268b216678c8bd","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"83647a6207333b9609ba90b0946b3fa9548e6381","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"5e1cf39de050964e97fb3ba0825aeec7f4bc36dd","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"79667fd0be85ee0e0c69e542e4f870b114c96c33","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-share.njk","hash":"ce90c97f222d9c751a08392e9b14d2bdf0f3df1a","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"70342218473a6e6aa9148de06bfffe121afb8548","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/umami.njk","hash":"3343750682fbd8535e50f8129be3003ad26015b4","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"a7390286c6b547a782f828e315fbe2fc60601504","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"64e4024376b51fe81be7ad80235abdf0a83853bd","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"a1418c9dc8c0f1a0ad4ded0f4627c45bf0db1a10","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"c4fc4e862d09221265ab1466085f057be2ad2e4d","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"48f4f277946a168d0db1ea02804e85c22ca2c7db","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"7664491542046df9a3887cf40a06e00c0b4086a9","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"9dfe853c901bdc52fc950bacdf15484dbb9bf140","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"782ee1fc5e669d3ddbfeb82b73ad7fe561f1a4fb","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"dafc6d23c80d6fe3e55a7711e94210d2479b629a","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"3fbfab591f280e2e7f3b0265901c93bc4bd137ed","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"6569a6640f79d247a8235b3914772c0e2f99ead2","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"b7f48be3c43bfa393d62142544a5487a67871713","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"547c0b5cd5e7ea10d21863d13a6b16579a49396c","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"26a0cba1eee5de45a45a5e14e17707f905390512","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"ac2dc0ce9c775a83ef7132ae957b54539366ac9c","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"91dbf3ca5c3a613d4e30618c120da535bf2d0336","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"580aa86ed2ec05a7382338a6eea02e9c740b02a5","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"d757768a58743601d0d84158ba955eb15d4c3c01","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"04cf4a69537fc14d3b8904f965d283356853847f","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"ebfba158a0a4af3d1dabcacbc58986664de52140","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitter.styl","hash":"35104dc6883a61c31e0e368dac8ac2f697be62fe","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"77550e0d3e029b7458e35d8c5ae1fbd612c9673b","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"9056be572ec1cfa429abb22be4b45a662d5b0fb1","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"670fc109b56a010b166b86b616823a1aae97a738","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"98d4c20aff0f0fcfe1824017fb06ab21ef0d218e","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"7a39bcce7274284e87388743db62afc847fe6897","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"b750af2fb833c10c4313b5a4258237161a7833d7","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"da5e88f8debd5ac8d7af5c6ba6240df66104955f","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"c6a27beb3f741211a14576026f3b4cfc44cc6407","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1684812205897},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"9a7c71560fbdc936ad4e736fe15063ea3e8a644b","modified":1684812205897}],"Category":[{"name":"misc","_id":"cli00ivld0004z0inckti7ffl"},{"name":"tools","_id":"cli00ivlh000bz0in06za3mbt"},{"name":"android","_id":"cli00ivlr000sz0in9fch5ha6"},{"name":"go","_id":"cli00ivlv0014z0in2y10h0bg"},{"name":"c","_id":"cli00ivm40024z0in6jzec91m"}],"Data":[],"Page":[{"title":"关于我","date":"2018-10-16T07:14:28.000Z","_content":"\n    一个从ARM嵌入式转了Android做着Java工作写着Golang玩着IoT不务正业的程序猿。\n\n\n### 开源项目\n* [Android-HttpDownloadManager][1]: Android多进程下载器\n* [Android-LunarView][2]: Android农历控件\n* [revival][3]: Typescript RESTful http库\n* [sqlbrick][4]: Golang sql代码生成器\n* [aria2go][5]: [libaria2][6]的Go bindings\n* [Android-AppDaemon][7]: Android进程守护（已停更）\n* [Android-AppUninstallWatcher][8]: Android卸载监听（已停更）\n\n### 技能\n* 专职各端打酱油\n\n\n[1]: https://github.com/Coolerfall/Android-HttpDownloadManager\n[2]: https://github.com/Coolerfall/Android-LunarView\n[3]: https://github.com/Coolerfall/revival\n[4]: https://github.com/Tourbillon/sqlbrick\n[5]: https://github.com/Tourbillon/aria2go\n[6]: https://github.com/aria2/aria2\n[7]: https://github.com/Coolerfall/Android-AppDaemon\n[8]: https://github.com/Coolerfall/Android-AppUninstallWatcher","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2018-10-16 15:14:28\n---\n\n    一个从ARM嵌入式转了Android做着Java工作写着Golang玩着IoT不务正业的程序猿。\n\n\n### 开源项目\n* [Android-HttpDownloadManager][1]: Android多进程下载器\n* [Android-LunarView][2]: Android农历控件\n* [revival][3]: Typescript RESTful http库\n* [sqlbrick][4]: Golang sql代码生成器\n* [aria2go][5]: [libaria2][6]的Go bindings\n* [Android-AppDaemon][7]: Android进程守护（已停更）\n* [Android-AppUninstallWatcher][8]: Android卸载监听（已停更）\n\n### 技能\n* 专职各端打酱油\n\n\n[1]: https://github.com/Coolerfall/Android-HttpDownloadManager\n[2]: https://github.com/Coolerfall/Android-LunarView\n[3]: https://github.com/Coolerfall/revival\n[4]: https://github.com/Tourbillon/sqlbrick\n[5]: https://github.com/Tourbillon/aria2go\n[6]: https://github.com/aria2/aria2\n[7]: https://github.com/Coolerfall/Android-AppDaemon\n[8]: https://github.com/Coolerfall/Android-AppUninstallWatcher","updated":"2023-05-23T03:07:55.025Z","path":"about/index.html","comments":1,"layout":"page","_id":"cli00ivl30000z0in4w3d24v7","content":"<pre><code>一个从ARM嵌入式转了Android做着Java工作写着Golang玩着IoT不务正业的程序猿。\n</code></pre>\n<h3 id=\"开源项目\"><a href=\"#开源项目\" class=\"headerlink\" title=\"开源项目\"></a>开源项目</h3><ul>\n<li><a href=\"https://github.com/Coolerfall/Android-HttpDownloadManager\">Android-HttpDownloadManager</a>: Android 多进程下载器 </li>\n<li><a href=\"https://github.com/Coolerfall/Android-LunarView\">Android-LunarView</a>: Android 农历控件 </li>\n<li><a href=\"https://github.com/Coolerfall/revival\">revival</a>: Typescript RESTful http 库 </li>\n<li><a href=\"https://github.com/Tourbillon/sqlbrick\">sqlbrick</a>: Golang sql 代码生成器 </li>\n<li><a href=\"https://github.com/Tourbillon/aria2go\">aria2go</a>: <a href=\"https://github.com/aria2/aria2\">libaria2</a> 的 Go bindings</li>\n<li><a href=\"https://github.com/Coolerfall/Android-AppDaemon\">Android-AppDaemon</a>: Android 进程守护（已停更）</li>\n<li><a href=\"https://github.com/Coolerfall/Android-AppUninstallWatcher\">Android-AppUninstallWatcher</a>: Android 卸载监听（已停更）</li>\n</ul>\n<h3 id=\"技能\"><a href=\"#技能\" class=\"headerlink\" title=\"技能\"></a>技能</h3><ul>\n<li>专职各端打酱油</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>一个从ARM嵌入式转了Android做着Java工作写着Golang玩着IoT不务正业的程序猿。\n</code></pre>\n<h3 id=\"开源项目\"><a href=\"#开源项目\" class=\"headerlink\" title=\"开源项目\"></a>开源项目</h3><ul>\n<li><a href=\"https://github.com/Coolerfall/Android-HttpDownloadManager\">Android-HttpDownloadManager</a>: Android 多进程下载器 </li>\n<li><a href=\"https://github.com/Coolerfall/Android-LunarView\">Android-LunarView</a>: Android 农历控件 </li>\n<li><a href=\"https://github.com/Coolerfall/revival\">revival</a>: Typescript RESTful http 库 </li>\n<li><a href=\"https://github.com/Tourbillon/sqlbrick\">sqlbrick</a>: Golang sql 代码生成器 </li>\n<li><a href=\"https://github.com/Tourbillon/aria2go\">aria2go</a>: <a href=\"https://github.com/aria2/aria2\">libaria2</a> 的 Go bindings</li>\n<li><a href=\"https://github.com/Coolerfall/Android-AppDaemon\">Android-AppDaemon</a>: Android 进程守护（已停更）</li>\n<li><a href=\"https://github.com/Coolerfall/Android-AppUninstallWatcher\">Android-AppUninstallWatcher</a>: Android 卸载监听（已停更）</li>\n</ul>\n<h3 id=\"技能\"><a href=\"#技能\" class=\"headerlink\" title=\"技能\"></a>技能</h3><ul>\n<li>专职各端打酱油</li>\n</ul>\n"},{"_content":"Sorry this page does not exist :(","source":"404.html","raw":"Sorry this page does not exist :(","date":"2023-05-23T03:50:52.496Z","updated":"2023-05-23T03:07:55.025Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cli00ivlb0002z0in9suab9vk","content":"Sorry this page does not exist :(","site":{"data":{}},"excerpt":"","more":"Sorry this page does not exist :("},{"title":"所有分类","type":"categories","date":"2018-10-16T06:04:32.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: 所有分类\ntype: categories\ndate: 2018-10-16 14:04:32\n---\n","updated":"2023-05-23T03:07:55.025Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cli00ivle0006z0inhr19fvlq","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"所有标签","type":"tags","date":"2018-10-16T06:02:18.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: 所有标签\ntype: tags\ndate: 2018-10-16 14:02:18\n---\n","updated":"2023-05-23T03:07:55.025Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cli00ivlg0008z0ind4r03h0s","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Windows 下使用 Jekyll 在 github pages 搭建博客","_content":"\n一直想搭建一个博客来记录些开发中遇到的问题，但是自己对前端不熟悉以及服务器主机等等原因，迟迟没有行动起来。后来发现了github pages这个东西，可以支持用户在github上搭建个人博客，于是乎开始折腾起Jekyll了。\n<!-- more -->\n\n### Jekyll的简单教程 ###\n1.Jekyll是基于Ruby开发的，所以先安装[rubyinstaller以及DevKit][1]，要注意DevKit需下载与rubyinstaller对应的版本。安装好ruby之后，将DevKit解压，在cmd中切换到DevKit的根目录，执行`$ ruby dk.rb init`生成config.yml配置文件，然后在config.yml添加ruby的安装目录：\n```text\n---\n- E:/Ruby200\n```\n\n注意是*---*下面加*-*和空格最后在cmd中执行`$ ruby dk.rb install`，出现提示：\n```text\n$ ruby dk.rb install\n[INFO] Updating convenience notice gem override for 'E:/Ruby200'\n[INFO] Installing 'E:/Ruby200/lib/ruby/site_ruby/devkit.rb'\n```\n则ruby环境搭建完成了。\n\n2.在cmd中通过gem来安装jekyll，首先使用`$ gem list`查看是否安装liquid，若未安装则执行`$ gem install liquid`，安装完成后再执行`$ gem install jekyll`来安装jekyll。如果安装速度很慢，可以考虑将ruby源更换为淘宝源：\n```\n$ gem sources --remove https://rubygems.org/\n$ gem sources -a https://ruby.taobao.org/\n$ gem sources -l\n*** CURRENT SOURCES ***\n\nhttps://ruby.taobao.org\n```\n如果在执行`$ gem list`出现如下时：\n```text\nERROR:  Could not find a valid gem 'liquid' (>= 0), here is why:\n          Unable to download data from https://rubygems.org/ - SSL_connect returned=1 errno=0 state=SSLv3 read server certificate\nB: certificate verify failed (https://rubygems.org/latest_specs.4.8.gz)\n```\n则需要下载[cacert.pem][3]文件，并添加一个环境变量命名为`SSL_CERT_FILE`指向`cacert.pem`所在路径，然后就可以下载了。\n<br>\n\n3.安装好jekyll后，从github上下载[jekyll bootstrap][2]模板:\n```text\n$ git clone https://github.com/plusjade/jekyll-bootstrap.git jekyll\n$ cd jekyll\n$ jekyll server\n```\n在浏览器中输入localhost:4000，成功的话会看到一个demo网页。\n\n[1]: http://rubyinstaller.org/downloads/\n[2]: https://github.com/plusjade/jekyll-bootstrap/\n[3]: http://curl.haxx.se/ca/cacert.pem","source":"_posts/2015-02-03-github-pages-with-jekyll.md","raw":"---\ntitle: Windows下使用Jekyll在github pages搭建博客\ncategory: misc\ntags: [github pages, jekyll]\n---\n\n一直想搭建一个博客来记录些开发中遇到的问题，但是自己对前端不熟悉以及服务器主机等等原因，迟迟没有行动起来。后来发现了github pages这个东西，可以支持用户在github上搭建个人博客，于是乎开始折腾起Jekyll了。\n<!-- more -->\n\n### Jekyll的简单教程 ###\n1.Jekyll是基于Ruby开发的，所以先安装[rubyinstaller以及DevKit][1]，要注意DevKit需下载与rubyinstaller对应的版本。安装好ruby之后，将DevKit解压，在cmd中切换到DevKit的根目录，执行`$ ruby dk.rb init`生成config.yml配置文件，然后在config.yml添加ruby的安装目录：\n```text\n---\n- E:/Ruby200\n```\n\n注意是*---*下面加*-*和空格最后在cmd中执行`$ ruby dk.rb install`，出现提示：\n```text\n$ ruby dk.rb install\n[INFO] Updating convenience notice gem override for 'E:/Ruby200'\n[INFO] Installing 'E:/Ruby200/lib/ruby/site_ruby/devkit.rb'\n```\n则ruby环境搭建完成了。\n\n2.在cmd中通过gem来安装jekyll，首先使用`$ gem list`查看是否安装liquid，若未安装则执行`$ gem install liquid`，安装完成后再执行`$ gem install jekyll`来安装jekyll。如果安装速度很慢，可以考虑将ruby源更换为淘宝源：\n```\n$ gem sources --remove https://rubygems.org/\n$ gem sources -a https://ruby.taobao.org/\n$ gem sources -l\n*** CURRENT SOURCES ***\n\nhttps://ruby.taobao.org\n```\n如果在执行`$ gem list`出现如下时：\n```text\nERROR:  Could not find a valid gem 'liquid' (>= 0), here is why:\n          Unable to download data from https://rubygems.org/ - SSL_connect returned=1 errno=0 state=SSLv3 read server certificate\nB: certificate verify failed (https://rubygems.org/latest_specs.4.8.gz)\n```\n则需要下载[cacert.pem][3]文件，并添加一个环境变量命名为`SSL_CERT_FILE`指向`cacert.pem`所在路径，然后就可以下载了。\n<br>\n\n3.安装好jekyll后，从github上下载[jekyll bootstrap][2]模板:\n```text\n$ git clone https://github.com/plusjade/jekyll-bootstrap.git jekyll\n$ cd jekyll\n$ jekyll server\n```\n在浏览器中输入localhost:4000，成功的话会看到一个demo网页。\n\n[1]: http://rubyinstaller.org/downloads/\n[2]: https://github.com/plusjade/jekyll-bootstrap/\n[3]: http://curl.haxx.se/ca/cacert.pem","slug":"github-pages-with-jekyll","published":1,"date":"2015-02-02T16:00:00.000Z","updated":"2023-05-23T06:11:15.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli00ivl70001z0infsw60net","content":"<p>一直想搭建一个博客来记录些开发中遇到的问题，但是自己对前端不熟悉以及服务器主机等等原因，迟迟没有行动起来。后来发现了 github pages 这个东西，可以支持用户在 github 上搭建个人博客，于是乎开始折腾起 Jekyll 了。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"Jekyll的简单教程\"><a href=\"#Jekyll的简单教程\" class=\"headerlink\" title=\"Jekyll的简单教程\"></a>Jekyll 的简单教程</h3><p>1.Jekyll 是基于 Ruby 开发的，所以先安装 <a href=\"http://rubyinstaller.org/downloads/\">rubyinstaller 以及 DevKit</a>，要注意 DevKit 需下载与 rubyinstaller 对应的版本。安装好 ruby 之后，将 DevKit 解压，在 cmd 中切换到 DevKit 的根目录，执行 <code>$ ruby dk.rb init</code> 生成 config.yml 配置文件，然后在 config.yml 添加 ruby 的安装目录：</p>\n<figure class=\"highlight text\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- E:/Ruby200</span><br></pre></td></tr></tbody></table></figure>\n\n<p>注意是 *— <em>下面加</em> -* 和空格最后在 cmd 中执行 <code>$ ruby dk.rb install</code>，出现提示：</p>\n<figure class=\"highlight text\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ruby dk.rb install</span><br><span class=\"line\">[INFO] Updating convenience notice gem override for 'E:/Ruby200'</span><br><span class=\"line\">[INFO] Installing 'E:/Ruby200/lib/ruby/site_ruby/devkit.rb'</span><br></pre></td></tr></tbody></table></figure>\n<p>则 ruby 环境搭建完成了。</p>\n<p>2. 在 cmd 中通过 gem 来安装 jekyll，首先使用 <code>$ gem list</code> 查看是否安装 liquid，若未安装则执行 <code>$ gem install liquid</code>，安装完成后再执行 <code>$ gem install jekyll</code> 来安装 jekyll。如果安装速度很慢，可以考虑将 ruby 源更换为淘宝源：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gem sources --remove https://rubygems.org/</span><br><span class=\"line\">$ gem sources -a https://ruby.taobao.org/</span><br><span class=\"line\">$ gem sources -l</span><br><span class=\"line\">*** CURRENT SOURCES ***</span><br><span class=\"line\"></span><br><span class=\"line\">https://ruby.taobao.org</span><br></pre></td></tr></tbody></table></figure>\n<p>如果在执行 <code>$ gem list</code> 出现如下时：</p>\n<figure class=\"highlight text\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR:  Could not find a valid gem 'liquid' (&gt;= 0), here is why:</span><br><span class=\"line\">          Unable to download data from https://rubygems.org/ - SSL_connect returned=1 errno=0 state=SSLv3 read server certificate</span><br><span class=\"line\">B: certificate verify failed (https://rubygems.org/latest_specs.4.8.gz)</span><br></pre></td></tr></tbody></table></figure>\n<p>则需要下载 <a href=\"http://curl.haxx.se/ca/cacert.pem\">cacert.pem</a> 文件，并添加一个环境变量命名为 <code>SSL_CERT_FILE</code> 指向 <code>cacert.pem</code> 所在路径，然后就可以下载了。<br><br></p>\n<p>3. 安装好 jekyll 后，从 github 上下载 <a href=\"https://github.com/plusjade/jekyll-bootstrap/\">jekyll bootstrap</a> 模板:</p>\n<figure class=\"highlight text\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https://github.com/plusjade/jekyll-bootstrap.git jekyll</span><br><span class=\"line\">$ cd jekyll</span><br><span class=\"line\">$ jekyll server</span><br></pre></td></tr></tbody></table></figure>\n<p>在浏览器中输入 localhost:4000，成功的话会看到一个 demo 网页。</p>\n","site":{"data":{}},"excerpt":"<p>一直想搭建一个博客来记录些开发中遇到的问题，但是自己对前端不熟悉以及服务器主机等等原因，迟迟没有行动起来。后来发现了 github pages 这个东西，可以支持用户在 github 上搭建个人博客，于是乎开始折腾起 Jekyll 了。</p>","more":"<h3 id=\"Jekyll的简单教程\"><a href=\"#Jekyll的简单教程\" class=\"headerlink\" title=\"Jekyll的简单教程\"></a>Jekyll 的简单教程</h3><p>1.Jekyll 是基于 Ruby 开发的，所以先安装 <a href=\"http://rubyinstaller.org/downloads/\">rubyinstaller 以及 DevKit</a>，要注意 DevKit 需下载与 rubyinstaller 对应的版本。安装好 ruby 之后，将 DevKit 解压，在 cmd 中切换到 DevKit 的根目录，执行 <code>$ ruby dk.rb init</code> 生成 config.yml 配置文件，然后在 config.yml 添加 ruby 的安装目录：</p>\n<figure class=\"highlight text\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- E:/Ruby200</span><br></pre></td></tr></tbody></table></figure>\n\n<p>注意是 *— <em>下面加</em> -* 和空格最后在 cmd 中执行 <code>$ ruby dk.rb install</code>，出现提示：</p>\n<figure class=\"highlight text\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ruby dk.rb install</span><br><span class=\"line\">[INFO] Updating convenience notice gem override for 'E:/Ruby200'</span><br><span class=\"line\">[INFO] Installing 'E:/Ruby200/lib/ruby/site_ruby/devkit.rb'</span><br></pre></td></tr></tbody></table></figure>\n<p>则 ruby 环境搭建完成了。</p>\n<p>2. 在 cmd 中通过 gem 来安装 jekyll，首先使用 <code>$ gem list</code> 查看是否安装 liquid，若未安装则执行 <code>$ gem install liquid</code>，安装完成后再执行 <code>$ gem install jekyll</code> 来安装 jekyll。如果安装速度很慢，可以考虑将 ruby 源更换为淘宝源：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gem sources --remove https://rubygems.org/</span><br><span class=\"line\">$ gem sources -a https://ruby.taobao.org/</span><br><span class=\"line\">$ gem sources -l</span><br><span class=\"line\">*** CURRENT SOURCES ***</span><br><span class=\"line\"></span><br><span class=\"line\">https://ruby.taobao.org</span><br></pre></td></tr></tbody></table></figure>\n<p>如果在执行 <code>$ gem list</code> 出现如下时：</p>\n<figure class=\"highlight text\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR:  Could not find a valid gem 'liquid' (&gt;= 0), here is why:</span><br><span class=\"line\">          Unable to download data from https://rubygems.org/ - SSL_connect returned=1 errno=0 state=SSLv3 read server certificate</span><br><span class=\"line\">B: certificate verify failed (https://rubygems.org/latest_specs.4.8.gz)</span><br></pre></td></tr></tbody></table></figure>\n<p>则需要下载 <a href=\"http://curl.haxx.se/ca/cacert.pem\">cacert.pem</a> 文件，并添加一个环境变量命名为 <code>SSL_CERT_FILE</code> 指向 <code>cacert.pem</code> 所在路径，然后就可以下载了。<br><br></p>\n<p>3. 安装好 jekyll 后，从 github 上下载 <a href=\"https://github.com/plusjade/jekyll-bootstrap/\">jekyll bootstrap</a> 模板:</p>\n<figure class=\"highlight text\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https://github.com/plusjade/jekyll-bootstrap.git jekyll</span><br><span class=\"line\">$ cd jekyll</span><br><span class=\"line\">$ jekyll server</span><br></pre></td></tr></tbody></table></figure>\n<p>在浏览器中输入 localhost:4000，成功的话会看到一个 demo 网页。</p>"},{"title":"Android Studio 多渠道批量打包","_content":"\nAndroid市场众多，在打包App的时候需要对每个渠道添加不同的参数用于统计，但是针对每个渠道单独打包比较麻烦，所以要考虑使用批量打包。AS使用gradle来构建android项目，我们可以利用来进行批量打包操作。\n<!-- more -->\n\n### 步骤 ###\n\n1.在manifest中找到与渠道相关的参数，增加相应的PlaceHolder，例如：\n```xml\n<meta-data\n\tandroid:name=\"aid\"\n\tandroid:value=\"${APP_AID}\" />\n\n<meta-data\n\tandroid:name=\"pid\"\n\tandroid:value=\"${APP_PID}\" />\n```\n\n2.在build.gradle设置productFlavors：\n```groovy\nandroid {\n\tproductFlavors {\n\t\twandoujia {\n\t\t\tmanifestPlaceholders = [APP_AID : 80, APP_PID : 43]\n\t\t}\n\n\t\tyingyongbao {\n\t\t\tmanifestPlaceholders = [APP_AID : 60, APP_PID : 45]\n\t\t}\n\t}\n}\n```\nmanifestPlaceholders是一个数组，可以根据实际需求增减参数\n\n3.最后在AS中Build->Generate Signed APK，最后根据提示打包APK，AS会根据productFlavors生成相应的包","source":"_posts/2015-02-14-multiple-channel-packing.md","raw":"---\ntitle: Android Studio多渠道批量打包\ncategory: tools\ntags: [android studio]\n---\n\nAndroid市场众多，在打包App的时候需要对每个渠道添加不同的参数用于统计，但是针对每个渠道单独打包比较麻烦，所以要考虑使用批量打包。AS使用gradle来构建android项目，我们可以利用来进行批量打包操作。\n<!-- more -->\n\n### 步骤 ###\n\n1.在manifest中找到与渠道相关的参数，增加相应的PlaceHolder，例如：\n```xml\n<meta-data\n\tandroid:name=\"aid\"\n\tandroid:value=\"${APP_AID}\" />\n\n<meta-data\n\tandroid:name=\"pid\"\n\tandroid:value=\"${APP_PID}\" />\n```\n\n2.在build.gradle设置productFlavors：\n```groovy\nandroid {\n\tproductFlavors {\n\t\twandoujia {\n\t\t\tmanifestPlaceholders = [APP_AID : 80, APP_PID : 43]\n\t\t}\n\n\t\tyingyongbao {\n\t\t\tmanifestPlaceholders = [APP_AID : 60, APP_PID : 45]\n\t\t}\n\t}\n}\n```\nmanifestPlaceholders是一个数组，可以根据实际需求增减参数\n\n3.最后在AS中Build->Generate Signed APK，最后根据提示打包APK，AS会根据productFlavors生成相应的包","slug":"multiple-channel-packing","published":1,"date":"2015-02-13T16:00:00.000Z","updated":"2023-05-23T03:07:55.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli00ivlb0003z0inda2043hb","content":"<p>Android 市场众多，在打包 App 的时候需要对每个渠道添加不同的参数用于统计，但是针对每个渠道单独打包比较麻烦，所以要考虑使用批量打包。AS 使用 gradle 来构建 android 项目，我们可以利用来进行批量打包操作。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>1. 在 manifest 中找到与渠道相关的参数，增加相应的 PlaceHolder，例如：</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:name</span>=<span class=\"string\">\"aid\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:value</span>=<span class=\"string\">\"${APP_AID}\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:name</span>=<span class=\"string\">\"pid\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:value</span>=<span class=\"string\">\"${APP_PID}\"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>2. 在 build.gradle 设置 productFlavors：</p>\n<figure class=\"highlight groovy\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android {</span><br><span class=\"line\">\tproductFlavors {</span><br><span class=\"line\">\t\twandoujia {</span><br><span class=\"line\">\t\t\tmanifestPlaceholders = [<span class=\"attr\">APP_AID :</span> <span class=\"number\">80</span>, <span class=\"attr\">APP_PID :</span> <span class=\"number\">43</span>]</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tyingyongbao {</span><br><span class=\"line\">\t\t\tmanifestPlaceholders = [<span class=\"attr\">APP_AID :</span> <span class=\"number\">60</span>, <span class=\"attr\">APP_PID :</span> <span class=\"number\">45</span>]</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>manifestPlaceholders 是一个数组，可以根据实际需求增减参数</p>\n<p>3. 最后在 AS 中 Build-&gt;Generate Signed APK，最后根据提示打包 APK，AS 会根据 productFlavors 生成相应的包</p>\n","site":{"data":{}},"excerpt":"<p>Android 市场众多，在打包 App 的时候需要对每个渠道添加不同的参数用于统计，但是针对每个渠道单独打包比较麻烦，所以要考虑使用批量打包。AS 使用 gradle 来构建 android 项目，我们可以利用来进行批量打包操作。</p>","more":"<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>1. 在 manifest 中找到与渠道相关的参数，增加相应的 PlaceHolder，例如：</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:name</span>=<span class=\"string\">\"aid\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:value</span>=<span class=\"string\">\"${APP_AID}\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:name</span>=<span class=\"string\">\"pid\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:value</span>=<span class=\"string\">\"${APP_PID}\"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>2. 在 build.gradle 设置 productFlavors：</p>\n<figure class=\"highlight groovy\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android {</span><br><span class=\"line\">\tproductFlavors {</span><br><span class=\"line\">\t\twandoujia {</span><br><span class=\"line\">\t\t\tmanifestPlaceholders = [<span class=\"attr\">APP_AID :</span> <span class=\"number\">80</span>, <span class=\"attr\">APP_PID :</span> <span class=\"number\">43</span>]</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tyingyongbao {</span><br><span class=\"line\">\t\t\tmanifestPlaceholders = [<span class=\"attr\">APP_AID :</span> <span class=\"number\">60</span>, <span class=\"attr\">APP_PID :</span> <span class=\"number\">45</span>]</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>manifestPlaceholders 是一个数组，可以根据实际需求增减参数</p>\n<p>3. 最后在 AS 中 Build-&gt;Generate Signed APK，最后根据提示打包 APK，AS 会根据 productFlavors 生成相应的包</p>"},{"title":"Android Studio 更新时连接服务器失败问题解决","_content":"\n最近被墙得厉害，连AS都不能自动更新了，最终找到了个比较简单有效的办法。\n<!-- more -->\n\n解决方法很简单，打开AS安装目录下的bin目录，找到&nbsp;`studio64.exe.vmoptions`&nbsp;（32位找&nbsp;`studio.exe.vmoptions`&nbsp;即可）这个文件，往里面添加几行：\n```text\n-Djava.net.preferIPv4Stack=true\n\n-Didea.updates.url=http://dl.google.com/android/studio/patches/updates.xml  \n-Didea.patches.url=http://dl.google.com/android/studio/patches/\n```\n保存退出，重启AS，不出意外就能更新了。","source":"_posts/2015-02-14-andoird-studio-update.md","raw":"---\ntitle: Android Studio更新时连接服务器失败问题解决\ncategory: tools\ntags: [android studio]\n---\n\n最近被墙得厉害，连AS都不能自动更新了，最终找到了个比较简单有效的办法。\n<!-- more -->\n\n解决方法很简单，打开AS安装目录下的bin目录，找到&nbsp;`studio64.exe.vmoptions`&nbsp;（32位找&nbsp;`studio.exe.vmoptions`&nbsp;即可）这个文件，往里面添加几行：\n```text\n-Djava.net.preferIPv4Stack=true\n\n-Didea.updates.url=http://dl.google.com/android/studio/patches/updates.xml  \n-Didea.patches.url=http://dl.google.com/android/studio/patches/\n```\n保存退出，重启AS，不出意外就能更新了。","slug":"andoird-studio-update","published":1,"date":"2015-02-13T16:00:00.000Z","updated":"2023-05-23T03:07:55.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli00ivlf0007z0in51169fu2","content":"<p>最近被墙得厉害，连 AS 都不能自动更新了，最终找到了个比较简单有效的办法。</p>\n<span id=\"more\"></span>\n\n<p>解决方法很简单，打开 AS 安装目录下的 bin 目录，找到 &amp; nbsp;<code>studio64.exe.vmoptions</code>&amp;nbsp;（32 位找 &amp; nbsp;<code>studio.exe.vmoptions</code>&amp;nbsp; 即可）这个文件，往里面添加几行：</p>\n<figure class=\"highlight text\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-Djava.net.preferIPv4Stack=true</span><br><span class=\"line\"></span><br><span class=\"line\">-Didea.updates.url=http://dl.google.com/android/studio/patches/updates.xml  </span><br><span class=\"line\">-Didea.patches.url=http://dl.google.com/android/studio/patches/</span><br></pre></td></tr></tbody></table></figure>\n<p>保存退出，重启 AS，不出意外就能更新了。</p>\n","site":{"data":{}},"excerpt":"<p>最近被墙得厉害，连 AS 都不能自动更新了，最终找到了个比较简单有效的办法。</p>","more":"<p>解决方法很简单，打开 AS 安装目录下的 bin 目录，找到 &amp; nbsp;<code>studio64.exe.vmoptions</code>&amp;nbsp;（32 位找 &amp; nbsp;<code>studio.exe.vmoptions</code>&amp;nbsp; 即可）这个文件，往里面添加几行：</p>\n<figure class=\"highlight text\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-Djava.net.preferIPv4Stack=true</span><br><span class=\"line\"></span><br><span class=\"line\">-Didea.updates.url=http://dl.google.com/android/studio/patches/updates.xml  </span><br><span class=\"line\">-Didea.patches.url=http://dl.google.com/android/studio/patches/</span><br></pre></td></tr></tbody></table></figure>\n<p>保存退出，重启 AS，不出意外就能更新了。</p>"},{"title":"在 Android Studio 中利用 gradle 来自动编译 jni","_content":"\n在最近的Android开发中，项目逐渐从Eclipse迁移到Android Studio中来，google官方现在并未在Android Studio中支持ndk的开发，但是我们可以利用gradle自动编译jni。\n<!-- more -->\n\n### 步骤 ###\n\n1.在新建项目中找到local.properties，在里面加入ndk的路径(ndk必须是r9以上)：\n```text\nndk.dir=E\\:\\\\Android\\\\ndk-r10d\n```\n\n2.在app\\src\\main中新建jni文件夹，在这里面存放要编译的c/c++文件以及Android.mk\n\n3.在app中的build.gradle中加入两个task：ndkBuild和copyJniLibs，第一个task为ndk执行编译，第二个task将编译好的so库copy至jniLibs目录，这样才Android Studio最后打包的时候才会将so库打包进去：\n```groovy\nandroid {\n    compileSdkVersion 21\n    buildToolsVersion \"21.1.2\"\n    defaultConfig {\n        applicationId \"com.xxx.yyy\"\n        versionCode 1\n        versionName '1.0'\n\t    minSdkVersion 10\n\t    targetSdkVersion 21\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles ('proguard-android.txt')\n        }\n    }\n\n    tasks.withType(JavaCompile) {\n        compileTask -> compileTask.dependsOn 'ndkBuild', 'copyJniLibs'\n    }\n\n    sourceSets {\n        main {\n\t        jni.srcDirs = []\n            jniLibs.srcDirs = ['src/main/jniLibs']\n        }\n    }\n}\n\ntask ndkBuild(type: Exec) {\n\tdef ndkDir = project.plugins.findPlugin('com.android.application').sdkHandler.getNdkFolder()\n    commandLine \"$ndkDir/ndk-build.cmd\", '-C', 'src/main/jni',\n\t\t    \"NDK_OUT=$buildDir/ndk/obj\",\n\t\t    \"NDK_APP_DST_DIR=$buildDir/ndk/libs/\\$(TARGET_ARCH_ABI)\"\n}\n\ntask copyJniLibs(type: Copy) {\n    from fileTree(dir: file(buildDir.absolutePath + '/ndk/libs'), include: '**/*.so')\n    into file('src/main/jniLibs')\n}\n```\n\n这两个task不要放在android{}中，放在android{}外即可，否则无法编译。其中*NDK_APP_DST_DIR*为编译后的库存放的文件夹，根据需求自己设定，我在这里是设置为的buildDir下的nkd文件夹\n\n4.最后编译，Android Studo会自动执行ndkBuild和copyJniLibs这两个task\n\nps:也可以使用命令行的方式来执行这两个task\n    \n    $ gradle ndkBuild copyJniLibs\n使用这个命令前，请先找到gradle的目录下bin目录，并添加到环境变量中去","source":"_posts/2015-02-08-use-ndk-in-android-studio.md","raw":"---\ntitle: 在Android Studio中利用gradle来自动编译jni\ncategory: tools\ntags: [android studio, ndk]\n---\n\n在最近的Android开发中，项目逐渐从Eclipse迁移到Android Studio中来，google官方现在并未在Android Studio中支持ndk的开发，但是我们可以利用gradle自动编译jni。\n<!-- more -->\n\n### 步骤 ###\n\n1.在新建项目中找到local.properties，在里面加入ndk的路径(ndk必须是r9以上)：\n```text\nndk.dir=E\\:\\\\Android\\\\ndk-r10d\n```\n\n2.在app\\src\\main中新建jni文件夹，在这里面存放要编译的c/c++文件以及Android.mk\n\n3.在app中的build.gradle中加入两个task：ndkBuild和copyJniLibs，第一个task为ndk执行编译，第二个task将编译好的so库copy至jniLibs目录，这样才Android Studio最后打包的时候才会将so库打包进去：\n```groovy\nandroid {\n    compileSdkVersion 21\n    buildToolsVersion \"21.1.2\"\n    defaultConfig {\n        applicationId \"com.xxx.yyy\"\n        versionCode 1\n        versionName '1.0'\n\t    minSdkVersion 10\n\t    targetSdkVersion 21\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles ('proguard-android.txt')\n        }\n    }\n\n    tasks.withType(JavaCompile) {\n        compileTask -> compileTask.dependsOn 'ndkBuild', 'copyJniLibs'\n    }\n\n    sourceSets {\n        main {\n\t        jni.srcDirs = []\n            jniLibs.srcDirs = ['src/main/jniLibs']\n        }\n    }\n}\n\ntask ndkBuild(type: Exec) {\n\tdef ndkDir = project.plugins.findPlugin('com.android.application').sdkHandler.getNdkFolder()\n    commandLine \"$ndkDir/ndk-build.cmd\", '-C', 'src/main/jni',\n\t\t    \"NDK_OUT=$buildDir/ndk/obj\",\n\t\t    \"NDK_APP_DST_DIR=$buildDir/ndk/libs/\\$(TARGET_ARCH_ABI)\"\n}\n\ntask copyJniLibs(type: Copy) {\n    from fileTree(dir: file(buildDir.absolutePath + '/ndk/libs'), include: '**/*.so')\n    into file('src/main/jniLibs')\n}\n```\n\n这两个task不要放在android{}中，放在android{}外即可，否则无法编译。其中*NDK_APP_DST_DIR*为编译后的库存放的文件夹，根据需求自己设定，我在这里是设置为的buildDir下的nkd文件夹\n\n4.最后编译，Android Studo会自动执行ndkBuild和copyJniLibs这两个task\n\nps:也可以使用命令行的方式来执行这两个task\n    \n    $ gradle ndkBuild copyJniLibs\n使用这个命令前，请先找到gradle的目录下bin目录，并添加到环境变量中去","slug":"use-ndk-in-android-studio","published":1,"date":"2015-02-07T16:00:00.000Z","updated":"2023-05-23T06:11:19.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli00ivlg0009z0in7qzsdo66","content":"<p>在最近的 Android 开发中，项目逐渐从 Eclipse 迁移到 Android Studio 中来，google 官方现在并未在 Android Studio 中支持 ndk 的开发，但是我们可以利用 gradle 自动编译 jni。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>1. 在新建项目中找到 local.properties，在里面加入 ndk 的路径 (ndk 必须是 r9 以上)：</p>\n<figure class=\"highlight text\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ndk.dir=E\\:\\\\Android\\\\ndk-r10d</span><br></pre></td></tr></tbody></table></figure>\n\n<p>2. 在 app\\src\\main 中新建 jni 文件夹，在这里面存放要编译的 c/c++ 文件以及 Android.mk</p>\n<p>3. 在 app 中的 build.gradle 中加入两个 task：ndkBuild 和 copyJniLibs，第一个 task 为 ndk 执行编译，第二个 task 将编译好的 so 库 copy 至 jniLibs 目录，这样才 Android Studio 最后打包的时候才会将 so 库打包进去：</p>\n<figure class=\"highlight groovy\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android {</span><br><span class=\"line\">    compileSdkVersion <span class=\"number\">21</span></span><br><span class=\"line\">    buildToolsVersion <span class=\"string\">\"21.1.2\"</span></span><br><span class=\"line\">    defaultConfig {</span><br><span class=\"line\">        applicationId <span class=\"string\">\"com.xxx.yyy\"</span></span><br><span class=\"line\">        versionCode <span class=\"number\">1</span></span><br><span class=\"line\">        versionName <span class=\"string\">'1.0'</span></span><br><span class=\"line\">\t    minSdkVersion <span class=\"number\">10</span></span><br><span class=\"line\">\t    targetSdkVersion <span class=\"number\">21</span></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    buildTypes {</span><br><span class=\"line\">        release {</span><br><span class=\"line\">            minifyEnabled <span class=\"literal\">false</span></span><br><span class=\"line\">            proguardFiles (<span class=\"string\">'proguard-android.txt'</span>)</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    tasks.withType(JavaCompile) {</span><br><span class=\"line\">        compileTask -&gt; compileTask.dependsOn <span class=\"string\">'ndkBuild'</span>, <span class=\"string\">'copyJniLibs'</span></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    sourceSets {</span><br><span class=\"line\">        main {</span><br><span class=\"line\">\t        jni.srcDirs = []</span><br><span class=\"line\">            jniLibs.srcDirs = [<span class=\"string\">'src/main/jniLibs'</span>]</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">task ndkBuild(<span class=\"attr\">type:</span> Exec) {</span><br><span class=\"line\">\t<span class=\"keyword\">def</span> ndkDir = project.plugins.findPlugin(<span class=\"string\">'com.android.application'</span>).sdkHandler.getNdkFolder()</span><br><span class=\"line\">    commandLine <span class=\"string\">\"$ndkDir/ndk-build.cmd\"</span>, <span class=\"string\">'-C'</span>, <span class=\"string\">'src/main/jni'</span>,</span><br><span class=\"line\">\t\t    <span class=\"string\">\"NDK_OUT=$buildDir/ndk/obj\"</span>,</span><br><span class=\"line\">\t\t    <span class=\"string\">\"NDK_APP_DST_DIR=$buildDir/ndk/libs/\\$(TARGET_ARCH_ABI)\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">task copyJniLibs(<span class=\"attr\">type:</span> Copy) {</span><br><span class=\"line\">    from fileTree(<span class=\"attr\">dir:</span> file(buildDir.absolutePath + <span class=\"string\">'/ndk/libs'</span>), <span class=\"attr\">include:</span> <span class=\"string\">'**/*.so'</span>)</span><br><span class=\"line\">    into file(<span class=\"string\">'src/main/jniLibs'</span>)</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这两个 task 不要放在 android {} 中，放在 android {} 外即可，否则无法编译。其中 <em>NDK_APP_DST_DIR</em> 为编译后的库存放的文件夹，根据需求自己设定，我在这里是设置为的 buildDir 下的 nkd 文件夹</p>\n<p>4. 最后编译，Android Studo 会自动执行 ndkBuild 和 copyJniLibs 这两个 task</p>\n<p>ps: 也可以使用命令行的方式来执行这两个 task</p>\n<pre><code>$ gradle ndkBuild copyJniLibs\n</code></pre>\n<p>使用这个命令前，请先找到 gradle 的目录下 bin 目录，并添加到环境变量中去</p>\n","site":{"data":{}},"excerpt":"<p>在最近的 Android 开发中，项目逐渐从 Eclipse 迁移到 Android Studio 中来，google 官方现在并未在 Android Studio 中支持 ndk 的开发，但是我们可以利用 gradle 自动编译 jni。</p>","more":"<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>1. 在新建项目中找到 local.properties，在里面加入 ndk 的路径 (ndk 必须是 r9 以上)：</p>\n<figure class=\"highlight text\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ndk.dir=E\\:\\\\Android\\\\ndk-r10d</span><br></pre></td></tr></tbody></table></figure>\n\n<p>2. 在 app\\src\\main 中新建 jni 文件夹，在这里面存放要编译的 c/c++ 文件以及 Android.mk</p>\n<p>3. 在 app 中的 build.gradle 中加入两个 task：ndkBuild 和 copyJniLibs，第一个 task 为 ndk 执行编译，第二个 task 将编译好的 so 库 copy 至 jniLibs 目录，这样才 Android Studio 最后打包的时候才会将 so 库打包进去：</p>\n<figure class=\"highlight groovy\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android {</span><br><span class=\"line\">    compileSdkVersion <span class=\"number\">21</span></span><br><span class=\"line\">    buildToolsVersion <span class=\"string\">\"21.1.2\"</span></span><br><span class=\"line\">    defaultConfig {</span><br><span class=\"line\">        applicationId <span class=\"string\">\"com.xxx.yyy\"</span></span><br><span class=\"line\">        versionCode <span class=\"number\">1</span></span><br><span class=\"line\">        versionName <span class=\"string\">'1.0'</span></span><br><span class=\"line\">\t    minSdkVersion <span class=\"number\">10</span></span><br><span class=\"line\">\t    targetSdkVersion <span class=\"number\">21</span></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    buildTypes {</span><br><span class=\"line\">        release {</span><br><span class=\"line\">            minifyEnabled <span class=\"literal\">false</span></span><br><span class=\"line\">            proguardFiles (<span class=\"string\">'proguard-android.txt'</span>)</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    tasks.withType(JavaCompile) {</span><br><span class=\"line\">        compileTask -&gt; compileTask.dependsOn <span class=\"string\">'ndkBuild'</span>, <span class=\"string\">'copyJniLibs'</span></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    sourceSets {</span><br><span class=\"line\">        main {</span><br><span class=\"line\">\t        jni.srcDirs = []</span><br><span class=\"line\">            jniLibs.srcDirs = [<span class=\"string\">'src/main/jniLibs'</span>]</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">task ndkBuild(<span class=\"attr\">type:</span> Exec) {</span><br><span class=\"line\">\t<span class=\"keyword\">def</span> ndkDir = project.plugins.findPlugin(<span class=\"string\">'com.android.application'</span>).sdkHandler.getNdkFolder()</span><br><span class=\"line\">    commandLine <span class=\"string\">\"$ndkDir/ndk-build.cmd\"</span>, <span class=\"string\">'-C'</span>, <span class=\"string\">'src/main/jni'</span>,</span><br><span class=\"line\">\t\t    <span class=\"string\">\"NDK_OUT=$buildDir/ndk/obj\"</span>,</span><br><span class=\"line\">\t\t    <span class=\"string\">\"NDK_APP_DST_DIR=$buildDir/ndk/libs/\\$(TARGET_ARCH_ABI)\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">task copyJniLibs(<span class=\"attr\">type:</span> Copy) {</span><br><span class=\"line\">    from fileTree(<span class=\"attr\">dir:</span> file(buildDir.absolutePath + <span class=\"string\">'/ndk/libs'</span>), <span class=\"attr\">include:</span> <span class=\"string\">'**/*.so'</span>)</span><br><span class=\"line\">    into file(<span class=\"string\">'src/main/jniLibs'</span>)</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这两个 task 不要放在 android {} 中，放在 android {} 外即可，否则无法编译。其中 <em>NDK_APP_DST_DIR</em> 为编译后的库存放的文件夹，根据需求自己设定，我在这里是设置为的 buildDir 下的 nkd 文件夹</p>\n<p>4. 最后编译，Android Studo 会自动执行 ndkBuild 和 copyJniLibs 这两个 task</p>\n<p>ps: 也可以使用命令行的方式来执行这两个 task</p>\n<pre><code>$ gradle ndkBuild copyJniLibs\n</code></pre>\n<p>使用这个命令前，请先找到 gradle 的目录下 bin 目录，并添加到环境变量中去</p>"},{"title":"Android 监听 Home 键","_content":"\nAndroid的Home比较特殊，不能像其他键(如返回键)那样直接用onKeyDown或onKeyUp来监听，需要用其他的方法来实现监听。\n<!-- more -->\n\n在Home键按下时，系统会发出一个广播，我们只需要注册一个Receiver来接收这个广播即可：\n```java\npublic class HomeKeyReceiver extends BroadcastReceiver {\n\tprivate static final String TAG = HomeKeyReceiver.class.getSimpleName();\n\t\n\t/* extra from home key broadcase receiver */\n\tprivate static final String SYSTEM_DIALOG_REASON_EXTRA = \"reason\";\n    /* press home key to go back to home */\n    private static final String SYSTEM_DIALOG_REASON_HOME_KEY = \"homekey\";\n\t/* long press home key to show recent apps */\n    private static final String SYSTEM_DIALOG_REASON_RECENT_APPS = \"recentapps\";\n    /* (long) press home key to show assistant */\n    private static final String SYSTEM_DIALOG_REASON_ASSIST = \"assist\";\n    /* (long) press home key to lock */\n    private static final String SYSTEM_DIALOG_REASON_LOCK = \"lock\";\n\t\n\tprivate Context mContext;\n\t/* listeners used in this broadcast receiver */\n\tprivate OnHomeKeyListener mOnHomeKeyListener;\n\tprivate OnRecentAppListener mOnRecentAppListener;\n\tprivate OnAssistListener mOnAssistListener;\n\tprivate OnLockListener mOnLockListener;\n\t\n\tpublic HomeKeyReceiver(Context context) {\n\t\tmContext = context;\n\t}\n\t\n\t/**\n\t * Interface definition for a callback to be invoked when the reason is \"homekey\".\n\t */\n\tpublic interface OnHomeKeyListener {\n\t\tvoid onKeypressed();\n\t}\n\t\n\t/**\n\t * Interface definition for a callback to be invoked when the reason is \"recentapps\".\n\t */\n\tpublic interface OnRecentAppListener {\n\t\tvoid onKeypressed();\n\t}\n\t\n\t/**\n\t * Interface definition for a callback to be invoked when the reason is \"assist\".\n\t */\n\tpublic interface OnAssistListener {\n\t\tvoid onKeypressed();\n\t}\n\t\n\t/**\n\t * Interface definition for a callback to be invoked when the reason is \"lock\".\n\t */\n\tpublic interface OnLockListener {\n\t\tvoid onKeypressed();\n\t}\n\t\n\t@Override\n\tpublic void onReceive(Context context, Intent intent) {\n\t\tif (intent.getAction().equals(Intent.ACTION_CLOSE_SYSTEM_DIALOGS)) {\n\t\t\tString reason = intent.getStringExtra(SYSTEM_DIALOG_REASON_EXTRA);\n\t\t\tif (TextUtils.isEmpty(reason)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tswitch (reason) {\n\t\t\tcase SYSTEM_DIALOG_REASON_HOME_KEY:\n\t\t\t\tif (mOnHomeKeyListener != null) {\n\t\t\t\t\tmOnHomeKeyListener.onKeypressed();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase SYSTEM_DIALOG_REASON_RECENT_APPS:\n\t\t\t\tif (mOnRecentAppListener != null) {\n\t\t\t\t\tmOnRecentAppListener.onKeypressed();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase SYSTEM_DIALOG_REASON_ASSIST:\n\t\t\t\tif (mOnAssistListener != null) {\n\t\t\t\t\tmOnAssistListener.onKeypressed();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase SYSTEM_DIALOG_REASON_LOCK:\n\t\t\t\tif (mOnLockListener != null) {\n\t\t\t\t\tmOnLockListener.onKeypressed();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tLog.d(TAG, \"other reason: \" + reason);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * Register a callback to be invoked when system dialog reason is \"homekey\".\n\t */\n\tpublic void setOnHomeKeyListener(OnHomeKeyListener l) {\n\t\tmOnHomeKeyListener = l;\n\t}\n\t\n\t/**\n\t * Register a callback to be invoked when system dialog reason is \"recentapps\".\n\t */\n\tpublic void setOnRecentAppListener(OnRecentAppListener l) {\n\t\tmOnRecentAppListener = l;\n\t}\n\t\n\t/**\n\t * Register a callback to be invoked when system dialog reason is \"assist\".\n\t */\n\tpublic void setOnAssistListener(OnAssistListener l) {\n\t\tmOnAssistListener = l;\n\t}\n\t\n\t/**\n\t * Register a callback to be invoked when system dialog reason is \"lock\".\n\t */\n\tpublic void setOnLockListener(OnLockListener l) {\n\t\tmOnLockListener = l;\n\t}\n\n\t/**\n\t * Register the home key boradcasr receiver.\n\t */\n\tpublic void register() {\n\t\tIntentFilter homeFilter = new IntentFilter(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);\n\t\tmContext.registerReceiver(this, homeFilter);\n\t}\n\t\n\t/**\n\t * Unregister the home key boradcasr receiver.\n\t */\n\tpublic void unregister() {\n\t\tmContext.unregisterReceiver(this);\n\t}\n```\n\n由于home键在不同手机上，长/短按有不同的效果，代码列举出常用的几种，其中`homekey`表示短按home键退到桌面。\n\n简单使用：\n```java\nprivate HomeKeyReceiver mHomeKeyReceiver;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n\tsuper.onCreate(savedInstanceState);\n\n\tmHomeKeyReceiver = new HomeKeyReceiver(this);\n\tmHomeKeyReceiver.setOnHomeKeyListener(new OnHomeKeyListener() {\n\t\t@Override\n\t\tpublic void onKeypressed() {\n\t\t\tLog.d(TAG, \"home key pressed\");\n\t\t}\n\t});\n}\n\n@Override\nprotected void onResume() {\n\tsuper.onResume();\n\tmHomeKeyReceiver.register();\n}\n\n@Override\nprotected void onPause() {\n\tsuper.onPause();\n\tmHomeKeyReceiver.unregister();\n}\n\n```\n\n注意：这个Receiver需要在`onResume`中注册，在`onPause`中注销。","source":"_posts/2015-03-16-listen-home-key.md","raw":"---\ntitle: Android监听Home键\ncategory: android\ntags: [home key]\n---\n\nAndroid的Home比较特殊，不能像其他键(如返回键)那样直接用onKeyDown或onKeyUp来监听，需要用其他的方法来实现监听。\n<!-- more -->\n\n在Home键按下时，系统会发出一个广播，我们只需要注册一个Receiver来接收这个广播即可：\n```java\npublic class HomeKeyReceiver extends BroadcastReceiver {\n\tprivate static final String TAG = HomeKeyReceiver.class.getSimpleName();\n\t\n\t/* extra from home key broadcase receiver */\n\tprivate static final String SYSTEM_DIALOG_REASON_EXTRA = \"reason\";\n    /* press home key to go back to home */\n    private static final String SYSTEM_DIALOG_REASON_HOME_KEY = \"homekey\";\n\t/* long press home key to show recent apps */\n    private static final String SYSTEM_DIALOG_REASON_RECENT_APPS = \"recentapps\";\n    /* (long) press home key to show assistant */\n    private static final String SYSTEM_DIALOG_REASON_ASSIST = \"assist\";\n    /* (long) press home key to lock */\n    private static final String SYSTEM_DIALOG_REASON_LOCK = \"lock\";\n\t\n\tprivate Context mContext;\n\t/* listeners used in this broadcast receiver */\n\tprivate OnHomeKeyListener mOnHomeKeyListener;\n\tprivate OnRecentAppListener mOnRecentAppListener;\n\tprivate OnAssistListener mOnAssistListener;\n\tprivate OnLockListener mOnLockListener;\n\t\n\tpublic HomeKeyReceiver(Context context) {\n\t\tmContext = context;\n\t}\n\t\n\t/**\n\t * Interface definition for a callback to be invoked when the reason is \"homekey\".\n\t */\n\tpublic interface OnHomeKeyListener {\n\t\tvoid onKeypressed();\n\t}\n\t\n\t/**\n\t * Interface definition for a callback to be invoked when the reason is \"recentapps\".\n\t */\n\tpublic interface OnRecentAppListener {\n\t\tvoid onKeypressed();\n\t}\n\t\n\t/**\n\t * Interface definition for a callback to be invoked when the reason is \"assist\".\n\t */\n\tpublic interface OnAssistListener {\n\t\tvoid onKeypressed();\n\t}\n\t\n\t/**\n\t * Interface definition for a callback to be invoked when the reason is \"lock\".\n\t */\n\tpublic interface OnLockListener {\n\t\tvoid onKeypressed();\n\t}\n\t\n\t@Override\n\tpublic void onReceive(Context context, Intent intent) {\n\t\tif (intent.getAction().equals(Intent.ACTION_CLOSE_SYSTEM_DIALOGS)) {\n\t\t\tString reason = intent.getStringExtra(SYSTEM_DIALOG_REASON_EXTRA);\n\t\t\tif (TextUtils.isEmpty(reason)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tswitch (reason) {\n\t\t\tcase SYSTEM_DIALOG_REASON_HOME_KEY:\n\t\t\t\tif (mOnHomeKeyListener != null) {\n\t\t\t\t\tmOnHomeKeyListener.onKeypressed();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase SYSTEM_DIALOG_REASON_RECENT_APPS:\n\t\t\t\tif (mOnRecentAppListener != null) {\n\t\t\t\t\tmOnRecentAppListener.onKeypressed();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase SYSTEM_DIALOG_REASON_ASSIST:\n\t\t\t\tif (mOnAssistListener != null) {\n\t\t\t\t\tmOnAssistListener.onKeypressed();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase SYSTEM_DIALOG_REASON_LOCK:\n\t\t\t\tif (mOnLockListener != null) {\n\t\t\t\t\tmOnLockListener.onKeypressed();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tLog.d(TAG, \"other reason: \" + reason);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * Register a callback to be invoked when system dialog reason is \"homekey\".\n\t */\n\tpublic void setOnHomeKeyListener(OnHomeKeyListener l) {\n\t\tmOnHomeKeyListener = l;\n\t}\n\t\n\t/**\n\t * Register a callback to be invoked when system dialog reason is \"recentapps\".\n\t */\n\tpublic void setOnRecentAppListener(OnRecentAppListener l) {\n\t\tmOnRecentAppListener = l;\n\t}\n\t\n\t/**\n\t * Register a callback to be invoked when system dialog reason is \"assist\".\n\t */\n\tpublic void setOnAssistListener(OnAssistListener l) {\n\t\tmOnAssistListener = l;\n\t}\n\t\n\t/**\n\t * Register a callback to be invoked when system dialog reason is \"lock\".\n\t */\n\tpublic void setOnLockListener(OnLockListener l) {\n\t\tmOnLockListener = l;\n\t}\n\n\t/**\n\t * Register the home key boradcasr receiver.\n\t */\n\tpublic void register() {\n\t\tIntentFilter homeFilter = new IntentFilter(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);\n\t\tmContext.registerReceiver(this, homeFilter);\n\t}\n\t\n\t/**\n\t * Unregister the home key boradcasr receiver.\n\t */\n\tpublic void unregister() {\n\t\tmContext.unregisterReceiver(this);\n\t}\n```\n\n由于home键在不同手机上，长/短按有不同的效果，代码列举出常用的几种，其中`homekey`表示短按home键退到桌面。\n\n简单使用：\n```java\nprivate HomeKeyReceiver mHomeKeyReceiver;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n\tsuper.onCreate(savedInstanceState);\n\n\tmHomeKeyReceiver = new HomeKeyReceiver(this);\n\tmHomeKeyReceiver.setOnHomeKeyListener(new OnHomeKeyListener() {\n\t\t@Override\n\t\tpublic void onKeypressed() {\n\t\t\tLog.d(TAG, \"home key pressed\");\n\t\t}\n\t});\n}\n\n@Override\nprotected void onResume() {\n\tsuper.onResume();\n\tmHomeKeyReceiver.register();\n}\n\n@Override\nprotected void onPause() {\n\tsuper.onPause();\n\tmHomeKeyReceiver.unregister();\n}\n\n```\n\n注意：这个Receiver需要在`onResume`中注册，在`onPause`中注销。","slug":"listen-home-key","published":1,"date":"2015-03-15T16:00:00.000Z","updated":"2023-05-23T03:07:55.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli00ivlh000az0incnm6aa82","content":"<p>Android 的 Home 比较特殊，不能像其他键 (如返回键) 那样直接用 onKeyDown 或 onKeyUp 来监听，需要用其他的方法来实现监听。</p>\n<span id=\"more\"></span>\n\n<p>在 Home 键按下时，系统会发出一个广播，我们只需要注册一个 Receiver 来接收这个广播即可：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HomeKeyReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BroadcastReceiver</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">TAG</span> <span class=\"operator\">=</span> HomeKeyReceiver.class.getSimpleName();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/* extra from home key broadcase receiver */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">SYSTEM_DIALOG_REASON_EXTRA</span> <span class=\"operator\">=</span> <span class=\"string\">\"reason\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">/* press home key to go back to home */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">SYSTEM_DIALOG_REASON_HOME_KEY</span> <span class=\"operator\">=</span> <span class=\"string\">\"homekey\"</span>;</span><br><span class=\"line\">\t<span class=\"comment\">/* long press home key to show recent apps */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">SYSTEM_DIALOG_REASON_RECENT_APPS</span> <span class=\"operator\">=</span> <span class=\"string\">\"recentapps\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">/* (long) press home key to show assistant */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">SYSTEM_DIALOG_REASON_ASSIST</span> <span class=\"operator\">=</span> <span class=\"string\">\"assist\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">/* (long) press home key to lock */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">SYSTEM_DIALOG_REASON_LOCK</span> <span class=\"operator\">=</span> <span class=\"string\">\"lock\"</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Context mContext;</span><br><span class=\"line\">\t<span class=\"comment\">/* listeners used in this broadcast receiver */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> OnHomeKeyListener mOnHomeKeyListener;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> OnRecentAppListener mOnRecentAppListener;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> OnAssistListener mOnAssistListener;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> OnLockListener mOnLockListener;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">HomeKeyReceiver</span><span class=\"params\">(Context context)</span> {</span><br><span class=\"line\">\t\tmContext = context;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Interface definition for a callback to be invoked when the reason is \"homekey\".</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">OnHomeKeyListener</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">void</span> <span class=\"title function_\">onKeypressed</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Interface definition for a callback to be invoked when the reason is \"recentapps\".</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">OnRecentAppListener</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">void</span> <span class=\"title function_\">onKeypressed</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Interface definition for a callback to be invoked when the reason is \"assist\".</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">OnAssistListener</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">void</span> <span class=\"title function_\">onKeypressed</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Interface definition for a callback to be invoked when the reason is \"lock\".</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">OnLockListener</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">void</span> <span class=\"title function_\">onKeypressed</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (intent.getAction().equals(Intent.ACTION_CLOSE_SYSTEM_DIALOGS)) {</span><br><span class=\"line\">\t\t\t<span class=\"type\">String</span> <span class=\"variable\">reason</span> <span class=\"operator\">=</span> intent.getStringExtra(SYSTEM_DIALOG_REASON_EXTRA);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (TextUtils.isEmpty(reason)) {</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t}</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">switch</span> (reason) {</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> SYSTEM_DIALOG_REASON_HOME_KEY:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (mOnHomeKeyListener != <span class=\"literal\">null</span>) {</span><br><span class=\"line\">\t\t\t\t\tmOnHomeKeyListener.onKeypressed();</span><br><span class=\"line\">\t\t\t\t}</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> SYSTEM_DIALOG_REASON_RECENT_APPS:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (mOnRecentAppListener != <span class=\"literal\">null</span>) {</span><br><span class=\"line\">\t\t\t\t\tmOnRecentAppListener.onKeypressed();</span><br><span class=\"line\">\t\t\t\t}</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> SYSTEM_DIALOG_REASON_ASSIST:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (mOnAssistListener != <span class=\"literal\">null</span>) {</span><br><span class=\"line\">\t\t\t\t\tmOnAssistListener.onKeypressed();</span><br><span class=\"line\">\t\t\t\t}</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> SYSTEM_DIALOG_REASON_LOCK:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (mOnLockListener != <span class=\"literal\">null</span>) {</span><br><span class=\"line\">\t\t\t\t\tmOnLockListener.onKeypressed();</span><br><span class=\"line\">\t\t\t\t}</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\tLog.d(TAG, <span class=\"string\">\"other reason: \"</span> + reason);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t}</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Register a callback to be invoked when system dialog reason is \"homekey\".</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setOnHomeKeyListener</span><span class=\"params\">(OnHomeKeyListener l)</span> {</span><br><span class=\"line\">\t\tmOnHomeKeyListener = l;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Register a callback to be invoked when system dialog reason is \"recentapps\".</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setOnRecentAppListener</span><span class=\"params\">(OnRecentAppListener l)</span> {</span><br><span class=\"line\">\t\tmOnRecentAppListener = l;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Register a callback to be invoked when system dialog reason is \"assist\".</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setOnAssistListener</span><span class=\"params\">(OnAssistListener l)</span> {</span><br><span class=\"line\">\t\tmOnAssistListener = l;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Register a callback to be invoked when system dialog reason is \"lock\".</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setOnLockListener</span><span class=\"params\">(OnLockListener l)</span> {</span><br><span class=\"line\">\t\tmOnLockListener = l;</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Register the home key boradcasr receiver.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">register</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t\t<span class=\"type\">IntentFilter</span> <span class=\"variable\">homeFilter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IntentFilter</span>(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);</span><br><span class=\"line\">\t\tmContext.registerReceiver(<span class=\"built_in\">this</span>, homeFilter);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Unregister the home key boradcasr receiver.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unregister</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t\tmContext.unregisterReceiver(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">\t}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>由于 home 键在不同手机上，长 / 短按有不同的效果，代码列举出常用的几种，其中 <code>homekey</code> 表示短按 home 键退到桌面。</p>\n<p>简单使用：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> HomeKeyReceiver mHomeKeyReceiver;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> {</span><br><span class=\"line\">\t<span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">\tmHomeKeyReceiver = <span class=\"keyword\">new</span> <span class=\"title class_\">HomeKeyReceiver</span>(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">\tmHomeKeyReceiver.setOnHomeKeyListener(<span class=\"keyword\">new</span> <span class=\"title class_\">OnHomeKeyListener</span>() {</span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onKeypressed</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t\t\tLog.d(TAG, <span class=\"string\">\"home key pressed\"</span>);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t});</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onResume</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t<span class=\"built_in\">super</span>.onResume();</span><br><span class=\"line\">\tmHomeKeyReceiver.register();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onPause</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t<span class=\"built_in\">super</span>.onPause();</span><br><span class=\"line\">\tmHomeKeyReceiver.unregister();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<p>注意：这个 Receiver 需要在 <code>onResume</code> 中注册，在 <code>onPause</code> 中注销。</p>\n","site":{"data":{}},"excerpt":"<p>Android 的 Home 比较特殊，不能像其他键 (如返回键) 那样直接用 onKeyDown 或 onKeyUp 来监听，需要用其他的方法来实现监听。</p>","more":"<p>在 Home 键按下时，系统会发出一个广播，我们只需要注册一个 Receiver 来接收这个广播即可：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HomeKeyReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BroadcastReceiver</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">TAG</span> <span class=\"operator\">=</span> HomeKeyReceiver.class.getSimpleName();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/* extra from home key broadcase receiver */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">SYSTEM_DIALOG_REASON_EXTRA</span> <span class=\"operator\">=</span> <span class=\"string\">\"reason\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">/* press home key to go back to home */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">SYSTEM_DIALOG_REASON_HOME_KEY</span> <span class=\"operator\">=</span> <span class=\"string\">\"homekey\"</span>;</span><br><span class=\"line\">\t<span class=\"comment\">/* long press home key to show recent apps */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">SYSTEM_DIALOG_REASON_RECENT_APPS</span> <span class=\"operator\">=</span> <span class=\"string\">\"recentapps\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">/* (long) press home key to show assistant */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">SYSTEM_DIALOG_REASON_ASSIST</span> <span class=\"operator\">=</span> <span class=\"string\">\"assist\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">/* (long) press home key to lock */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">SYSTEM_DIALOG_REASON_LOCK</span> <span class=\"operator\">=</span> <span class=\"string\">\"lock\"</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Context mContext;</span><br><span class=\"line\">\t<span class=\"comment\">/* listeners used in this broadcast receiver */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> OnHomeKeyListener mOnHomeKeyListener;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> OnRecentAppListener mOnRecentAppListener;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> OnAssistListener mOnAssistListener;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> OnLockListener mOnLockListener;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">HomeKeyReceiver</span><span class=\"params\">(Context context)</span> {</span><br><span class=\"line\">\t\tmContext = context;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Interface definition for a callback to be invoked when the reason is \"homekey\".</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">OnHomeKeyListener</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">void</span> <span class=\"title function_\">onKeypressed</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Interface definition for a callback to be invoked when the reason is \"recentapps\".</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">OnRecentAppListener</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">void</span> <span class=\"title function_\">onKeypressed</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Interface definition for a callback to be invoked when the reason is \"assist\".</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">OnAssistListener</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">void</span> <span class=\"title function_\">onKeypressed</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Interface definition for a callback to be invoked when the reason is \"lock\".</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">OnLockListener</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">void</span> <span class=\"title function_\">onKeypressed</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (intent.getAction().equals(Intent.ACTION_CLOSE_SYSTEM_DIALOGS)) {</span><br><span class=\"line\">\t\t\t<span class=\"type\">String</span> <span class=\"variable\">reason</span> <span class=\"operator\">=</span> intent.getStringExtra(SYSTEM_DIALOG_REASON_EXTRA);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (TextUtils.isEmpty(reason)) {</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t}</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">switch</span> (reason) {</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> SYSTEM_DIALOG_REASON_HOME_KEY:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (mOnHomeKeyListener != <span class=\"literal\">null</span>) {</span><br><span class=\"line\">\t\t\t\t\tmOnHomeKeyListener.onKeypressed();</span><br><span class=\"line\">\t\t\t\t}</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> SYSTEM_DIALOG_REASON_RECENT_APPS:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (mOnRecentAppListener != <span class=\"literal\">null</span>) {</span><br><span class=\"line\">\t\t\t\t\tmOnRecentAppListener.onKeypressed();</span><br><span class=\"line\">\t\t\t\t}</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> SYSTEM_DIALOG_REASON_ASSIST:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (mOnAssistListener != <span class=\"literal\">null</span>) {</span><br><span class=\"line\">\t\t\t\t\tmOnAssistListener.onKeypressed();</span><br><span class=\"line\">\t\t\t\t}</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> SYSTEM_DIALOG_REASON_LOCK:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (mOnLockListener != <span class=\"literal\">null</span>) {</span><br><span class=\"line\">\t\t\t\t\tmOnLockListener.onKeypressed();</span><br><span class=\"line\">\t\t\t\t}</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\tLog.d(TAG, <span class=\"string\">\"other reason: \"</span> + reason);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t}</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Register a callback to be invoked when system dialog reason is \"homekey\".</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setOnHomeKeyListener</span><span class=\"params\">(OnHomeKeyListener l)</span> {</span><br><span class=\"line\">\t\tmOnHomeKeyListener = l;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Register a callback to be invoked when system dialog reason is \"recentapps\".</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setOnRecentAppListener</span><span class=\"params\">(OnRecentAppListener l)</span> {</span><br><span class=\"line\">\t\tmOnRecentAppListener = l;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Register a callback to be invoked when system dialog reason is \"assist\".</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setOnAssistListener</span><span class=\"params\">(OnAssistListener l)</span> {</span><br><span class=\"line\">\t\tmOnAssistListener = l;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Register a callback to be invoked when system dialog reason is \"lock\".</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setOnLockListener</span><span class=\"params\">(OnLockListener l)</span> {</span><br><span class=\"line\">\t\tmOnLockListener = l;</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Register the home key boradcasr receiver.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">register</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t\t<span class=\"type\">IntentFilter</span> <span class=\"variable\">homeFilter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IntentFilter</span>(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);</span><br><span class=\"line\">\t\tmContext.registerReceiver(<span class=\"built_in\">this</span>, homeFilter);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Unregister the home key boradcasr receiver.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unregister</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t\tmContext.unregisterReceiver(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">\t}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>由于 home 键在不同手机上，长 / 短按有不同的效果，代码列举出常用的几种，其中 <code>homekey</code> 表示短按 home 键退到桌面。</p>\n<p>简单使用：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> HomeKeyReceiver mHomeKeyReceiver;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> {</span><br><span class=\"line\">\t<span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">\tmHomeKeyReceiver = <span class=\"keyword\">new</span> <span class=\"title class_\">HomeKeyReceiver</span>(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">\tmHomeKeyReceiver.setOnHomeKeyListener(<span class=\"keyword\">new</span> <span class=\"title class_\">OnHomeKeyListener</span>() {</span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onKeypressed</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t\t\tLog.d(TAG, <span class=\"string\">\"home key pressed\"</span>);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t});</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onResume</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t<span class=\"built_in\">super</span>.onResume();</span><br><span class=\"line\">\tmHomeKeyReceiver.register();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onPause</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t<span class=\"built_in\">super</span>.onPause();</span><br><span class=\"line\">\tmHomeKeyReceiver.unregister();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<p>注意：这个 Receiver 需要在 <code>onResume</code> 中注册，在 <code>onPause</code> 中注销。</p>"},{"layout":"post","title":"Android App Uninstall Watcher","_content":"\n很多应用在卸载后都会弹出一个网页做用户卸载反馈，这就需要监听App的卸载，但是应用一旦卸载就不会再执行任何程序了，如何才能弹出网页，答案就是在应用开启时就fork出一个子进程来，在进程中对App进行卸载监听。在linux中有个东西叫inotify，可以对指定的文件进行监听（包括修改，删除等等），基本的流程就是inotify_init->inotify_add_watch->inotify_event，在inotify_event读取操作的时候是阻塞的，一直会等到指定的文件变动后才会往下执行。\n<!-- more -->\n```c\nint main(int argc, char *argv[])\n{\n\tchar *app_dir = \"/data/data/com.xx.yy\";\n\tchar *watch_file_path = str_stitching(app_dir, \"/uninstall.watch\");\n\n\tpid_t pid = fork();\n\tif (pid < 0)\n\t{\n\t\treturn;\n\t}\n\telse if (pid == 0)\n\t{\n\t\t/* inotify init */\n\t\tint fd = inotify_init();\n\t\tif (fd < 0)\n\t\t{\n\t\t\texit(EXIT_FAILURE);\n\t\t}\n\n\t\tint w_fd = open(watch_file_path, O_RDWR | O_CREAT | O_TRUNC,\n\t\t\t\tS_IRWXU | S_IRWXG | S_IRWXO);\n\t\tif (w_fd < 0)\n\t\t{\n\t\t\texit(EXIT_FAILURE);\n\t\t}\n\n\t\tclose(w_fd);\n\n\t\t/* add watch in inotify */\n\t\tint watch_fd = inotify_add_watch(fd, watch_file_path, IN_DELETE);\n\t\tif (watch_fd < 0)\n\t\t{\n\t\t\texit(EXIT_FAILURE);\n\t\t}\n\n\t\tvoid *p_buf = malloc(sizeof(struct inotify_event));\n\t\tif (p_buf == NULL)\n\t\t{\n\t\t\tLOGD(LOG_TAG, \"malloc inotify event failed\");\n\t\t\texit(EXIT_FAILURE);\n\t\t}\n\n\t\t/* read will block process */\n\t\tread(fd, p_buf, sizeof(struct inotify_event));\n\n\t\tfree(p_buf);\n\t\tinotify_rm_watch(fd, IN_DELETE);\n\n\t\topen_browser(url);\n\t}\n}\n```\n\n与[App Daemon][1]一样，使用命令行的方式来调用wathcer，所有这里也`int main(int argc, char *argv[])`，最终将这个c文件编译成可执行文件。为了要监听某个文件的删除，首先在/data/data/<packagename>/下新建了一个uninstall.watch文件，在后面我们将对此文件进行监听，然后同样的，为了不妨碍主进程，这里fork出一个子进程，在子进程里面进行操作。接下来是关键的地方：调用`inotify_init()`初始化inotify，接着将刚刚新建的uninstall.watch文件加入`inotify_add_watch(fd, watch_file_path, IN_DELETE)`中监听，这里是监听该文件的删除（第三个参数还可以是IN_CREATE, IN_MODIFY, IN_MOVED_TO等等，根据需求更改），接下来就是读取`read(fd, p_buf, sizeof(struct inotify_event))`，这个函数会一直阻塞直到条件满足才会继续往下执行，最后释放并加入打开浏览器。打开浏览器也比较简单了:\n```c\n/* open browser with specified url */\nvoid open_browser(char *url)\n{\n\t/* the url cannot be null */\n\tif (url == NULL || strlen(url) < 4) {\n\t\treturn;\n\t}\n\n\t/* get the sdk version */\n\tchar value[8] = \"\";\n\t__system_property_get(\"ro.build.version.sdk\", value);\n\n\tint version = atoi(value);\n\t/* is the version is greater than 17 */\n\tif (version >= 17 || version == 0)\n\t{\n\t\texeclp(\"am\", \"am\", \"start\", \"--user\", \"0\",\n\t\t\t\t\"-a\", \"android.intent.action.VIEW\", \"-d\", url, (char *)NULL);\n\t}\n\telse\n\t{\n\t\texeclp(\"am\", \"am\", \"start\", \"-a\", \"android.intent.action.VIEW\", \"-d\", url, (char *)NULL);\n\t}\n}\n```\n和[App Daemon][1]类似，也是使用execlp来调用am命令打开默认浏览器，最后就会弹出一个指定的网页了。\n　　以上是卸载监听的基本流程，但我在实际操作过程中遇到了比如调试应用，实际上是覆盖，但这时候也会弹出网页等等，所有在子进程中的操作有所改动和优化，并在打开浏览器前使用了[libcurl][2]请求服务器，以满足不需要打开网页的需求，具体请查看[wathcer.c][3]。\n\nps:此方法和[App Daemon][1]一样由于系统原因不能适配所有手机，请注意。\n\n[1]: http://coolerfall.com/android/android-app-daemon\n[2]: http://curl.haxx.se/libcurl/\n[3]: https://github.com/Coolerfall/Android-AppUninstallWatcher/blob/master/app/src/main/jni/watcher/watcher.c","source":"_posts/2015-03-25-android-app-uninstall-watcher.md","raw":"---\nlayout: post\ntitle: Android App Uninstall Watcher\ncategory: android\ntags: [ndk]\n---\n\n很多应用在卸载后都会弹出一个网页做用户卸载反馈，这就需要监听App的卸载，但是应用一旦卸载就不会再执行任何程序了，如何才能弹出网页，答案就是在应用开启时就fork出一个子进程来，在进程中对App进行卸载监听。在linux中有个东西叫inotify，可以对指定的文件进行监听（包括修改，删除等等），基本的流程就是inotify_init->inotify_add_watch->inotify_event，在inotify_event读取操作的时候是阻塞的，一直会等到指定的文件变动后才会往下执行。\n<!-- more -->\n```c\nint main(int argc, char *argv[])\n{\n\tchar *app_dir = \"/data/data/com.xx.yy\";\n\tchar *watch_file_path = str_stitching(app_dir, \"/uninstall.watch\");\n\n\tpid_t pid = fork();\n\tif (pid < 0)\n\t{\n\t\treturn;\n\t}\n\telse if (pid == 0)\n\t{\n\t\t/* inotify init */\n\t\tint fd = inotify_init();\n\t\tif (fd < 0)\n\t\t{\n\t\t\texit(EXIT_FAILURE);\n\t\t}\n\n\t\tint w_fd = open(watch_file_path, O_RDWR | O_CREAT | O_TRUNC,\n\t\t\t\tS_IRWXU | S_IRWXG | S_IRWXO);\n\t\tif (w_fd < 0)\n\t\t{\n\t\t\texit(EXIT_FAILURE);\n\t\t}\n\n\t\tclose(w_fd);\n\n\t\t/* add watch in inotify */\n\t\tint watch_fd = inotify_add_watch(fd, watch_file_path, IN_DELETE);\n\t\tif (watch_fd < 0)\n\t\t{\n\t\t\texit(EXIT_FAILURE);\n\t\t}\n\n\t\tvoid *p_buf = malloc(sizeof(struct inotify_event));\n\t\tif (p_buf == NULL)\n\t\t{\n\t\t\tLOGD(LOG_TAG, \"malloc inotify event failed\");\n\t\t\texit(EXIT_FAILURE);\n\t\t}\n\n\t\t/* read will block process */\n\t\tread(fd, p_buf, sizeof(struct inotify_event));\n\n\t\tfree(p_buf);\n\t\tinotify_rm_watch(fd, IN_DELETE);\n\n\t\topen_browser(url);\n\t}\n}\n```\n\n与[App Daemon][1]一样，使用命令行的方式来调用wathcer，所有这里也`int main(int argc, char *argv[])`，最终将这个c文件编译成可执行文件。为了要监听某个文件的删除，首先在/data/data/<packagename>/下新建了一个uninstall.watch文件，在后面我们将对此文件进行监听，然后同样的，为了不妨碍主进程，这里fork出一个子进程，在子进程里面进行操作。接下来是关键的地方：调用`inotify_init()`初始化inotify，接着将刚刚新建的uninstall.watch文件加入`inotify_add_watch(fd, watch_file_path, IN_DELETE)`中监听，这里是监听该文件的删除（第三个参数还可以是IN_CREATE, IN_MODIFY, IN_MOVED_TO等等，根据需求更改），接下来就是读取`read(fd, p_buf, sizeof(struct inotify_event))`，这个函数会一直阻塞直到条件满足才会继续往下执行，最后释放并加入打开浏览器。打开浏览器也比较简单了:\n```c\n/* open browser with specified url */\nvoid open_browser(char *url)\n{\n\t/* the url cannot be null */\n\tif (url == NULL || strlen(url) < 4) {\n\t\treturn;\n\t}\n\n\t/* get the sdk version */\n\tchar value[8] = \"\";\n\t__system_property_get(\"ro.build.version.sdk\", value);\n\n\tint version = atoi(value);\n\t/* is the version is greater than 17 */\n\tif (version >= 17 || version == 0)\n\t{\n\t\texeclp(\"am\", \"am\", \"start\", \"--user\", \"0\",\n\t\t\t\t\"-a\", \"android.intent.action.VIEW\", \"-d\", url, (char *)NULL);\n\t}\n\telse\n\t{\n\t\texeclp(\"am\", \"am\", \"start\", \"-a\", \"android.intent.action.VIEW\", \"-d\", url, (char *)NULL);\n\t}\n}\n```\n和[App Daemon][1]类似，也是使用execlp来调用am命令打开默认浏览器，最后就会弹出一个指定的网页了。\n　　以上是卸载监听的基本流程，但我在实际操作过程中遇到了比如调试应用，实际上是覆盖，但这时候也会弹出网页等等，所有在子进程中的操作有所改动和优化，并在打开浏览器前使用了[libcurl][2]请求服务器，以满足不需要打开网页的需求，具体请查看[wathcer.c][3]。\n\nps:此方法和[App Daemon][1]一样由于系统原因不能适配所有手机，请注意。\n\n[1]: http://coolerfall.com/android/android-app-daemon\n[2]: http://curl.haxx.se/libcurl/\n[3]: https://github.com/Coolerfall/Android-AppUninstallWatcher/blob/master/app/src/main/jni/watcher/watcher.c","slug":"android-app-uninstall-watcher","published":1,"date":"2015-03-24T16:00:00.000Z","updated":"2023-05-23T03:07:55.015Z","comments":1,"photos":[],"link":"","_id":"cli00ivli000dz0inbn3e0020","content":"<p>很多应用在卸载后都会弹出一个网页做用户卸载反馈，这就需要监听 App 的卸载，但是应用一旦卸载就不会再执行任何程序了，如何才能弹出网页，答案就是在应用开启时就 fork 出一个子进程来，在进程中对 App 进行卸载监听。在 linux 中有个东西叫 inotify，可以对指定的文件进行监听（包括修改，删除等等），基本的流程就是 inotify_init-&gt;inotify_add_watch-&gt;inotify_event，在 inotify_event 读取操作的时候是阻塞的，一直会等到指定的文件变动后才会往下执行。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"type\">char</span> *app_dir = <span class=\"string\">\"/data/data/com.xx.yy\"</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> *watch_file_path = str_stitching(app_dir, <span class=\"string\">\"/uninstall.watch\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">pid_t</span> pid = fork();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pid &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\t<span class=\"comment\">/* inotify init */</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> fd = inotify_init();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (fd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t{</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> w_fd = open(watch_file_path, O_RDWR | O_CREAT | O_TRUNC,</span><br><span class=\"line\">\t\t\t\tS_IRWXU | S_IRWXG | S_IRWXO);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (w_fd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t{</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tclose(w_fd);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/* add watch in inotify */</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> watch_fd = inotify_add_watch(fd, watch_file_path, IN_DELETE);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (watch_fd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t{</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">void</span> *p_buf = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> inotify_event));</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (p_buf == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t{</span><br><span class=\"line\">\t\t\tLOGD(LOG_TAG, <span class=\"string\">\"malloc inotify event failed\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/* read will block process */</span></span><br><span class=\"line\">\t\tread(fd, p_buf, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> inotify_event));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">free</span>(p_buf);</span><br><span class=\"line\">\t\tinotify_rm_watch(fd, IN_DELETE);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\topen_browser(url);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>与 <a href=\"http://coolerfall.com/android/android-app-daemon\">App Daemon</a> 一样，使用命令行的方式来调用 wathcer，所有这里也 <code>int main(int argc, char *argv[])</code>，最终将这个 c 文件编译成可执行文件。为了要监听某个文件的删除，首先在 /data/data/<packagename>/ 下新建了一个 uninstall.watch 文件，在后面我们将对此文件进行监听，然后同样的，为了不妨碍主进程，这里 fork 出一个子进程，在子进程里面进行操作。接下来是关键的地方：调用 <code>inotify_init()</code> 初始化 inotify，接着将刚刚新建的 uninstall.watch 文件加入 <code>inotify_add_watch(fd, watch_file_path, IN_DELETE)</code> 中监听，这里是监听该文件的删除（第三个参数还可以是 IN_CREATE, IN_MODIFY, IN_MOVED_TO 等等，根据需求更改），接下来就是读取 <code>read(fd, p_buf, sizeof(struct inotify_event))</code>，这个函数会一直阻塞直到条件满足才会继续往下执行，最后释放并加入打开浏览器。打开浏览器也比较简单了:</packagename></p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* open browser with specified url */</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">open_browser</span><span class=\"params\">(<span class=\"type\">char</span> *url)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"comment\">/* the url cannot be null */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (url == <span class=\"literal\">NULL</span> || <span class=\"built_in\">strlen</span>(url) &lt; <span class=\"number\">4</span>) {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* get the sdk version */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> value[<span class=\"number\">8</span>] = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t__system_property_get(<span class=\"string\">\"ro.build.version.sdk\"</span>, value);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> version = atoi(value);</span><br><span class=\"line\">\t<span class=\"comment\">/* is the version is greater than 17 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (version &gt;= <span class=\"number\">17</span> || version == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\texeclp(<span class=\"string\">\"am\"</span>, <span class=\"string\">\"am\"</span>, <span class=\"string\">\"start\"</span>, <span class=\"string\">\"--user\"</span>, <span class=\"string\">\"0\"</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">\"-a\"</span>, <span class=\"string\">\"android.intent.action.VIEW\"</span>, <span class=\"string\">\"-d\"</span>, url, (<span class=\"type\">char</span> *)<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\texeclp(<span class=\"string\">\"am\"</span>, <span class=\"string\">\"am\"</span>, <span class=\"string\">\"start\"</span>, <span class=\"string\">\"-a\"</span>, <span class=\"string\">\"android.intent.action.VIEW\"</span>, <span class=\"string\">\"-d\"</span>, url, (<span class=\"type\">char</span> *)<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>和 <a href=\"http://coolerfall.com/android/android-app-daemon\">App Daemon</a> 类似，也是使用 execlp 来调用 am 命令打开默认浏览器，最后就会弹出一个指定的网页了。<br>　　以上是卸载监听的基本流程，但我在实际操作过程中遇到了比如调试应用，实际上是覆盖，但这时候也会弹出网页等等，所有在子进程中的操作有所改动和优化，并在打开浏览器前使用了 <a href=\"http://curl.haxx.se/libcurl/\">libcurl</a> 请求服务器，以满足不需要打开网页的需求，具体请查看 <a href=\"https://github.com/Coolerfall/Android-AppUninstallWatcher/blob/master/app/src/main/jni/watcher/watcher.c\">wathcer.c</a>。</p>\n<p>ps: 此方法和 <a href=\"http://coolerfall.com/android/android-app-daemon\">App Daemon</a> 一样由于系统原因不能适配所有手机，请注意。</p>\n","site":{"data":{}},"excerpt":"<p>很多应用在卸载后都会弹出一个网页做用户卸载反馈，这就需要监听 App 的卸载，但是应用一旦卸载就不会再执行任何程序了，如何才能弹出网页，答案就是在应用开启时就 fork 出一个子进程来，在进程中对 App 进行卸载监听。在 linux 中有个东西叫 inotify，可以对指定的文件进行监听（包括修改，删除等等），基本的流程就是 inotify_init-&gt;inotify_add_watch-&gt;inotify_event，在 inotify_event 读取操作的时候是阻塞的，一直会等到指定的文件变动后才会往下执行。</p>","more":"<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"type\">char</span> *app_dir = <span class=\"string\">\"/data/data/com.xx.yy\"</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> *watch_file_path = str_stitching(app_dir, <span class=\"string\">\"/uninstall.watch\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">pid_t</span> pid = fork();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pid &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\t<span class=\"comment\">/* inotify init */</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> fd = inotify_init();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (fd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t{</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> w_fd = open(watch_file_path, O_RDWR | O_CREAT | O_TRUNC,</span><br><span class=\"line\">\t\t\t\tS_IRWXU | S_IRWXG | S_IRWXO);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (w_fd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t{</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tclose(w_fd);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/* add watch in inotify */</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> watch_fd = inotify_add_watch(fd, watch_file_path, IN_DELETE);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (watch_fd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t{</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">void</span> *p_buf = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> inotify_event));</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (p_buf == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t{</span><br><span class=\"line\">\t\t\tLOGD(LOG_TAG, <span class=\"string\">\"malloc inotify event failed\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/* read will block process */</span></span><br><span class=\"line\">\t\tread(fd, p_buf, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> inotify_event));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">free</span>(p_buf);</span><br><span class=\"line\">\t\tinotify_rm_watch(fd, IN_DELETE);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\topen_browser(url);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>与 <a href=\"http://coolerfall.com/android/android-app-daemon\">App Daemon</a> 一样，使用命令行的方式来调用 wathcer，所有这里也 <code>int main(int argc, char *argv[])</code>，最终将这个 c 文件编译成可执行文件。为了要监听某个文件的删除，首先在 /data/data/<packagename>/ 下新建了一个 uninstall.watch 文件，在后面我们将对此文件进行监听，然后同样的，为了不妨碍主进程，这里 fork 出一个子进程，在子进程里面进行操作。接下来是关键的地方：调用 <code>inotify_init()</code> 初始化 inotify，接着将刚刚新建的 uninstall.watch 文件加入 <code>inotify_add_watch(fd, watch_file_path, IN_DELETE)</code> 中监听，这里是监听该文件的删除（第三个参数还可以是 IN_CREATE, IN_MODIFY, IN_MOVED_TO 等等，根据需求更改），接下来就是读取 <code>read(fd, p_buf, sizeof(struct inotify_event))</code>，这个函数会一直阻塞直到条件满足才会继续往下执行，最后释放并加入打开浏览器。打开浏览器也比较简单了:</packagename></p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* open browser with specified url */</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">open_browser</span><span class=\"params\">(<span class=\"type\">char</span> *url)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"comment\">/* the url cannot be null */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (url == <span class=\"literal\">NULL</span> || <span class=\"built_in\">strlen</span>(url) &lt; <span class=\"number\">4</span>) {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* get the sdk version */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> value[<span class=\"number\">8</span>] = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t__system_property_get(<span class=\"string\">\"ro.build.version.sdk\"</span>, value);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> version = atoi(value);</span><br><span class=\"line\">\t<span class=\"comment\">/* is the version is greater than 17 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (version &gt;= <span class=\"number\">17</span> || version == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\texeclp(<span class=\"string\">\"am\"</span>, <span class=\"string\">\"am\"</span>, <span class=\"string\">\"start\"</span>, <span class=\"string\">\"--user\"</span>, <span class=\"string\">\"0\"</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">\"-a\"</span>, <span class=\"string\">\"android.intent.action.VIEW\"</span>, <span class=\"string\">\"-d\"</span>, url, (<span class=\"type\">char</span> *)<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\texeclp(<span class=\"string\">\"am\"</span>, <span class=\"string\">\"am\"</span>, <span class=\"string\">\"start\"</span>, <span class=\"string\">\"-a\"</span>, <span class=\"string\">\"android.intent.action.VIEW\"</span>, <span class=\"string\">\"-d\"</span>, url, (<span class=\"type\">char</span> *)<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>和 <a href=\"http://coolerfall.com/android/android-app-daemon\">App Daemon</a> 类似，也是使用 execlp 来调用 am 命令打开默认浏览器，最后就会弹出一个指定的网页了。<br>　　以上是卸载监听的基本流程，但我在实际操作过程中遇到了比如调试应用，实际上是覆盖，但这时候也会弹出网页等等，所有在子进程中的操作有所改动和优化，并在打开浏览器前使用了 <a href=\"http://curl.haxx.se/libcurl/\">libcurl</a> 请求服务器，以满足不需要打开网页的需求，具体请查看 <a href=\"https://github.com/Coolerfall/Android-AppUninstallWatcher/blob/master/app/src/main/jni/watcher/watcher.c\">wathcer.c</a>。</p>\n<p>ps: 此方法和 <a href=\"http://coolerfall.com/android/android-app-daemon\">App Daemon</a> 一样由于系统原因不能适配所有手机，请注意。</p>"},{"title":"golang 计算字符以及文件的 hash 值","_content":"\n学习golang一段时间了，逐渐开始编写一些工具使用，最近需要用来计算hash值。使用golang来计算字符和文件的hash值(md5, sha1, sha256)比较简单。\n<!-- more -->\n\n计算字符串的hash比较简单，直接上代码：\n```go\nfunc md5Str(origin string) string {\n\tm := md5.New()\n\tm.Write([]byte(origin))\n\treturn hex.EncodeToString(m.Sum(nil))\n}\n```\n\n计算文件的hash值稍微麻烦一点：\n```go\nfunc md5File(filepath string) string {\n\tfile, err := os.Open(filepath)\n\tif err != nil {\n\t\treturn \"\"\n\t}\n\tdefer file.Close()\n\n\tm := md5.New()\n\t_, err = io.Copy(m, file)\n\tif err != nil {\n\t\treturn \"\"\n\t}\n\n\treturn hex.EncodeToString(m.Sum(nil))\n}\n```\n\nsha1和sha256的计算方法类似，具体的代码已经提交至[github][1]上。\n\n[1]: https://github.com/Coolerfall/go-utils/blob/master/hash.go","source":"_posts/2015-03-19-golang-hash.md","raw":"---\ntitle: golang计算字符以及文件的hash值\ncategory: go\ntags: [hash]\n---\n\n学习golang一段时间了，逐渐开始编写一些工具使用，最近需要用来计算hash值。使用golang来计算字符和文件的hash值(md5, sha1, sha256)比较简单。\n<!-- more -->\n\n计算字符串的hash比较简单，直接上代码：\n```go\nfunc md5Str(origin string) string {\n\tm := md5.New()\n\tm.Write([]byte(origin))\n\treturn hex.EncodeToString(m.Sum(nil))\n}\n```\n\n计算文件的hash值稍微麻烦一点：\n```go\nfunc md5File(filepath string) string {\n\tfile, err := os.Open(filepath)\n\tif err != nil {\n\t\treturn \"\"\n\t}\n\tdefer file.Close()\n\n\tm := md5.New()\n\t_, err = io.Copy(m, file)\n\tif err != nil {\n\t\treturn \"\"\n\t}\n\n\treturn hex.EncodeToString(m.Sum(nil))\n}\n```\n\nsha1和sha256的计算方法类似，具体的代码已经提交至[github][1]上。\n\n[1]: https://github.com/Coolerfall/go-utils/blob/master/hash.go","slug":"golang-hash","published":1,"date":"2015-03-18T16:00:00.000Z","updated":"2023-05-23T03:07:55.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli00ivlj000ez0in6851bjdt","content":"<p>学习 golang 一段时间了，逐渐开始编写一些工具使用，最近需要用来计算 hash 值。使用 golang 来计算字符和文件的 hash 值 (md5, sha1, sha256) 比较简单。</p>\n<span id=\"more\"></span>\n\n<p>计算字符串的 hash 比较简单，直接上代码：</p>\n<figure class=\"highlight go\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">md5Str</span><span class=\"params\">(origin <span class=\"type\">string</span>)</span></span> <span class=\"type\">string</span> {</span><br><span class=\"line\">\tm := md5.New()</span><br><span class=\"line\">\tm.Write([]<span class=\"type\">byte</span>(origin))</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> hex.EncodeToString(m.Sum(<span class=\"literal\">nil</span>))</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>计算文件的 hash 值稍微麻烦一点：</p>\n<figure class=\"highlight go\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">md5File</span><span class=\"params\">(filepath <span class=\"type\">string</span>)</span></span> <span class=\"type\">string</span> {</span><br><span class=\"line\">\tfile, err := os.Open(filepath)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> file.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tm := md5.New()</span><br><span class=\"line\">\t_, err = io.Copy(m, file)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> hex.EncodeToString(m.Sum(<span class=\"literal\">nil</span>))</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>sha1 和 sha256 的计算方法类似，具体的代码已经提交至 <a href=\"https://github.com/Coolerfall/go-utils/blob/master/hash.go\">github</a> 上。</p>\n","site":{"data":{}},"excerpt":"<p>学习 golang 一段时间了，逐渐开始编写一些工具使用，最近需要用来计算 hash 值。使用 golang 来计算字符和文件的 hash 值 (md5, sha1, sha256) 比较简单。</p>","more":"<p>计算字符串的 hash 比较简单，直接上代码：</p>\n<figure class=\"highlight go\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">md5Str</span><span class=\"params\">(origin <span class=\"type\">string</span>)</span></span> <span class=\"type\">string</span> {</span><br><span class=\"line\">\tm := md5.New()</span><br><span class=\"line\">\tm.Write([]<span class=\"type\">byte</span>(origin))</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> hex.EncodeToString(m.Sum(<span class=\"literal\">nil</span>))</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>计算文件的 hash 值稍微麻烦一点：</p>\n<figure class=\"highlight go\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">md5File</span><span class=\"params\">(filepath <span class=\"type\">string</span>)</span></span> <span class=\"type\">string</span> {</span><br><span class=\"line\">\tfile, err := os.Open(filepath)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> file.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tm := md5.New()</span><br><span class=\"line\">\t_, err = io.Copy(m, file)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> hex.EncodeToString(m.Sum(<span class=\"literal\">nil</span>))</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>sha1 和 sha256 的计算方法类似，具体的代码已经提交至 <a href=\"https://github.com/Coolerfall/go-utils/blob/master/hash.go\">github</a> 上。</p>"},{"title":"Android taskAffinity 与桌面快捷方式","_content":"\n最近在做一个像豌豆荚游戏文件类似的东西，但是遇到个奇怪的问题，就是应用打开后home键退出，然后再点击文件夹，会同时弹出文件夹以及home退出之前的界面，经过一番折腾，算是整明白了问题。首先说说taskAffinity，每个application创建的时候，都会有taskAffinity，默认情况下同一个application下的所有activity都属于同一个taskAffinity，都会在相同的task中。而这里创建的文件夹快捷方式，相当于是让其指定到了应用的某个acitivity，如果没有给这个activity指定taskAffinity的话，那么将会与前面的activity运行在相同的task中，也就是在打开快捷方式后，若前面的activity未finish掉，这个时候会从栈中弹出，出现我所遇到的问题。最后在文件夹快捷方式指定的activity中加入`android:taskAffinity=\":icon\"`，问题就解决了。","source":"_posts/2015-04-03-android-task-affinity.md","raw":"---\ntitle: Android taskAffinity与桌面快捷方式\ncategory: android\ntags: [taskAffinity]\n---\n\n最近在做一个像豌豆荚游戏文件类似的东西，但是遇到个奇怪的问题，就是应用打开后home键退出，然后再点击文件夹，会同时弹出文件夹以及home退出之前的界面，经过一番折腾，算是整明白了问题。首先说说taskAffinity，每个application创建的时候，都会有taskAffinity，默认情况下同一个application下的所有activity都属于同一个taskAffinity，都会在相同的task中。而这里创建的文件夹快捷方式，相当于是让其指定到了应用的某个acitivity，如果没有给这个activity指定taskAffinity的话，那么将会与前面的activity运行在相同的task中，也就是在打开快捷方式后，若前面的activity未finish掉，这个时候会从栈中弹出，出现我所遇到的问题。最后在文件夹快捷方式指定的activity中加入`android:taskAffinity=\":icon\"`，问题就解决了。","slug":"android-task-affinity","published":1,"date":"2015-04-02T16:00:00.000Z","updated":"2023-05-23T03:07:55.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli00ivln000iz0in4arv5aum","content":"<p>最近在做一个像豌豆荚游戏文件类似的东西，但是遇到个奇怪的问题，就是应用打开后 home 键退出，然后再点击文件夹，会同时弹出文件夹以及 home 退出之前的界面，经过一番折腾，算是整明白了问题。首先说说 taskAffinity，每个 application 创建的时候，都会有 taskAffinity，默认情况下同一个 application 下的所有 activity 都属于同一个 taskAffinity，都会在相同的 task 中。而这里创建的文件夹快捷方式，相当于是让其指定到了应用的某个 acitivity，如果没有给这个 activity 指定 taskAffinity 的话，那么将会与前面的 activity 运行在相同的 task 中，也就是在打开快捷方式后，若前面的 activity 未 finish 掉，这个时候会从栈中弹出，出现我所遇到的问题。最后在文件夹快捷方式指定的 activity 中加入 <code>android:taskAffinity=\":icon\"</code>，问题就解决了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在做一个像豌豆荚游戏文件类似的东西，但是遇到个奇怪的问题，就是应用打开后 home 键退出，然后再点击文件夹，会同时弹出文件夹以及 home 退出之前的界面，经过一番折腾，算是整明白了问题。首先说说 taskAffinity，每个 application 创建的时候，都会有 taskAffinity，默认情况下同一个 application 下的所有 activity 都属于同一个 taskAffinity，都会在相同的 task 中。而这里创建的文件夹快捷方式，相当于是让其指定到了应用的某个 acitivity，如果没有给这个 activity 指定 taskAffinity 的话，那么将会与前面的 activity 运行在相同的 task 中，也就是在打开快捷方式后，若前面的 activity 未 finish 掉，这个时候会从栈中弹出，出现我所遇到的问题。最后在文件夹快捷方式指定的 activity 中加入 <code>android:taskAffinity=\":icon\"</code>，问题就解决了。</p>\n"},{"title":"使用 gradle 将项目上传到 maven 中央库","_content":"\n用AS开发也有一段时间了，发现AS可以使用maven，在gradle中可以很方便的解决依赖问题，再也不用去下载相应的jar包了。gradle添加一些依赖库比较方便，但是如果想把自己的一些开源项目上传到maven中央库给别人使用，就稍微有些麻烦了。现在比较简单的办法是先将自己在github上的项目提交到Sonatype，然后再同步到maven中央库去，大致说一下流程。\n\n<!-- more -->\n\n#### 注册JIRA账号\n要想把项目提交到Sonatype，首先得得去[Sonatype Issue][1]去注册一个JIRA账号，注册流程很简单，挨着填写就ok了，这个账号在后面配置的时候要用到。\n#### 创建一个issue\n账号注册好之后，就开始创建一个issue，这个issue对应你的一个项目，在上面导航栏中有个Create按钮：\n![img][6]\n然后再弹出的对话框中填写项目的信息：\n![img][7]\n![img][8]\n其中Group Id很重要，一般为自己的域名，这个在后面提交项目的时候要用到。创建好issue后，接下来就是等待，然后工作人员会给你发送邮件。这个时候可以在导航栏中的Issue中找到自己创建的issue，到下面的comments可以看到工作人员问你之前填写的group id这个域名是否是你的，回答是，然后工作人员就会让你提交你的项目到Sonatype:\n![img][9]\n#### 生成GPG密钥，用于上传的文件加密和签名\nlinux下可以直接使用gpg。windows上则可以使用git自带的gpg(如果没有安装git，可以直接安装[gpg4win][3])，在cmd中执行：\n```shell\n$ gpg --gen-key\n```\n姓名，邮箱以及备注要认真填写，最后要求输入passphase，这个是密码，上传maven要用到。\n\n```shell\n$ gpg --list-keys --keyid-format SHORT\n/home/xxxx/.gnupg/pubring.kbx\n-------------------------------\npub   rsa4096/BB090204 2019-01-03 [SC]\n      7B0A1A36C235E95636B75C53D781EED2BB090204\nuid           [ultimate] Vincent Cheung (coolerfall.com) <coolingfall@gmail.com>\nsub   rsa4096/9123FD1A 2019-01-03 [E]\n```\n\n其中BB090204是key id，接下来将公钥上传至服务器：\n```shell\n$ gpg --keyserver hkp://pool.sks-keyservers.net --send-keys BB090204\n```\n\ngpg 2.1之后需要手动导出secring：\n```shell\ngpg --keyring secring.gpg --export-secret-keys > ~/.gnupg/secring.gpg\n```\n\n#### 使用gradle提交项目到Sonatype\n在网上找到了Chris Banes写的[gradle-mvn-push.gradle][4]脚本，参照这个基本就可以了，然后将这个脚本在你项目的`build.gradle`的最后加入`apply from: '../maven_push.gradle'`，如果想发布jar，需要在脚本中加入：\n```groovy\nartifacts {\n\tarchives packageReleaseJar\n}\n```\n\n然后需要在项目下的`gradle.properties`中加入相应参数的值：\n```text\nVERSION_NAME=1.3.0\nPOM_GROUP_ID=com.coolerfall\nPOM_NAME=Http Download Manager\nPOM_ARTIFACT_ID=android-http-download-manager\nPOM_DESCRIPTION=An useful and effective http/https download manager for Android, support breakpoint downloading\nPOM_URL=https://github.com/Coolerfall/Android-HttpDownloadManager\nPOM_SCM_URL=https://github.com/Coolerfall/Android-HttpDownloadManager\nPOM_SCM_CONNECTION=scm:git@github.com:Coolerfall/Android-HttpDownloadManager.git\nPOM_SCM_DEV_CONNECTION=scm:git@github.com:Coolerfall/Android-HttpDownloadManager.git\nPOM_LICENCE_NAME=The Apache Software License, Version 2.0\nPOM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt\nPOM_LICENCE_DIST=repo\nPOM_PACKAGING=jar\n\nPOM_DEVELOPER_ID=coolerfall\nPOM_DEVELOPER_NAME=Vincent Cheung\nPOM_INCEPTION_YEAR=2014\n```\n\nVERSION_NAME如果后面带有SNAPSHOT字符串将会提交到[snapshots][5]，这个不需要同步就可以下载jar以及源码等，如果不加则是发布release版本，这个就需要同步到maven center了。然后还需要在`C:/Users/xxx/.gradle/gradle.properties`中添加Sonatype账号、密码以及签名信息\n```text\nNEXUS_USERNAME=username\nNEXUS_PASSWORD=password\n\nsigning.keyId=BB090204\nsigning.password=password\nsigning.secretKeyRingFile=C:/Users/xxx/AppData/Roaming/gnupg/secring.gpg\n```\n其中signing.password就是刚刚生成gpg时候的passphase。接下来就可以使用gralde提交项目：\n```shell\n$ %GRADLE_HOME%/bin/gradle uploadArchives\n```\n我使用的是AS最新版本，gradle home在AS目录下（如果不是请自行找到gradle home）\n登陆到[Sonatype Nexus][2]，查看Staging Repositories，然后在搜索中过滤出你的Group Id，就可以看到你刚刚提交的项目，接下来发布release版本了，先close再Release:\n![img][11]\n然后在[Sonatype Issue][1]给工作人员回复，你已经成功发布，让他们帮你同步到maven中央库去：\n![img][10]\n最后就是等待工作人员给你同步，成功同步后，一般10几分钟左右就可以在[maven center][12]搜索到你的项目了，这样就可以在AS中使用gradle来添加依赖了。如果对[gradle-mvn-push.gradle][4]配置还有什么疑问，请参考我的项目：[Android-HttpDownloadManger][13]。\nps:如果创建issue的时候，工作人员回复`Only one JIRA issue per top-level groupId is necessary. You should already have all the necessary permissions to deploy and new artifacts to this groupId or to any sub-groups thanks to OSSRH-14919.`, 说明之前已经成功的release了一个项目，就不需要再创建一个新的issue了，直接将项目提交到[snapshots][5]，并进行closed和realease操作即可，过10分钟左右就可以在gradle中使用了。\n\n[1]: https://issues.sonatype.org\n[2]: https://oss.sonatype.org/\n[3]: http://gpg4win.org/\n[4]: https://raw.githubusercontent.com/chrisbanes/gradle-mvn-push/master/gradle-mvn-push.gradle\n[5]: https://oss.sonatype.org/content/repositories/snapshots\n[6]: /images/gradle-maven/new-issue.jpg\n[7]: /images/gradle-maven/create_issue1.jpg\n[8]: /images/gradle-maven/create_issue2.jpg\n[9]: /images/gradle-maven/comments1.jpg\n[10]: /images/gradle-maven/comments2.jpg\n[11]: /images/gradle-maven/release.jpg\n[12]: http://search.maven.org/\n[13]: https://github.com/Coolerfall/Android-HttpDownloadManager","source":"_posts/2015-03-28-gradle-push-to-maven.md","raw":"---\ntitle: 使用gradle将项目上传到maven中央库\ncategory: android\ntags: [android studio, maven]\n---\n\n用AS开发也有一段时间了，发现AS可以使用maven，在gradle中可以很方便的解决依赖问题，再也不用去下载相应的jar包了。gradle添加一些依赖库比较方便，但是如果想把自己的一些开源项目上传到maven中央库给别人使用，就稍微有些麻烦了。现在比较简单的办法是先将自己在github上的项目提交到Sonatype，然后再同步到maven中央库去，大致说一下流程。\n\n<!-- more -->\n\n#### 注册JIRA账号\n要想把项目提交到Sonatype，首先得得去[Sonatype Issue][1]去注册一个JIRA账号，注册流程很简单，挨着填写就ok了，这个账号在后面配置的时候要用到。\n#### 创建一个issue\n账号注册好之后，就开始创建一个issue，这个issue对应你的一个项目，在上面导航栏中有个Create按钮：\n![img][6]\n然后再弹出的对话框中填写项目的信息：\n![img][7]\n![img][8]\n其中Group Id很重要，一般为自己的域名，这个在后面提交项目的时候要用到。创建好issue后，接下来就是等待，然后工作人员会给你发送邮件。这个时候可以在导航栏中的Issue中找到自己创建的issue，到下面的comments可以看到工作人员问你之前填写的group id这个域名是否是你的，回答是，然后工作人员就会让你提交你的项目到Sonatype:\n![img][9]\n#### 生成GPG密钥，用于上传的文件加密和签名\nlinux下可以直接使用gpg。windows上则可以使用git自带的gpg(如果没有安装git，可以直接安装[gpg4win][3])，在cmd中执行：\n```shell\n$ gpg --gen-key\n```\n姓名，邮箱以及备注要认真填写，最后要求输入passphase，这个是密码，上传maven要用到。\n\n```shell\n$ gpg --list-keys --keyid-format SHORT\n/home/xxxx/.gnupg/pubring.kbx\n-------------------------------\npub   rsa4096/BB090204 2019-01-03 [SC]\n      7B0A1A36C235E95636B75C53D781EED2BB090204\nuid           [ultimate] Vincent Cheung (coolerfall.com) <coolingfall@gmail.com>\nsub   rsa4096/9123FD1A 2019-01-03 [E]\n```\n\n其中BB090204是key id，接下来将公钥上传至服务器：\n```shell\n$ gpg --keyserver hkp://pool.sks-keyservers.net --send-keys BB090204\n```\n\ngpg 2.1之后需要手动导出secring：\n```shell\ngpg --keyring secring.gpg --export-secret-keys > ~/.gnupg/secring.gpg\n```\n\n#### 使用gradle提交项目到Sonatype\n在网上找到了Chris Banes写的[gradle-mvn-push.gradle][4]脚本，参照这个基本就可以了，然后将这个脚本在你项目的`build.gradle`的最后加入`apply from: '../maven_push.gradle'`，如果想发布jar，需要在脚本中加入：\n```groovy\nartifacts {\n\tarchives packageReleaseJar\n}\n```\n\n然后需要在项目下的`gradle.properties`中加入相应参数的值：\n```text\nVERSION_NAME=1.3.0\nPOM_GROUP_ID=com.coolerfall\nPOM_NAME=Http Download Manager\nPOM_ARTIFACT_ID=android-http-download-manager\nPOM_DESCRIPTION=An useful and effective http/https download manager for Android, support breakpoint downloading\nPOM_URL=https://github.com/Coolerfall/Android-HttpDownloadManager\nPOM_SCM_URL=https://github.com/Coolerfall/Android-HttpDownloadManager\nPOM_SCM_CONNECTION=scm:git@github.com:Coolerfall/Android-HttpDownloadManager.git\nPOM_SCM_DEV_CONNECTION=scm:git@github.com:Coolerfall/Android-HttpDownloadManager.git\nPOM_LICENCE_NAME=The Apache Software License, Version 2.0\nPOM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt\nPOM_LICENCE_DIST=repo\nPOM_PACKAGING=jar\n\nPOM_DEVELOPER_ID=coolerfall\nPOM_DEVELOPER_NAME=Vincent Cheung\nPOM_INCEPTION_YEAR=2014\n```\n\nVERSION_NAME如果后面带有SNAPSHOT字符串将会提交到[snapshots][5]，这个不需要同步就可以下载jar以及源码等，如果不加则是发布release版本，这个就需要同步到maven center了。然后还需要在`C:/Users/xxx/.gradle/gradle.properties`中添加Sonatype账号、密码以及签名信息\n```text\nNEXUS_USERNAME=username\nNEXUS_PASSWORD=password\n\nsigning.keyId=BB090204\nsigning.password=password\nsigning.secretKeyRingFile=C:/Users/xxx/AppData/Roaming/gnupg/secring.gpg\n```\n其中signing.password就是刚刚生成gpg时候的passphase。接下来就可以使用gralde提交项目：\n```shell\n$ %GRADLE_HOME%/bin/gradle uploadArchives\n```\n我使用的是AS最新版本，gradle home在AS目录下（如果不是请自行找到gradle home）\n登陆到[Sonatype Nexus][2]，查看Staging Repositories，然后在搜索中过滤出你的Group Id，就可以看到你刚刚提交的项目，接下来发布release版本了，先close再Release:\n![img][11]\n然后在[Sonatype Issue][1]给工作人员回复，你已经成功发布，让他们帮你同步到maven中央库去：\n![img][10]\n最后就是等待工作人员给你同步，成功同步后，一般10几分钟左右就可以在[maven center][12]搜索到你的项目了，这样就可以在AS中使用gradle来添加依赖了。如果对[gradle-mvn-push.gradle][4]配置还有什么疑问，请参考我的项目：[Android-HttpDownloadManger][13]。\nps:如果创建issue的时候，工作人员回复`Only one JIRA issue per top-level groupId is necessary. You should already have all the necessary permissions to deploy and new artifacts to this groupId or to any sub-groups thanks to OSSRH-14919.`, 说明之前已经成功的release了一个项目，就不需要再创建一个新的issue了，直接将项目提交到[snapshots][5]，并进行closed和realease操作即可，过10分钟左右就可以在gradle中使用了。\n\n[1]: https://issues.sonatype.org\n[2]: https://oss.sonatype.org/\n[3]: http://gpg4win.org/\n[4]: https://raw.githubusercontent.com/chrisbanes/gradle-mvn-push/master/gradle-mvn-push.gradle\n[5]: https://oss.sonatype.org/content/repositories/snapshots\n[6]: /images/gradle-maven/new-issue.jpg\n[7]: /images/gradle-maven/create_issue1.jpg\n[8]: /images/gradle-maven/create_issue2.jpg\n[9]: /images/gradle-maven/comments1.jpg\n[10]: /images/gradle-maven/comments2.jpg\n[11]: /images/gradle-maven/release.jpg\n[12]: http://search.maven.org/\n[13]: https://github.com/Coolerfall/Android-HttpDownloadManager","slug":"gradle-push-to-maven","published":1,"date":"2015-03-27T16:00:00.000Z","updated":"2023-05-23T06:12:14.672Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli00ivlo000kz0inbso8facv","content":"<p>用 AS 开发也有一段时间了，发现 AS 可以使用 maven，在 gradle 中可以很方便的解决依赖问题，再也不用去下载相应的 jar 包了。gradle 添加一些依赖库比较方便，但是如果想把自己的一些开源项目上传到 maven 中央库给别人使用，就稍微有些麻烦了。现在比较简单的办法是先将自己在 github 上的项目提交到 Sonatype，然后再同步到 maven 中央库去，大致说一下流程。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"注册JIRA账号\"><a href=\"#注册JIRA账号\" class=\"headerlink\" title=\"注册JIRA账号\"></a>注册 JIRA 账号</h4><p>要想把项目提交到 Sonatype，首先得得去 <a href=\"https://issues.sonatype.org/\">Sonatype Issue</a> 去注册一个 JIRA 账号，注册流程很简单，挨着填写就 ok 了，这个账号在后面配置的时候要用到。</p>\n<h4 id=\"创建一个issue\"><a href=\"#创建一个issue\" class=\"headerlink\" title=\"创建一个issue\"></a>创建一个 issue</h4><p>账号注册好之后，就开始创建一个 issue，这个 issue 对应你的一个项目，在上面导航栏中有个 Create 按钮：<br><img src=\"/images/gradle-maven/new-issue.jpg\" alt=\"img\"><br>然后再弹出的对话框中填写项目的信息：<br><img src=\"/images/gradle-maven/create_issue1.jpg\" alt=\"img\"><br><img src=\"/images/gradle-maven/create_issue2.jpg\" alt=\"img\"><br>其中 Group Id 很重要，一般为自己的域名，这个在后面提交项目的时候要用到。创建好 issue 后，接下来就是等待，然后工作人员会给你发送邮件。这个时候可以在导航栏中的 Issue 中找到自己创建的 issue，到下面的 comments 可以看到工作人员问你之前填写的 group id 这个域名是否是你的，回答是，然后工作人员就会让你提交你的项目到 Sonatype:<br><img src=\"/images/gradle-maven/comments1.jpg\" alt=\"img\"></p>\n<h4 id=\"生成GPG密钥，用于上传的文件加密和签名\"><a href=\"#生成GPG密钥，用于上传的文件加密和签名\" class=\"headerlink\" title=\"生成GPG密钥，用于上传的文件加密和签名\"></a>生成 GPG 密钥，用于上传的文件加密和签名</h4><p>linux 下可以直接使用 gpg。windows 上则可以使用 git 自带的 gpg (如果没有安装 git，可以直接安装 <a href=\"http://gpg4win.org/\">gpg4win</a>)，在 cmd 中执行：</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">gpg --gen-key</span></span><br></pre></td></tr></tbody></table></figure>\n<p>姓名，邮箱以及备注要认真填写，最后要求输入 passphase，这个是密码，上传 maven 要用到。</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">gpg --list-keys --keyid-format SHORT</span></span><br><span class=\"line\">/home/xxxx/.gnupg/pubring.kbx</span><br><span class=\"line\">-------------------------------</span><br><span class=\"line\">pub   rsa4096/BB090204 2019-01-03 [SC]</span><br><span class=\"line\">      7B0A1A36C235E95636B75C53D781EED2BB090204</span><br><span class=\"line\">uid           [ultimate] Vincent Cheung (coolerfall.com) &lt;coolingfall@gmail.com&gt;</span><br><span class=\"line\">sub   rsa4096/9123FD1A 2019-01-03 [E]</span><br></pre></td></tr></tbody></table></figure>\n\n<p>其中 BB090204 是 key id，接下来将公钥上传至服务器：</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">gpg --keyserver hkp://pool.sks-keyservers.net --send-keys BB090204</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>gpg 2.1 之后需要手动导出 secring：</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --keyring secring.gpg --export-secret-keys &gt; ~/.gnupg/secring.gpg</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"使用gradle提交项目到Sonatype\"><a href=\"#使用gradle提交项目到Sonatype\" class=\"headerlink\" title=\"使用gradle提交项目到Sonatype\"></a>使用 gradle 提交项目到 Sonatype</h4><p>在网上找到了 Chris Banes 写的 <a href=\"https://raw.githubusercontent.com/chrisbanes/gradle-mvn-push/master/gradle-mvn-push.gradle\">gradle-mvn-push.gradle</a> 脚本，参照这个基本就可以了，然后将这个脚本在你项目的 <code>build.gradle</code> 的最后加入 <code>apply from: '../maven_push.gradle'</code>，如果想发布 jar，需要在脚本中加入：</p>\n<figure class=\"highlight groovy\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">artifacts {</span><br><span class=\"line\">\tarchives packageReleaseJar</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>然后需要在项目下的 <code>gradle.properties</code> 中加入相应参数的值：</p>\n<figure class=\"highlight text\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VERSION_NAME=1.3.0</span><br><span class=\"line\">POM_GROUP_ID=com.coolerfall</span><br><span class=\"line\">POM_NAME=Http Download Manager</span><br><span class=\"line\">POM_ARTIFACT_ID=android-http-download-manager</span><br><span class=\"line\">POM_DESCRIPTION=An useful and effective http/https download manager for Android, support breakpoint downloading</span><br><span class=\"line\">POM_URL=https://github.com/Coolerfall/Android-HttpDownloadManager</span><br><span class=\"line\">POM_SCM_URL=https://github.com/Coolerfall/Android-HttpDownloadManager</span><br><span class=\"line\">POM_SCM_CONNECTION=scm:git@github.com:Coolerfall/Android-HttpDownloadManager.git</span><br><span class=\"line\">POM_SCM_DEV_CONNECTION=scm:git@github.com:Coolerfall/Android-HttpDownloadManager.git</span><br><span class=\"line\">POM_LICENCE_NAME=The Apache Software License, Version 2.0</span><br><span class=\"line\">POM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt</span><br><span class=\"line\">POM_LICENCE_DIST=repo</span><br><span class=\"line\">POM_PACKAGING=jar</span><br><span class=\"line\"></span><br><span class=\"line\">POM_DEVELOPER_ID=coolerfall</span><br><span class=\"line\">POM_DEVELOPER_NAME=Vincent Cheung</span><br><span class=\"line\">POM_INCEPTION_YEAR=2014</span><br></pre></td></tr></tbody></table></figure>\n\n<p>VERSION_NAME 如果后面带有 SNAPSHOT 字符串将会提交到 <a href=\"https://oss.sonatype.org/content/repositories/snapshots\">snapshots</a>，这个不需要同步就可以下载 jar 以及源码等，如果不加则是发布 release 版本，这个就需要同步到 maven center 了。然后还需要在 <code>C:/Users/xxx/.gradle/gradle.properties</code> 中添加 Sonatype 账号、密码以及签名信息</p>\n<figure class=\"highlight text\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NEXUS_USERNAME=username</span><br><span class=\"line\">NEXUS_PASSWORD=password</span><br><span class=\"line\"></span><br><span class=\"line\">signing.keyId=BB090204</span><br><span class=\"line\">signing.password=password</span><br><span class=\"line\">signing.secretKeyRingFile=C:/Users/xxx/AppData/Roaming/gnupg/secring.gpg</span><br></pre></td></tr></tbody></table></figure>\n<p>其中 signing.password 就是刚刚生成 gpg 时候的 passphase。接下来就可以使用 gralde 提交项目：</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">%GRADLE_HOME%/bin/gradle uploadArchives</span></span><br></pre></td></tr></tbody></table></figure>\n<p>我使用的是 AS 最新版本，gradle home 在 AS 目录下（如果不是请自行找到 gradle home）<br>登陆到 <a href=\"https://oss.sonatype.org/\">Sonatype Nexus</a>，查看 Staging Repositories，然后在搜索中过滤出你的 Group Id，就可以看到你刚刚提交的项目，接下来发布 release 版本了，先 close 再 Release:<br><img src=\"/images/gradle-maven/release.jpg\" alt=\"img\"><br>然后在 <a href=\"https://issues.sonatype.org/\">Sonatype Issue</a> 给工作人员回复，你已经成功发布，让他们帮你同步到 maven 中央库去：<br><img src=\"/images/gradle-maven/comments2.jpg\" alt=\"img\"><br>最后就是等待工作人员给你同步，成功同步后，一般 10 几分钟左右就可以在 <a href=\"http://search.maven.org/\">maven center</a> 搜索到你的项目了，这样就可以在 AS 中使用 gradle 来添加依赖了。如果对 <a href=\"https://raw.githubusercontent.com/chrisbanes/gradle-mvn-push/master/gradle-mvn-push.gradle\">gradle-mvn-push.gradle</a> 配置还有什么疑问，请参考我的项目：<a href=\"https://github.com/Coolerfall/Android-HttpDownloadManager\">Android-HttpDownloadManger</a>。<br>ps: 如果创建 issue 的时候，工作人员回复 <code>Only one JIRA issue per top-level groupId is necessary. You should already have all the necessary permissions to deploy and new artifacts to this groupId or to any sub-groups thanks to OSSRH-14919.</code>, 说明之前已经成功的 release 了一个项目，就不需要再创建一个新的 issue 了，直接将项目提交到 <a href=\"https://oss.sonatype.org/content/repositories/snapshots\">snapshots</a>，并进行 closed 和 realease 操作即可，过 10 分钟左右就可以在 gradle 中使用了。</p>\n","site":{"data":{}},"excerpt":"<p>用 AS 开发也有一段时间了，发现 AS 可以使用 maven，在 gradle 中可以很方便的解决依赖问题，再也不用去下载相应的 jar 包了。gradle 添加一些依赖库比较方便，但是如果想把自己的一些开源项目上传到 maven 中央库给别人使用，就稍微有些麻烦了。现在比较简单的办法是先将自己在 github 上的项目提交到 Sonatype，然后再同步到 maven 中央库去，大致说一下流程。</p>","more":"<h4 id=\"注册JIRA账号\"><a href=\"#注册JIRA账号\" class=\"headerlink\" title=\"注册JIRA账号\"></a>注册 JIRA 账号</h4><p>要想把项目提交到 Sonatype，首先得得去 <a href=\"https://issues.sonatype.org/\">Sonatype Issue</a> 去注册一个 JIRA 账号，注册流程很简单，挨着填写就 ok 了，这个账号在后面配置的时候要用到。</p>\n<h4 id=\"创建一个issue\"><a href=\"#创建一个issue\" class=\"headerlink\" title=\"创建一个issue\"></a>创建一个 issue</h4><p>账号注册好之后，就开始创建一个 issue，这个 issue 对应你的一个项目，在上面导航栏中有个 Create 按钮：<br><img src=\"/images/gradle-maven/new-issue.jpg\" alt=\"img\"><br>然后再弹出的对话框中填写项目的信息：<br><img src=\"/images/gradle-maven/create_issue1.jpg\" alt=\"img\"><br><img src=\"/images/gradle-maven/create_issue2.jpg\" alt=\"img\"><br>其中 Group Id 很重要，一般为自己的域名，这个在后面提交项目的时候要用到。创建好 issue 后，接下来就是等待，然后工作人员会给你发送邮件。这个时候可以在导航栏中的 Issue 中找到自己创建的 issue，到下面的 comments 可以看到工作人员问你之前填写的 group id 这个域名是否是你的，回答是，然后工作人员就会让你提交你的项目到 Sonatype:<br><img src=\"/images/gradle-maven/comments1.jpg\" alt=\"img\"></p>\n<h4 id=\"生成GPG密钥，用于上传的文件加密和签名\"><a href=\"#生成GPG密钥，用于上传的文件加密和签名\" class=\"headerlink\" title=\"生成GPG密钥，用于上传的文件加密和签名\"></a>生成 GPG 密钥，用于上传的文件加密和签名</h4><p>linux 下可以直接使用 gpg。windows 上则可以使用 git 自带的 gpg (如果没有安装 git，可以直接安装 <a href=\"http://gpg4win.org/\">gpg4win</a>)，在 cmd 中执行：</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">gpg --gen-key</span></span><br></pre></td></tr></tbody></table></figure>\n<p>姓名，邮箱以及备注要认真填写，最后要求输入 passphase，这个是密码，上传 maven 要用到。</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">gpg --list-keys --keyid-format SHORT</span></span><br><span class=\"line\">/home/xxxx/.gnupg/pubring.kbx</span><br><span class=\"line\">-------------------------------</span><br><span class=\"line\">pub   rsa4096/BB090204 2019-01-03 [SC]</span><br><span class=\"line\">      7B0A1A36C235E95636B75C53D781EED2BB090204</span><br><span class=\"line\">uid           [ultimate] Vincent Cheung (coolerfall.com) &lt;coolingfall@gmail.com&gt;</span><br><span class=\"line\">sub   rsa4096/9123FD1A 2019-01-03 [E]</span><br></pre></td></tr></tbody></table></figure>\n\n<p>其中 BB090204 是 key id，接下来将公钥上传至服务器：</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">gpg --keyserver hkp://pool.sks-keyservers.net --send-keys BB090204</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>gpg 2.1 之后需要手动导出 secring：</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --keyring secring.gpg --export-secret-keys &gt; ~/.gnupg/secring.gpg</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"使用gradle提交项目到Sonatype\"><a href=\"#使用gradle提交项目到Sonatype\" class=\"headerlink\" title=\"使用gradle提交项目到Sonatype\"></a>使用 gradle 提交项目到 Sonatype</h4><p>在网上找到了 Chris Banes 写的 <a href=\"https://raw.githubusercontent.com/chrisbanes/gradle-mvn-push/master/gradle-mvn-push.gradle\">gradle-mvn-push.gradle</a> 脚本，参照这个基本就可以了，然后将这个脚本在你项目的 <code>build.gradle</code> 的最后加入 <code>apply from: '../maven_push.gradle'</code>，如果想发布 jar，需要在脚本中加入：</p>\n<figure class=\"highlight groovy\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">artifacts {</span><br><span class=\"line\">\tarchives packageReleaseJar</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>然后需要在项目下的 <code>gradle.properties</code> 中加入相应参数的值：</p>\n<figure class=\"highlight text\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VERSION_NAME=1.3.0</span><br><span class=\"line\">POM_GROUP_ID=com.coolerfall</span><br><span class=\"line\">POM_NAME=Http Download Manager</span><br><span class=\"line\">POM_ARTIFACT_ID=android-http-download-manager</span><br><span class=\"line\">POM_DESCRIPTION=An useful and effective http/https download manager for Android, support breakpoint downloading</span><br><span class=\"line\">POM_URL=https://github.com/Coolerfall/Android-HttpDownloadManager</span><br><span class=\"line\">POM_SCM_URL=https://github.com/Coolerfall/Android-HttpDownloadManager</span><br><span class=\"line\">POM_SCM_CONNECTION=scm:git@github.com:Coolerfall/Android-HttpDownloadManager.git</span><br><span class=\"line\">POM_SCM_DEV_CONNECTION=scm:git@github.com:Coolerfall/Android-HttpDownloadManager.git</span><br><span class=\"line\">POM_LICENCE_NAME=The Apache Software License, Version 2.0</span><br><span class=\"line\">POM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt</span><br><span class=\"line\">POM_LICENCE_DIST=repo</span><br><span class=\"line\">POM_PACKAGING=jar</span><br><span class=\"line\"></span><br><span class=\"line\">POM_DEVELOPER_ID=coolerfall</span><br><span class=\"line\">POM_DEVELOPER_NAME=Vincent Cheung</span><br><span class=\"line\">POM_INCEPTION_YEAR=2014</span><br></pre></td></tr></tbody></table></figure>\n\n<p>VERSION_NAME 如果后面带有 SNAPSHOT 字符串将会提交到 <a href=\"https://oss.sonatype.org/content/repositories/snapshots\">snapshots</a>，这个不需要同步就可以下载 jar 以及源码等，如果不加则是发布 release 版本，这个就需要同步到 maven center 了。然后还需要在 <code>C:/Users/xxx/.gradle/gradle.properties</code> 中添加 Sonatype 账号、密码以及签名信息</p>\n<figure class=\"highlight text\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NEXUS_USERNAME=username</span><br><span class=\"line\">NEXUS_PASSWORD=password</span><br><span class=\"line\"></span><br><span class=\"line\">signing.keyId=BB090204</span><br><span class=\"line\">signing.password=password</span><br><span class=\"line\">signing.secretKeyRingFile=C:/Users/xxx/AppData/Roaming/gnupg/secring.gpg</span><br></pre></td></tr></tbody></table></figure>\n<p>其中 signing.password 就是刚刚生成 gpg 时候的 passphase。接下来就可以使用 gralde 提交项目：</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">%GRADLE_HOME%/bin/gradle uploadArchives</span></span><br></pre></td></tr></tbody></table></figure>\n<p>我使用的是 AS 最新版本，gradle home 在 AS 目录下（如果不是请自行找到 gradle home）<br>登陆到 <a href=\"https://oss.sonatype.org/\">Sonatype Nexus</a>，查看 Staging Repositories，然后在搜索中过滤出你的 Group Id，就可以看到你刚刚提交的项目，接下来发布 release 版本了，先 close 再 Release:<br><img src=\"/images/gradle-maven/release.jpg\" alt=\"img\"><br>然后在 <a href=\"https://issues.sonatype.org/\">Sonatype Issue</a> 给工作人员回复，你已经成功发布，让他们帮你同步到 maven 中央库去：<br><img src=\"/images/gradle-maven/comments2.jpg\" alt=\"img\"><br>最后就是等待工作人员给你同步，成功同步后，一般 10 几分钟左右就可以在 <a href=\"http://search.maven.org/\">maven center</a> 搜索到你的项目了，这样就可以在 AS 中使用 gradle 来添加依赖了。如果对 <a href=\"https://raw.githubusercontent.com/chrisbanes/gradle-mvn-push/master/gradle-mvn-push.gradle\">gradle-mvn-push.gradle</a> 配置还有什么疑问，请参考我的项目：<a href=\"https://github.com/Coolerfall/Android-HttpDownloadManager\">Android-HttpDownloadManger</a>。<br>ps: 如果创建 issue 的时候，工作人员回复 <code>Only one JIRA issue per top-level groupId is necessary. You should already have all the necessary permissions to deploy and new artifacts to this groupId or to any sub-groups thanks to OSSRH-14919.</code>, 说明之前已经成功的 release 了一个项目，就不需要再创建一个新的 issue 了，直接将项目提交到 <a href=\"https://oss.sonatype.org/content/repositories/snapshots\">snapshots</a>，并进行 closed 和 realease 操作即可，过 10 分钟左右就可以在 gradle 中使用了。</p>"},{"layout":"post","title":"Android App Daemon","_content":"\n一直没空把App Daemon的原理整理一下，见不少人在问原理，我这里就把整个流程大概的说一下。关于进程守护，从接触Android没多久就一直想实现，网上给出的方案也是各种各样，有双服务方式，有利用系统定时器方式的等等等等，但我都有过尝试，最终都没有达到自己想要的结果。后来想到自己以前在搞linux的时候用到子进程来处理一些任务，而Android正是基于linux的，觉得这样的话应该是可行的。最初直接在JNI的c代码中fork出一个子进程出来，然后在子进程中加一个while(1)，再在while中sleep并打开一个指定的service，这样一个最简单的守护完成了。但是后来测试发现，虽然能实现功能，不过使用adb shell查看进程(命令: ps | grep com.coolerfall....)，发现fork出来的进程的VSIZE(进程虚拟地址空间大小)和RSS(进程正在使用的物理内存的大小)都很大，而且UI线程有时候会出现莫名其妙的问题，于是进程守护也就暂时放下了。后来由于项目需求，又不得不开始折腾进程守护。一次在看开源项目[afwall][1](android上的流量防火墙)，发现其中的命令是直接使用linux命令行的方式在执行的，这才想起linux可以直接编译一个可执行的二进制文件，然后在命令行中直接执行。看了看Android.mk的文档，加入`include $(BUILD_EXECUTABLE)`可以让c文件编译成在Android上运行的二进制文件，最后把以前的代码直接拿过来，一切OK了。\n<!-- more -->\n原理分析：\n```c\nint main(int argc, char *argv[])\n{\n\tint i;\n\tpid_t pid;\n\n\tif ((pid = fork()) < 0)\n\t{\n\t    exit(EXIT_SUCCESS);\n\t}\n\telse if (pid == 0)\n\t{\n\t\t/* child process become session leader */\n\t\tsetsid();\n\t\t/* change work directory */\n\t\tchdir(\"/\");\n\n\t\tfor (i = 0; i < 3; i ++)\n\t\t{\n\t\t\tclose(i);\n\t\t}\n\t\t\n\t\twhile(1)\n\t\t{\n\t\t\tsleep(interval);\n\n\t\t\tLOGD(LOG_TAG, \"check the service once\");\n\n\t\t\t/* start service */\n\t\t\tstart_service(package_name, service_name);\n\t\t}\n\t}\n\telse\n\t{\n\t\t/* parent process, do nothing */\n\t}\n}\n```\n由于要在shell中直接执行，因此这里使用`int main(int argc, char *argv[])`，让可执行文件有入口。frok出子进程之后，让子进程成为新的会话的领头进程，并与其父进程的会话组和进程组脱离，紧接着就是在子进程中定时去启动服务，这样一个简单的进程守护就OK了。\n其中`start_service`为启动一个Service:\n```c\n/* start daemon service */\nstatic void start_service(char *package_name, char *service_name)\n{\n\t/* get the sdk version */\n\tint version = get_version();\n\n\tpid_t pid;\n\n\tif ((pid = fork()) < 0)\n\t{\n\t\texit(EXIT_SUCCESS);\n\t}\n\telse if (pid == 0)\n\t{\n\t\tif (package_name == NULL || service_name == NULL)\n\t\t{\n\t\t\tLOGE(LOG_TAG, \"package name or service name is null\");\n\t\t\treturn;\n\t\t}\n\n\t\tchar *p_name = str_stitching(package_name, \"/\");\n\t\tchar *s_name = str_stitching(p_name, service_name);\n\t\tLOGD(LOG_TAG, \"service: %s\", s_name);\n\n\t\tif (version >= 17 || version == 0)\n\t\t{\n\t\t\tint ret = execlp(\"am\", \"am\", \"startservice\",\n\t\t\t\t\t\t\"--user\", \"0\", \"-n\", s_name, (char *) NULL);\n\t\t\tLOGD(LOG_TAG, \"result %d\", ret);\n\t\t}\n\t\telse\n\t\t{\n\t\t\texeclp(\"am\", \"am\", \"startservice\", \"-n\", s_name, (char *) NULL);\n\t\t}\n\n\t\tLOGD(LOG_TAG , \"exit start-service child process\");\n\t\texit(EXIT_SUCCESS);\n\t}\n\telse\n\t{\n\t\twaitpid(pid, NULL, 0);\n\t}\n}\n```\n这里说明下：execlp执行后，如果没有错误则不返回，有错时才有返回值，因此又fork了一个子进程，然后在子进程中启动指定的Service。其次是Android SDK版本小于17的执行命令有所不同，17及以上命令为：`execlp(\"am\", \"am\", \"startservice\",\n\"--user\", \"0\", \"-n\", s_name, (char *) NULL)`, 17以下:`execlp(\"am\", \"am\", \"startservice\", \"-n\", s_name, (char *) NULL)`。获取version比较简单:\n```c\n#include <sys/system_properties.h>\n\n/**\n * Get the version of current SDK.\n */\nint get_version()\n{\n\tchar value[8] = \"\";\n    __system_property_get(\"ro.build.version.sdk\", value);\n\n    return atoi(value);\n}\n```\n由于编译出来的是可执行的二进制文件，所以调用就不像so库那样了。需要将可执行文件放在assets中，并在执行的时候将其copy至/data/data/packagename/app_bin文件夹下，然后在java中这样调用: \n```java\nString cmd = \"/data/data/<packagename>/app_bin/daemon\"\nRuntime.getRuntime().exec(cmd);\n```\n进程守护大致的原理就是这样了，只要搞清楚了原理，其实是进程守护并不复杂。\n\nps: 并不是所有手机都能用此方法实现进程守护，有的手机（如小米），自带清理进程会清理掉应用相关的所有进程。5.x以上可参考[MarsDaemon][2].\n\n\n[1]: https://github.com/ukanth/afwall\n[2]: https://github.com/Marswin/MarsDaemon","source":"_posts/2015-03-23-android-app-daemon.md","raw":"---\nlayout: post\ntitle: Android App Daemon\ncategory: android\ntags: [ndk]\n---\n\n一直没空把App Daemon的原理整理一下，见不少人在问原理，我这里就把整个流程大概的说一下。关于进程守护，从接触Android没多久就一直想实现，网上给出的方案也是各种各样，有双服务方式，有利用系统定时器方式的等等等等，但我都有过尝试，最终都没有达到自己想要的结果。后来想到自己以前在搞linux的时候用到子进程来处理一些任务，而Android正是基于linux的，觉得这样的话应该是可行的。最初直接在JNI的c代码中fork出一个子进程出来，然后在子进程中加一个while(1)，再在while中sleep并打开一个指定的service，这样一个最简单的守护完成了。但是后来测试发现，虽然能实现功能，不过使用adb shell查看进程(命令: ps | grep com.coolerfall....)，发现fork出来的进程的VSIZE(进程虚拟地址空间大小)和RSS(进程正在使用的物理内存的大小)都很大，而且UI线程有时候会出现莫名其妙的问题，于是进程守护也就暂时放下了。后来由于项目需求，又不得不开始折腾进程守护。一次在看开源项目[afwall][1](android上的流量防火墙)，发现其中的命令是直接使用linux命令行的方式在执行的，这才想起linux可以直接编译一个可执行的二进制文件，然后在命令行中直接执行。看了看Android.mk的文档，加入`include $(BUILD_EXECUTABLE)`可以让c文件编译成在Android上运行的二进制文件，最后把以前的代码直接拿过来，一切OK了。\n<!-- more -->\n原理分析：\n```c\nint main(int argc, char *argv[])\n{\n\tint i;\n\tpid_t pid;\n\n\tif ((pid = fork()) < 0)\n\t{\n\t    exit(EXIT_SUCCESS);\n\t}\n\telse if (pid == 0)\n\t{\n\t\t/* child process become session leader */\n\t\tsetsid();\n\t\t/* change work directory */\n\t\tchdir(\"/\");\n\n\t\tfor (i = 0; i < 3; i ++)\n\t\t{\n\t\t\tclose(i);\n\t\t}\n\t\t\n\t\twhile(1)\n\t\t{\n\t\t\tsleep(interval);\n\n\t\t\tLOGD(LOG_TAG, \"check the service once\");\n\n\t\t\t/* start service */\n\t\t\tstart_service(package_name, service_name);\n\t\t}\n\t}\n\telse\n\t{\n\t\t/* parent process, do nothing */\n\t}\n}\n```\n由于要在shell中直接执行，因此这里使用`int main(int argc, char *argv[])`，让可执行文件有入口。frok出子进程之后，让子进程成为新的会话的领头进程，并与其父进程的会话组和进程组脱离，紧接着就是在子进程中定时去启动服务，这样一个简单的进程守护就OK了。\n其中`start_service`为启动一个Service:\n```c\n/* start daemon service */\nstatic void start_service(char *package_name, char *service_name)\n{\n\t/* get the sdk version */\n\tint version = get_version();\n\n\tpid_t pid;\n\n\tif ((pid = fork()) < 0)\n\t{\n\t\texit(EXIT_SUCCESS);\n\t}\n\telse if (pid == 0)\n\t{\n\t\tif (package_name == NULL || service_name == NULL)\n\t\t{\n\t\t\tLOGE(LOG_TAG, \"package name or service name is null\");\n\t\t\treturn;\n\t\t}\n\n\t\tchar *p_name = str_stitching(package_name, \"/\");\n\t\tchar *s_name = str_stitching(p_name, service_name);\n\t\tLOGD(LOG_TAG, \"service: %s\", s_name);\n\n\t\tif (version >= 17 || version == 0)\n\t\t{\n\t\t\tint ret = execlp(\"am\", \"am\", \"startservice\",\n\t\t\t\t\t\t\"--user\", \"0\", \"-n\", s_name, (char *) NULL);\n\t\t\tLOGD(LOG_TAG, \"result %d\", ret);\n\t\t}\n\t\telse\n\t\t{\n\t\t\texeclp(\"am\", \"am\", \"startservice\", \"-n\", s_name, (char *) NULL);\n\t\t}\n\n\t\tLOGD(LOG_TAG , \"exit start-service child process\");\n\t\texit(EXIT_SUCCESS);\n\t}\n\telse\n\t{\n\t\twaitpid(pid, NULL, 0);\n\t}\n}\n```\n这里说明下：execlp执行后，如果没有错误则不返回，有错时才有返回值，因此又fork了一个子进程，然后在子进程中启动指定的Service。其次是Android SDK版本小于17的执行命令有所不同，17及以上命令为：`execlp(\"am\", \"am\", \"startservice\",\n\"--user\", \"0\", \"-n\", s_name, (char *) NULL)`, 17以下:`execlp(\"am\", \"am\", \"startservice\", \"-n\", s_name, (char *) NULL)`。获取version比较简单:\n```c\n#include <sys/system_properties.h>\n\n/**\n * Get the version of current SDK.\n */\nint get_version()\n{\n\tchar value[8] = \"\";\n    __system_property_get(\"ro.build.version.sdk\", value);\n\n    return atoi(value);\n}\n```\n由于编译出来的是可执行的二进制文件，所以调用就不像so库那样了。需要将可执行文件放在assets中，并在执行的时候将其copy至/data/data/packagename/app_bin文件夹下，然后在java中这样调用: \n```java\nString cmd = \"/data/data/<packagename>/app_bin/daemon\"\nRuntime.getRuntime().exec(cmd);\n```\n进程守护大致的原理就是这样了，只要搞清楚了原理，其实是进程守护并不复杂。\n\nps: 并不是所有手机都能用此方法实现进程守护，有的手机（如小米），自带清理进程会清理掉应用相关的所有进程。5.x以上可参考[MarsDaemon][2].\n\n\n[1]: https://github.com/ukanth/afwall\n[2]: https://github.com/Marswin/MarsDaemon","slug":"android-app-daemon","published":1,"date":"2015-03-22T16:00:00.000Z","updated":"2023-05-23T03:07:55.015Z","comments":1,"photos":[],"link":"","_id":"cli00ivlp000pz0in7iub5b5i","content":"<p>一直没空把 App Daemon 的原理整理一下，见不少人在问原理，我这里就把整个流程大概的说一下。关于进程守护，从接触 Android 没多久就一直想实现，网上给出的方案也是各种各样，有双服务方式，有利用系统定时器方式的等等等等，但我都有过尝试，最终都没有达到自己想要的结果。后来想到自己以前在搞 linux 的时候用到子进程来处理一些任务，而 Android 正是基于 linux 的，觉得这样的话应该是可行的。最初直接在 JNI 的 c 代码中 fork 出一个子进程出来，然后在子进程中加一个 while (1)，再在 while 中 sleep 并打开一个指定的 service，这样一个最简单的守护完成了。但是后来测试发现，虽然能实现功能，不过使用 adb shell 查看进程 (命令: ps | grep com.coolerfall….)，发现 fork 出来的进程的 VSIZE (进程虚拟地址空间大小) 和 RSS (进程正在使用的物理内存的大小) 都很大，而且 UI 线程有时候会出现莫名其妙的问题，于是进程守护也就暂时放下了。后来由于项目需求，又不得不开始折腾进程守护。一次在看开源项目 <a href=\"https://github.com/ukanth/afwall\">afwall</a>(android 上的流量防火墙)，发现其中的命令是直接使用 linux 命令行的方式在执行的，这才想起 linux 可以直接编译一个可执行的二进制文件，然后在命令行中直接执行。看了看 Android.mk 的文档，加入 <code>include $(BUILD_EXECUTABLE)</code> 可以让 c 文件编译成在 Android 上运行的二进制文件，最后把以前的代码直接拿过来，一切 OK 了。</p>\n<span id=\"more\"></span>\n<p>原理分析：</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t<span class=\"type\">pid_t</span> pid;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((pid = fork()) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t    <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\t<span class=\"comment\">/* child process become session leader */</span></span><br><span class=\"line\">\t\tsetsid();</span><br><span class=\"line\">\t\t<span class=\"comment\">/* change work directory */</span></span><br><span class=\"line\">\t\tchdir(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i ++)</span><br><span class=\"line\">\t\t{</span><br><span class=\"line\">\t\t\tclose(i);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t{</span><br><span class=\"line\">\t\t\tsleep(interval);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tLOGD(LOG_TAG, <span class=\"string\">\"check the service once\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/* start service */</span></span><br><span class=\"line\">\t\t\tstart_service(package_name, service_name);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\t<span class=\"comment\">/* parent process, do nothing */</span></span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>由于要在 shell 中直接执行，因此这里使用 <code>int main(int argc, char *argv[])</code>，让可执行文件有入口。frok 出子进程之后，让子进程成为新的会话的领头进程，并与其父进程的会话组和进程组脱离，紧接着就是在子进程中定时去启动服务，这样一个简单的进程守护就 OK 了。<br>其中 <code>start_service</code> 为启动一个 Service:</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* start daemon service */</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">start_service</span><span class=\"params\">(<span class=\"type\">char</span> *package_name, <span class=\"type\">char</span> *service_name)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"comment\">/* get the sdk version */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> version = get_version();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">pid_t</span> pid;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((pid = fork()) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (package_name == <span class=\"literal\">NULL</span> || service_name == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t{</span><br><span class=\"line\">\t\t\tLOGE(LOG_TAG, <span class=\"string\">\"package name or service name is null\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">char</span> *p_name = str_stitching(package_name, <span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">char</span> *s_name = str_stitching(p_name, service_name);</span><br><span class=\"line\">\t\tLOGD(LOG_TAG, <span class=\"string\">\"service: %s\"</span>, s_name);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (version &gt;= <span class=\"number\">17</span> || version == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t{</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> ret = execlp(<span class=\"string\">\"am\"</span>, <span class=\"string\">\"am\"</span>, <span class=\"string\">\"startservice\"</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">\"--user\"</span>, <span class=\"string\">\"0\"</span>, <span class=\"string\">\"-n\"</span>, s_name, (<span class=\"type\">char</span> *) <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t\t\tLOGD(LOG_TAG, <span class=\"string\">\"result %d\"</span>, ret);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t{</span><br><span class=\"line\">\t\t\texeclp(<span class=\"string\">\"am\"</span>, <span class=\"string\">\"am\"</span>, <span class=\"string\">\"startservice\"</span>, <span class=\"string\">\"-n\"</span>, s_name, (<span class=\"type\">char</span> *) <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tLOGD(LOG_TAG , <span class=\"string\">\"exit start-service child process\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\twaitpid(pid, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>这里说明下：execlp 执行后，如果没有错误则不返回，有错时才有返回值，因此又 fork 了一个子进程，然后在子进程中启动指定的 Service。其次是 Android SDK 版本小于 17 的执行命令有所不同，17 及以上命令为：<code>execlp(\"am\", \"am\", \"startservice\", \"--user\", \"0\", \"-n\", s_name, (char *) NULL)</code>, 17 以下:<code>execlp(\"am\", \"am\", \"startservice\", \"-n\", s_name, (char *) NULL)</code>。获取 version 比较简单:</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/system_properties.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Get the version of current SDK.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">get_version</span><span class=\"params\">()</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"type\">char</span> value[<span class=\"number\">8</span>] = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    __system_property_get(<span class=\"string\">\"ro.build.version.sdk\"</span>, value);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> atoi(value);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>由于编译出来的是可执行的二进制文件，所以调用就不像 so 库那样了。需要将可执行文件放在 assets 中，并在执行的时候将其 copy 至 /data/data/packagename/app_bin 文件夹下，然后在 java 中这样调用: </p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">cmd</span> <span class=\"operator\">=</span> <span class=\"string\">\"/data/data/&lt;packagename&gt;/app_bin/daemon\"</span></span><br><span class=\"line\">Runtime.getRuntime().exec(cmd);</span><br></pre></td></tr></tbody></table></figure>\n<p>进程守护大致的原理就是这样了，只要搞清楚了原理，其实是进程守护并不复杂。</p>\n<p>ps: 并不是所有手机都能用此方法实现进程守护，有的手机（如小米），自带清理进程会清理掉应用相关的所有进程。5.x 以上可参考 <a href=\"https://github.com/Marswin/MarsDaemon\">MarsDaemon</a>.</p>\n","site":{"data":{}},"excerpt":"<p>一直没空把 App Daemon 的原理整理一下，见不少人在问原理，我这里就把整个流程大概的说一下。关于进程守护，从接触 Android 没多久就一直想实现，网上给出的方案也是各种各样，有双服务方式，有利用系统定时器方式的等等等等，但我都有过尝试，最终都没有达到自己想要的结果。后来想到自己以前在搞 linux 的时候用到子进程来处理一些任务，而 Android 正是基于 linux 的，觉得这样的话应该是可行的。最初直接在 JNI 的 c 代码中 fork 出一个子进程出来，然后在子进程中加一个 while (1)，再在 while 中 sleep 并打开一个指定的 service，这样一个最简单的守护完成了。但是后来测试发现，虽然能实现功能，不过使用 adb shell 查看进程 (命令: ps | grep com.coolerfall….)，发现 fork 出来的进程的 VSIZE (进程虚拟地址空间大小) 和 RSS (进程正在使用的物理内存的大小) 都很大，而且 UI 线程有时候会出现莫名其妙的问题，于是进程守护也就暂时放下了。后来由于项目需求，又不得不开始折腾进程守护。一次在看开源项目 <a href=\"https://github.com/ukanth/afwall\">afwall</a>(android 上的流量防火墙)，发现其中的命令是直接使用 linux 命令行的方式在执行的，这才想起 linux 可以直接编译一个可执行的二进制文件，然后在命令行中直接执行。看了看 Android.mk 的文档，加入 <code>include $(BUILD_EXECUTABLE)</code> 可以让 c 文件编译成在 Android 上运行的二进制文件，最后把以前的代码直接拿过来，一切 OK 了。</p>","more":"<p>原理分析：</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t<span class=\"type\">pid_t</span> pid;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((pid = fork()) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t    <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\t<span class=\"comment\">/* child process become session leader */</span></span><br><span class=\"line\">\t\tsetsid();</span><br><span class=\"line\">\t\t<span class=\"comment\">/* change work directory */</span></span><br><span class=\"line\">\t\tchdir(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i ++)</span><br><span class=\"line\">\t\t{</span><br><span class=\"line\">\t\t\tclose(i);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t{</span><br><span class=\"line\">\t\t\tsleep(interval);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tLOGD(LOG_TAG, <span class=\"string\">\"check the service once\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/* start service */</span></span><br><span class=\"line\">\t\t\tstart_service(package_name, service_name);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\t<span class=\"comment\">/* parent process, do nothing */</span></span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>由于要在 shell 中直接执行，因此这里使用 <code>int main(int argc, char *argv[])</code>，让可执行文件有入口。frok 出子进程之后，让子进程成为新的会话的领头进程，并与其父进程的会话组和进程组脱离，紧接着就是在子进程中定时去启动服务，这样一个简单的进程守护就 OK 了。<br>其中 <code>start_service</code> 为启动一个 Service:</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* start daemon service */</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">start_service</span><span class=\"params\">(<span class=\"type\">char</span> *package_name, <span class=\"type\">char</span> *service_name)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"comment\">/* get the sdk version */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> version = get_version();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">pid_t</span> pid;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((pid = fork()) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (package_name == <span class=\"literal\">NULL</span> || service_name == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t{</span><br><span class=\"line\">\t\t\tLOGE(LOG_TAG, <span class=\"string\">\"package name or service name is null\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">char</span> *p_name = str_stitching(package_name, <span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">char</span> *s_name = str_stitching(p_name, service_name);</span><br><span class=\"line\">\t\tLOGD(LOG_TAG, <span class=\"string\">\"service: %s\"</span>, s_name);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (version &gt;= <span class=\"number\">17</span> || version == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t{</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> ret = execlp(<span class=\"string\">\"am\"</span>, <span class=\"string\">\"am\"</span>, <span class=\"string\">\"startservice\"</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">\"--user\"</span>, <span class=\"string\">\"0\"</span>, <span class=\"string\">\"-n\"</span>, s_name, (<span class=\"type\">char</span> *) <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t\t\tLOGD(LOG_TAG, <span class=\"string\">\"result %d\"</span>, ret);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t{</span><br><span class=\"line\">\t\t\texeclp(<span class=\"string\">\"am\"</span>, <span class=\"string\">\"am\"</span>, <span class=\"string\">\"startservice\"</span>, <span class=\"string\">\"-n\"</span>, s_name, (<span class=\"type\">char</span> *) <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tLOGD(LOG_TAG , <span class=\"string\">\"exit start-service child process\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\twaitpid(pid, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>这里说明下：execlp 执行后，如果没有错误则不返回，有错时才有返回值，因此又 fork 了一个子进程，然后在子进程中启动指定的 Service。其次是 Android SDK 版本小于 17 的执行命令有所不同，17 及以上命令为：<code>execlp(\"am\", \"am\", \"startservice\", \"--user\", \"0\", \"-n\", s_name, (char *) NULL)</code>, 17 以下:<code>execlp(\"am\", \"am\", \"startservice\", \"-n\", s_name, (char *) NULL)</code>。获取 version 比较简单:</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/system_properties.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Get the version of current SDK.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">get_version</span><span class=\"params\">()</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"type\">char</span> value[<span class=\"number\">8</span>] = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    __system_property_get(<span class=\"string\">\"ro.build.version.sdk\"</span>, value);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> atoi(value);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>由于编译出来的是可执行的二进制文件，所以调用就不像 so 库那样了。需要将可执行文件放在 assets 中，并在执行的时候将其 copy 至 /data/data/packagename/app_bin 文件夹下，然后在 java 中这样调用: </p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">cmd</span> <span class=\"operator\">=</span> <span class=\"string\">\"/data/data/&lt;packagename&gt;/app_bin/daemon\"</span></span><br><span class=\"line\">Runtime.getRuntime().exec(cmd);</span><br></pre></td></tr></tbody></table></figure>\n<p>进程守护大致的原理就是这样了，只要搞清楚了原理，其实是进程守护并不复杂。</p>\n<p>ps: 并不是所有手机都能用此方法实现进程守护，有的手机（如小米），自带清理进程会清理掉应用相关的所有进程。5.x 以上可参考 <a href=\"https://github.com/Marswin/MarsDaemon\">MarsDaemon</a>.</p>"},{"title":"Android activity 的四种 launchMode","_content":"\nAndroid的四种launchMode是我们比较常用的基础点，但是有时候很容易就混淆了。Activity一共有四种启动方式：standard、singleTask、singleInstance、singleTop，四种方式各有个的特点，在不同情况下会使用不同的启动方式。\n<!-- more -->\n\n#### 1. standard启动方式\n这种方式是sdk种默认的方式，如果不给activity设置启动方式，那么就会默认的采用这种启动方式，这种方式在调用startActivity的时候，不管之前是否启动过，系统都会重新创建一个实例出来\n#### 2. singleTask启动方式\n如果有其他task已经创建了这个activity，则会直接调用这个实例\n#### 3. singleInstance启动方式\n新建一个task，并且该task中有且只有一个该activity的实例，如果后面再次调用startActivity，会重用这个实例\n#### 4. singleTop启动方式\n如字面意思，在task栈顶只有一个实例，也就是如果当前栈顶是acticity A，如果启动intent又跳转到A，则不会产生新的实例，但如果A最初不在栈顶，则会产生一个实例（如：任务栈 A B C D，D在栈顶，这个时候有Intent启动了D，则启动后的任务栈情况为A B C D；如果有Intent启动了B，则任务栈的情况为： A B C D B。\n以上为activity的四种方式，比较容易混淆，记录下来以备查看。","source":"_posts/2015-06-03-android-launch-mode.md","raw":"---\ntitle: Android activity的四种launchMode\ncategory: android \ntags: [launch mode]\n---\n\nAndroid的四种launchMode是我们比较常用的基础点，但是有时候很容易就混淆了。Activity一共有四种启动方式：standard、singleTask、singleInstance、singleTop，四种方式各有个的特点，在不同情况下会使用不同的启动方式。\n<!-- more -->\n\n#### 1. standard启动方式\n这种方式是sdk种默认的方式，如果不给activity设置启动方式，那么就会默认的采用这种启动方式，这种方式在调用startActivity的时候，不管之前是否启动过，系统都会重新创建一个实例出来\n#### 2. singleTask启动方式\n如果有其他task已经创建了这个activity，则会直接调用这个实例\n#### 3. singleInstance启动方式\n新建一个task，并且该task中有且只有一个该activity的实例，如果后面再次调用startActivity，会重用这个实例\n#### 4. singleTop启动方式\n如字面意思，在task栈顶只有一个实例，也就是如果当前栈顶是acticity A，如果启动intent又跳转到A，则不会产生新的实例，但如果A最初不在栈顶，则会产生一个实例（如：任务栈 A B C D，D在栈顶，这个时候有Intent启动了D，则启动后的任务栈情况为A B C D；如果有Intent启动了B，则任务栈的情况为： A B C D B。\n以上为activity的四种方式，比较容易混淆，记录下来以备查看。","slug":"android-launch-mode","published":1,"date":"2015-06-02T16:00:00.000Z","updated":"2023-05-23T06:14:11.810Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli00ivlq000rz0in30ss9gns","content":"<p>Android 的四种 launchMode 是我们比较常用的基础点，但是有时候很容易就混淆了。Activity 一共有四种启动方式：standard、singleTask、singleInstance、singleTop，四种方式各有个的特点，在不同情况下会使用不同的启动方式。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"1-standard启动方式\"><a href=\"#1-standard启动方式\" class=\"headerlink\" title=\"1. standard启动方式\"></a>1. standard 启动方式</h4><p>这种方式是 sdk 种默认的方式，如果不给 activity 设置启动方式，那么就会默认的采用这种启动方式，这种方式在调用 startActivity 的时候，不管之前是否启动过，系统都会重新创建一个实例出来</p>\n<h4 id=\"2-singleTask启动方式\"><a href=\"#2-singleTask启动方式\" class=\"headerlink\" title=\"2. singleTask启动方式\"></a>2. singleTask 启动方式</h4><p>如果有其他 task 已经创建了这个 activity，则会直接调用这个实例</p>\n<h4 id=\"3-singleInstance启动方式\"><a href=\"#3-singleInstance启动方式\" class=\"headerlink\" title=\"3. singleInstance启动方式\"></a>3. singleInstance 启动方式</h4><p>新建一个 task，并且该 task 中有且只有一个该 activity 的实例，如果后面再次调用 startActivity，会重用这个实例</p>\n<h4 id=\"4-singleTop启动方式\"><a href=\"#4-singleTop启动方式\" class=\"headerlink\" title=\"4. singleTop启动方式\"></a>4. singleTop 启动方式</h4><p>如字面意思，在 task 栈顶只有一个实例，也就是如果当前栈顶是 acticity A，如果启动 intent 又跳转到 A，则不会产生新的实例，但如果 A 最初不在栈顶，则会产生一个实例（如：任务栈 A B C D，D 在栈顶，这个时候有 Intent 启动了 D，则启动后的任务栈情况为 A B C D；如果有 Intent 启动了 B，则任务栈的情况为： A B C D B。<br>以上为 activity 的四种方式，比较容易混淆，记录下来以备查看。</p>\n","site":{"data":{}},"excerpt":"<p>Android 的四种 launchMode 是我们比较常用的基础点，但是有时候很容易就混淆了。Activity 一共有四种启动方式：standard、singleTask、singleInstance、singleTop，四种方式各有个的特点，在不同情况下会使用不同的启动方式。</p>","more":"<h4 id=\"1-standard启动方式\"><a href=\"#1-standard启动方式\" class=\"headerlink\" title=\"1. standard启动方式\"></a>1. standard 启动方式</h4><p>这种方式是 sdk 种默认的方式，如果不给 activity 设置启动方式，那么就会默认的采用这种启动方式，这种方式在调用 startActivity 的时候，不管之前是否启动过，系统都会重新创建一个实例出来</p>\n<h4 id=\"2-singleTask启动方式\"><a href=\"#2-singleTask启动方式\" class=\"headerlink\" title=\"2. singleTask启动方式\"></a>2. singleTask 启动方式</h4><p>如果有其他 task 已经创建了这个 activity，则会直接调用这个实例</p>\n<h4 id=\"3-singleInstance启动方式\"><a href=\"#3-singleInstance启动方式\" class=\"headerlink\" title=\"3. singleInstance启动方式\"></a>3. singleInstance 启动方式</h4><p>新建一个 task，并且该 task 中有且只有一个该 activity 的实例，如果后面再次调用 startActivity，会重用这个实例</p>\n<h4 id=\"4-singleTop启动方式\"><a href=\"#4-singleTop启动方式\" class=\"headerlink\" title=\"4. singleTop启动方式\"></a>4. singleTop 启动方式</h4><p>如字面意思，在 task 栈顶只有一个实例，也就是如果当前栈顶是 acticity A，如果启动 intent 又跳转到 A，则不会产生新的实例，但如果 A 最初不在栈顶，则会产生一个实例（如：任务栈 A B C D，D 在栈顶，这个时候有 Intent 启动了 D，则启动后的任务栈情况为 A B C D；如果有 Intent 启动了 B，则任务栈的情况为： A B C D B。<br>以上为 activity 的四种方式，比较容易混淆，记录下来以备查看。</p>"},{"title":"linux shell 报错 bad interpreter No such file or directory","_content":"\n最近在linux使用ndk编译一些东西，就使用到了shell脚本，结果在执行的时候出现：\n\t\n\tbash: ./build_android.sh: /bin/bash^M: bad interpreter: No such file or directory\n\n使用vim打开shell脚本，发现并没有问题，最后发现是由于shell脚本在windows下编写的，copy到linux后文本格式不对，所以只需要更改一下文本格式就可以了，用vim打开shell脚本，在命令行模式下：\n\n\t:set fileformat=unix\n\n最后保存退出就可以执行了。","source":"_posts/2015-06-24-bad-interpreter.md","raw":"---\ntitle: linux shell报错bad interpreter No such file or directory\ncategory: tools\ntags: [shell]\n---\n\n最近在linux使用ndk编译一些东西，就使用到了shell脚本，结果在执行的时候出现：\n\t\n\tbash: ./build_android.sh: /bin/bash^M: bad interpreter: No such file or directory\n\n使用vim打开shell脚本，发现并没有问题，最后发现是由于shell脚本在windows下编写的，copy到linux后文本格式不对，所以只需要更改一下文本格式就可以了，用vim打开shell脚本，在命令行模式下：\n\n\t:set fileformat=unix\n\n最后保存退出就可以执行了。","slug":"bad-interpreter","published":1,"date":"2015-06-23T16:00:00.000Z","updated":"2023-05-23T03:07:55.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli00ivls000vz0in72g13hsn","content":"<p>最近在 linux 使用 ndk 编译一些东西，就使用到了 shell 脚本，结果在执行的时候出现：</p>\n<pre><code>bash: ./build_android.sh: /bin/bash^M: bad interpreter: No such file or directory\n</code></pre>\n<p>使用 vim 打开 shell 脚本，发现并没有问题，最后发现是由于 shell 脚本在 windows 下编写的，copy 到 linux 后文本格式不对，所以只需要更改一下文本格式就可以了，用 vim 打开 shell 脚本，在命令行模式下：</p>\n<pre><code>:set fileformat=unix\n</code></pre>\n<p>最后保存退出就可以执行了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在 linux 使用 ndk 编译一些东西，就使用到了 shell 脚本，结果在执行的时候出现：</p>\n<pre><code>bash: ./build_android.sh: /bin/bash^M: bad interpreter: No such file or directory\n</code></pre>\n<p>使用 vim 打开 shell 脚本，发现并没有问题，最后发现是由于 shell 脚本在 windows 下编写的，copy 到 linux 后文本格式不对，所以只需要更改一下文本格式就可以了，用 vim 打开 shell 脚本，在命令行模式下：</p>\n<pre><code>:set fileformat=unix\n</code></pre>\n<p>最后保存退出就可以执行了。</p>\n"},{"layout":"post","title":"Android JNI 类型、方法签名规范","_content":"\n在Android开发中不免会使用到JNI，JNI编程中可以使用javah等工具自动生成jni的头文件，但是如果想自己手动注册，那么就需要了解JNI方法的签名规范，记录一下，以备以后查看。\n<!-- more -->\n\n| Java类型 |  Native类型  | JNI签名 |\n| :------: | :----------: | :-----: |\n| boolean  |   jboolean   |    Z    |\n|   byte   |    jbyte     |    B    |\n|   char   |    jchar     |    C    |\n|  short   |    jshort    |    S    |\n|   int    |     jint     |    I    |\n|   long   |    jlong     |    J    |\n|  float   |    jfloat    |    F    |\n|  double  |   jdouble    |    D    |\n|  byte[]  |  jbyteArray  |   [B    |\n|  char[]  |  jcharArray  |   [C    |\n| short[]  | jshortArray  |   [S    |\n|  int[]   |  jintArray   |   [I    |\n|  long[]  |  jlongArray  |   [L    |\n| float[]  | jfloatArray  |   [F    |\n| double[] | jdoubleArray |   [D    |\n| Java类(例: String) | jstring/jobject | L全类名;(例: Ljava/lang/String; |\n| Java方法(例: start(String path, long pos, long duration)) | Native方法(例: start(jstring path, jlong pos, jlong duration)) | (参数签名...)返回值签名(例: (Ljava/lang/String;JJ)V) |\n\n要注意的是java类的签名，最后的分号不要忘记。String类比较特别，jni提供了就jstring与之对应，java方法签名中，括号里面是所有参数的类型签名，中间无间隔，括号外面是返回值类型签名。","source":"_posts/2015-07-04-jni-signature.md","raw":"---\nlayout: post\ntitle: Android JNI类型、方法签名规范\ncategory: android\ntags: [jni]\n---\n\n在Android开发中不免会使用到JNI，JNI编程中可以使用javah等工具自动生成jni的头文件，但是如果想自己手动注册，那么就需要了解JNI方法的签名规范，记录一下，以备以后查看。\n<!-- more -->\n\n| Java类型 |  Native类型  | JNI签名 |\n| :------: | :----------: | :-----: |\n| boolean  |   jboolean   |    Z    |\n|   byte   |    jbyte     |    B    |\n|   char   |    jchar     |    C    |\n|  short   |    jshort    |    S    |\n|   int    |     jint     |    I    |\n|   long   |    jlong     |    J    |\n|  float   |    jfloat    |    F    |\n|  double  |   jdouble    |    D    |\n|  byte[]  |  jbyteArray  |   [B    |\n|  char[]  |  jcharArray  |   [C    |\n| short[]  | jshortArray  |   [S    |\n|  int[]   |  jintArray   |   [I    |\n|  long[]  |  jlongArray  |   [L    |\n| float[]  | jfloatArray  |   [F    |\n| double[] | jdoubleArray |   [D    |\n| Java类(例: String) | jstring/jobject | L全类名;(例: Ljava/lang/String; |\n| Java方法(例: start(String path, long pos, long duration)) | Native方法(例: start(jstring path, jlong pos, jlong duration)) | (参数签名...)返回值签名(例: (Ljava/lang/String;JJ)V) |\n\n要注意的是java类的签名，最后的分号不要忘记。String类比较特别，jni提供了就jstring与之对应，java方法签名中，括号里面是所有参数的类型签名，中间无间隔，括号外面是返回值类型签名。","slug":"jni-signature","published":1,"date":"2015-07-03T16:00:00.000Z","updated":"2023-05-23T06:14:16.010Z","comments":1,"photos":[],"link":"","_id":"cli00ivls000xz0inapkrewr6","content":"<p>在 Android 开发中不免会使用到 JNI，JNI 编程中可以使用 javah 等工具自动生成 jni 的头文件，但是如果想自己手动注册，那么就需要了解 JNI 方法的签名规范，记录一下，以备以后查看。</p>\n<span id=\"more\"></span>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">Java 类型</th>\n<th align=\"center\"> Native 类型</th>\n<th align=\"center\"> JNI 签名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"> boolean</td>\n<td align=\"center\">jboolean</td>\n<td align=\"center\">Z</td>\n</tr>\n<tr>\n<td align=\"center\">byte</td>\n<td align=\"center\">jbyte</td>\n<td align=\"center\">B</td>\n</tr>\n<tr>\n<td align=\"center\">char</td>\n<td align=\"center\">jchar</td>\n<td align=\"center\">C</td>\n</tr>\n<tr>\n<td align=\"center\">short</td>\n<td align=\"center\">jshort</td>\n<td align=\"center\">S</td>\n</tr>\n<tr>\n<td align=\"center\">int</td>\n<td align=\"center\">jint</td>\n<td align=\"center\">I</td>\n</tr>\n<tr>\n<td align=\"center\">long</td>\n<td align=\"center\">jlong</td>\n<td align=\"center\">J</td>\n</tr>\n<tr>\n<td align=\"center\">float</td>\n<td align=\"center\">jfloat</td>\n<td align=\"center\">F</td>\n</tr>\n<tr>\n<td align=\"center\">double</td>\n<td align=\"center\">jdouble</td>\n<td align=\"center\">D</td>\n</tr>\n<tr>\n<td align=\"center\">byte[]</td>\n<td align=\"center\">jbyteArray</td>\n<td align=\"center\">[B</td>\n</tr>\n<tr>\n<td align=\"center\">char[]</td>\n<td align=\"center\">jcharArray</td>\n<td align=\"center\">[C</td>\n</tr>\n<tr>\n<td align=\"center\">short[]</td>\n<td align=\"center\">jshortArray</td>\n<td align=\"center\">[S</td>\n</tr>\n<tr>\n<td align=\"center\">int[]</td>\n<td align=\"center\">jintArray</td>\n<td align=\"center\">[I</td>\n</tr>\n<tr>\n<td align=\"center\">long[]</td>\n<td align=\"center\">jlongArray</td>\n<td align=\"center\">[L</td>\n</tr>\n<tr>\n<td align=\"center\">float[]</td>\n<td align=\"center\">jfloatArray</td>\n<td align=\"center\">[F</td>\n</tr>\n<tr>\n<td align=\"center\">double[]</td>\n<td align=\"center\">jdoubleArray</td>\n<td align=\"center\">[D</td>\n</tr>\n<tr>\n<td align=\"center\">Java 类 (例: String)</td>\n<td align=\"center\">jstring/jobject</td>\n<td align=\"center\">L 全类名；(例: Ljava/lang/String;</td>\n</tr>\n<tr>\n<td align=\"center\">Java 方法 (例: start (String path, long pos, long duration))</td>\n<td align=\"center\">Native 方法 (例: start (jstring path, jlong pos, jlong duration))</td>\n<td align=\"center\">(参数签名…) 返回值签名 (例: (Ljava/lang/String;JJ) V)</td>\n</tr>\n</tbody></table>\n<p>要注意的是 java 类的签名，最后的分号不要忘记。String 类比较特别，jni 提供了就 jstring 与之对应，java 方法签名中，括号里面是所有参数的类型签名，中间无间隔，括号外面是返回值类型签名。</p>\n","site":{"data":{}},"excerpt":"<p>在 Android 开发中不免会使用到 JNI，JNI 编程中可以使用 javah 等工具自动生成 jni 的头文件，但是如果想自己手动注册，那么就需要了解 JNI 方法的签名规范，记录一下，以备以后查看。</p>","more":"<table>\n<thead>\n<tr>\n<th align=\"center\">Java 类型</th>\n<th align=\"center\"> Native 类型</th>\n<th align=\"center\"> JNI 签名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"> boolean</td>\n<td align=\"center\">jboolean</td>\n<td align=\"center\">Z</td>\n</tr>\n<tr>\n<td align=\"center\">byte</td>\n<td align=\"center\">jbyte</td>\n<td align=\"center\">B</td>\n</tr>\n<tr>\n<td align=\"center\">char</td>\n<td align=\"center\">jchar</td>\n<td align=\"center\">C</td>\n</tr>\n<tr>\n<td align=\"center\">short</td>\n<td align=\"center\">jshort</td>\n<td align=\"center\">S</td>\n</tr>\n<tr>\n<td align=\"center\">int</td>\n<td align=\"center\">jint</td>\n<td align=\"center\">I</td>\n</tr>\n<tr>\n<td align=\"center\">long</td>\n<td align=\"center\">jlong</td>\n<td align=\"center\">J</td>\n</tr>\n<tr>\n<td align=\"center\">float</td>\n<td align=\"center\">jfloat</td>\n<td align=\"center\">F</td>\n</tr>\n<tr>\n<td align=\"center\">double</td>\n<td align=\"center\">jdouble</td>\n<td align=\"center\">D</td>\n</tr>\n<tr>\n<td align=\"center\">byte[]</td>\n<td align=\"center\">jbyteArray</td>\n<td align=\"center\">[B</td>\n</tr>\n<tr>\n<td align=\"center\">char[]</td>\n<td align=\"center\">jcharArray</td>\n<td align=\"center\">[C</td>\n</tr>\n<tr>\n<td align=\"center\">short[]</td>\n<td align=\"center\">jshortArray</td>\n<td align=\"center\">[S</td>\n</tr>\n<tr>\n<td align=\"center\">int[]</td>\n<td align=\"center\">jintArray</td>\n<td align=\"center\">[I</td>\n</tr>\n<tr>\n<td align=\"center\">long[]</td>\n<td align=\"center\">jlongArray</td>\n<td align=\"center\">[L</td>\n</tr>\n<tr>\n<td align=\"center\">float[]</td>\n<td align=\"center\">jfloatArray</td>\n<td align=\"center\">[F</td>\n</tr>\n<tr>\n<td align=\"center\">double[]</td>\n<td align=\"center\">jdoubleArray</td>\n<td align=\"center\">[D</td>\n</tr>\n<tr>\n<td align=\"center\">Java 类 (例: String)</td>\n<td align=\"center\">jstring/jobject</td>\n<td align=\"center\">L 全类名；(例: Ljava/lang/String;</td>\n</tr>\n<tr>\n<td align=\"center\">Java 方法 (例: start (String path, long pos, long duration))</td>\n<td align=\"center\">Native 方法 (例: start (jstring path, jlong pos, jlong duration))</td>\n<td align=\"center\">(参数签名…) 返回值签名 (例: (Ljava/lang/String;JJ) V)</td>\n</tr>\n</tbody></table>\n<p>要注意的是 java 类的签名，最后的分号不要忘记。String 类比较特别，jni 提供了就 jstring 与之对应，java 方法签名中，括号里面是所有参数的类型签名，中间无间隔，括号外面是返回值类型签名。</p>"},{"title":"记录 git 使用中遇到的一些小问题","_content":"\n现在在项目中git的使用已经比较频繁了，难免会遇到各种各样的小问题，这里记录下这些问题。\n#### 1.在push大文件的时候遇到\n\n\terror: RPC failed; result=22, HTTP code = 411\n\tfatal: The remote end hung up unexpectedly\n\tfatal: The remote end hung up unexpectedly\n这个是因为http buffer不够造成的，可以简单配置git来解决：\n\t\n\tgit config http.postBuffer 67108864\n#### 2.想要把已经push的文件（夹）加入到.ignore中\n直接添加到.ignore中是不能成功的，因为已经push到服务器了，需要先删除本地缓存的文件：\n```shell\n$ git rm -r --cached .idea\n```\n然后再将其添加到.ignore中，最后git push就ok了","source":"_posts/2015-05-14-git-problems.md","raw":"---\ntitle: 记录git使用中遇到的一些小问题\ncategory: tools\ntags: [git]\n---\n\n现在在项目中git的使用已经比较频繁了，难免会遇到各种各样的小问题，这里记录下这些问题。\n#### 1.在push大文件的时候遇到\n\n\terror: RPC failed; result=22, HTTP code = 411\n\tfatal: The remote end hung up unexpectedly\n\tfatal: The remote end hung up unexpectedly\n这个是因为http buffer不够造成的，可以简单配置git来解决：\n\t\n\tgit config http.postBuffer 67108864\n#### 2.想要把已经push的文件（夹）加入到.ignore中\n直接添加到.ignore中是不能成功的，因为已经push到服务器了，需要先删除本地缓存的文件：\n```shell\n$ git rm -r --cached .idea\n```\n然后再将其添加到.ignore中，最后git push就ok了","slug":"git-problems","published":1,"date":"2015-05-13T16:00:00.000Z","updated":"2023-05-23T03:07:55.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli00ivlu0011z0indsulhgp2","content":"<p>现在在项目中 git 的使用已经比较频繁了，难免会遇到各种各样的小问题，这里记录下这些问题。</p>\n<h4 id=\"1-在push大文件的时候遇到\"><a href=\"#1-在push大文件的时候遇到\" class=\"headerlink\" title=\"1.在push大文件的时候遇到\"></a>1. 在 push 大文件的时候遇到</h4><pre><code>error: RPC failed; result=22, HTTP code = 411\nfatal: The remote end hung up unexpectedly\nfatal: The remote end hung up unexpectedly\n</code></pre>\n<p>这个是因为 http buffer 不够造成的，可以简单配置 git 来解决：</p>\n<pre><code>git config http.postBuffer 67108864\n</code></pre>\n<h4 id=\"2-想要把已经push的文件（夹）加入到-ignore中\"><a href=\"#2-想要把已经push的文件（夹）加入到-ignore中\" class=\"headerlink\" title=\"2.想要把已经push的文件（夹）加入到.ignore中\"></a>2. 想要把已经 push 的文件（夹）加入到.ignore 中</h4><p>直接添加到.ignore 中是不能成功的，因为已经 push 到服务器了，需要先删除本地缓存的文件：</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">rm</span> -r --cached .idea</span></span><br></pre></td></tr></tbody></table></figure>\n<p>然后再将其添加到.ignore 中，最后 git push 就 ok 了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>现在在项目中 git 的使用已经比较频繁了，难免会遇到各种各样的小问题，这里记录下这些问题。</p>\n<h4 id=\"1-在push大文件的时候遇到\"><a href=\"#1-在push大文件的时候遇到\" class=\"headerlink\" title=\"1.在push大文件的时候遇到\"></a>1. 在 push 大文件的时候遇到</h4><pre><code>error: RPC failed; result=22, HTTP code = 411\nfatal: The remote end hung up unexpectedly\nfatal: The remote end hung up unexpectedly\n</code></pre>\n<p>这个是因为 http buffer 不够造成的，可以简单配置 git 来解决：</p>\n<pre><code>git config http.postBuffer 67108864\n</code></pre>\n<h4 id=\"2-想要把已经push的文件（夹）加入到-ignore中\"><a href=\"#2-想要把已经push的文件（夹）加入到-ignore中\" class=\"headerlink\" title=\"2.想要把已经push的文件（夹）加入到.ignore中\"></a>2. 想要把已经 push 的文件（夹）加入到.ignore 中</h4><p>直接添加到.ignore 中是不能成功的，因为已经 push 到服务器了，需要先删除本地缓存的文件：</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">rm</span> -r --cached .idea</span></span><br></pre></td></tr></tbody></table></figure>\n<p>然后再将其添加到.ignore 中，最后 git push 就 ok 了</p>\n"},{"layout":"post","title":"TextView 实现跑马灯效果","_content":"\n最近在自己的音乐播放器项目中要加入跑马灯效果，于是便研究了下。跑马灯效果是TextView自带的一个属性，使用TextView来实现单个、多个跑马灯效果比较简单。\n<!-- more -->\n#### 1.单个跑马灯效果\n这种比较简单，只需要在布局文件中加入几个属性就可以了：\n```xml\n<TextView\n\tandroid:ellipsize=\"marquee\"\n\tandroid:focusable=\"true\"\n\tandroid:focusableInTouchMode=\"true\"\n\tandroid:marqueeRepeatLimit=\"marquee_forever\"\n\tandroid:singleLine=\"true\" />\n```\n#### 2.多个跑马灯效果\n在同一个layout中，两个TextView如果都设置了焦点，只有后一个会处于focused的状态，这个时候需要写一个类来继承TextView，稍作修改即可：\n```java\npublic class MarqueeView extends TextView {\n\tpublic MarqueeView(Context context) {\n\t\tthis(context, null);\n\t}\n\n\tpublic MarqueeView(Context context, AttributeSet attrs) {\n\t\tthis(context, attrs, 0);\n\t}\n\n\tpublic MarqueeView(Context context, AttributeSet attrs, int defStyleAttr) {\n\t\tsuper(context, attrs, defStyleAttr);\n\t}\n\n\t@Override\n\tprotected void onFocusChanged(boolean focused, int direction, Rect previouslyFocusedRect) {\n\t\tsuper.onFocusChanged(true, direction, previouslyFocusedRect);\n\t}\n\n\t@Override\n\tpublic void onWindowFocusChanged(boolean hasWindowFocus) {\n\t\tsuper.onWindowFocusChanged(true);\n\t}\n\n\t@Override\n\tpublic boolean isFocused() {\n\t\treturn true;\n\t}\n}\n```\n然后就可以在布局文件中使用了：\n```xml\n<MarqueeView\n\tandroid:ellipsize=\"marquee\"\n\tandroid:marqueeRepeatLimit=\"marquee_forever\"\n\tandroid:singleLine=\"true\" />\n```\n#### 3.在appwidget中实现跑马灯效果\nappwidget比较特殊，它只支持几个固定的view，所以就不能实现多个跑马灯效果，只能实现单个效果，不过和在普通layout中的实现稍微有所不同：\n```xml\n<TextView\n\tandroid:ellipsize=\"marquee\"\n\tandroid:focusable=\"true\"\n\tandroid:focusableInTouchMode=\"true\"\n\tandroid:marqueeRepeatLimit=\"marquee_forever\"\n\tandroid:singleLine=\"true\">\n\t<requestFocus\n\t\tandroid:duplicateParentState=\"true\"\n\t\tandroid:focusable=\"true\"\n\t\tandroid:focusableInTouchMode=\"true\"/>\n</TextView>\n```\n需要在TextView中加入requestFocus标签才可以实现跑马灯效果。","source":"_posts/2015-07-21-android-marquee.md","raw":"---\nlayout: post\ntitle: TextView实现跑马灯效果\ncategory: android\ntags: [widget]\n---\n\n最近在自己的音乐播放器项目中要加入跑马灯效果，于是便研究了下。跑马灯效果是TextView自带的一个属性，使用TextView来实现单个、多个跑马灯效果比较简单。\n<!-- more -->\n#### 1.单个跑马灯效果\n这种比较简单，只需要在布局文件中加入几个属性就可以了：\n```xml\n<TextView\n\tandroid:ellipsize=\"marquee\"\n\tandroid:focusable=\"true\"\n\tandroid:focusableInTouchMode=\"true\"\n\tandroid:marqueeRepeatLimit=\"marquee_forever\"\n\tandroid:singleLine=\"true\" />\n```\n#### 2.多个跑马灯效果\n在同一个layout中，两个TextView如果都设置了焦点，只有后一个会处于focused的状态，这个时候需要写一个类来继承TextView，稍作修改即可：\n```java\npublic class MarqueeView extends TextView {\n\tpublic MarqueeView(Context context) {\n\t\tthis(context, null);\n\t}\n\n\tpublic MarqueeView(Context context, AttributeSet attrs) {\n\t\tthis(context, attrs, 0);\n\t}\n\n\tpublic MarqueeView(Context context, AttributeSet attrs, int defStyleAttr) {\n\t\tsuper(context, attrs, defStyleAttr);\n\t}\n\n\t@Override\n\tprotected void onFocusChanged(boolean focused, int direction, Rect previouslyFocusedRect) {\n\t\tsuper.onFocusChanged(true, direction, previouslyFocusedRect);\n\t}\n\n\t@Override\n\tpublic void onWindowFocusChanged(boolean hasWindowFocus) {\n\t\tsuper.onWindowFocusChanged(true);\n\t}\n\n\t@Override\n\tpublic boolean isFocused() {\n\t\treturn true;\n\t}\n}\n```\n然后就可以在布局文件中使用了：\n```xml\n<MarqueeView\n\tandroid:ellipsize=\"marquee\"\n\tandroid:marqueeRepeatLimit=\"marquee_forever\"\n\tandroid:singleLine=\"true\" />\n```\n#### 3.在appwidget中实现跑马灯效果\nappwidget比较特殊，它只支持几个固定的view，所以就不能实现多个跑马灯效果，只能实现单个效果，不过和在普通layout中的实现稍微有所不同：\n```xml\n<TextView\n\tandroid:ellipsize=\"marquee\"\n\tandroid:focusable=\"true\"\n\tandroid:focusableInTouchMode=\"true\"\n\tandroid:marqueeRepeatLimit=\"marquee_forever\"\n\tandroid:singleLine=\"true\">\n\t<requestFocus\n\t\tandroid:duplicateParentState=\"true\"\n\t\tandroid:focusable=\"true\"\n\t\tandroid:focusableInTouchMode=\"true\"/>\n</TextView>\n```\n需要在TextView中加入requestFocus标签才可以实现跑马灯效果。","slug":"android-marquee","published":1,"date":"2015-07-20T16:00:00.000Z","updated":"2023-05-23T06:14:22.424Z","comments":1,"photos":[],"link":"","_id":"cli00ivlu0012z0in12yed6bb","content":"<p>最近在自己的音乐播放器项目中要加入跑马灯效果，于是便研究了下。跑马灯效果是 TextView 自带的一个属性，使用 TextView 来实现单个、多个跑马灯效果比较简单。</p>\n<span id=\"more\"></span>\n<h4 id=\"1-单个跑马灯效果\"><a href=\"#1-单个跑马灯效果\" class=\"headerlink\" title=\"1.单个跑马灯效果\"></a>1. 单个跑马灯效果</h4><p>这种比较简单，只需要在布局文件中加入几个属性就可以了：</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:ellipsize</span>=<span class=\"string\">\"marquee\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:focusable</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:focusableInTouchMode</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:marqueeRepeatLimit</span>=<span class=\"string\">\"marquee_forever\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:singleLine</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n<h4 id=\"2-多个跑马灯效果\"><a href=\"#2-多个跑马灯效果\" class=\"headerlink\" title=\"2.多个跑马灯效果\"></a>2. 多个跑马灯效果</h4><p>在同一个 layout 中，两个 TextView 如果都设置了焦点，只有后一个会处于 focused 的状态，这个时候需要写一个类来继承 TextView，稍作修改即可：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MarqueeView</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">TextView</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">MarqueeView</span><span class=\"params\">(Context context)</span> {</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>(context, <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">MarqueeView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> {</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>(context, attrs, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">MarqueeView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"type\">int</span> defStyleAttr)</span> {</span><br><span class=\"line\">\t\t<span class=\"built_in\">super</span>(context, attrs, defStyleAttr);</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onFocusChanged</span><span class=\"params\">(<span class=\"type\">boolean</span> focused, <span class=\"type\">int</span> direction, Rect previouslyFocusedRect)</span> {</span><br><span class=\"line\">\t\t<span class=\"built_in\">super</span>.onFocusChanged(<span class=\"literal\">true</span>, direction, previouslyFocusedRect);</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onWindowFocusChanged</span><span class=\"params\">(<span class=\"type\">boolean</span> hasWindowFocus)</span> {</span><br><span class=\"line\">\t\t<span class=\"built_in\">super</span>.onWindowFocusChanged(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isFocused</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>然后就可以在布局文件中使用了：</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MarqueeView</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:ellipsize</span>=<span class=\"string\">\"marquee\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:marqueeRepeatLimit</span>=<span class=\"string\">\"marquee_forever\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:singleLine</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n<h4 id=\"3-在appwidget中实现跑马灯效果\"><a href=\"#3-在appwidget中实现跑马灯效果\" class=\"headerlink\" title=\"3.在appwidget中实现跑马灯效果\"></a>3. 在 appwidget 中实现跑马灯效果</h4><p>appwidget 比较特殊，它只支持几个固定的 view，所以就不能实现多个跑马灯效果，只能实现单个效果，不过和在普通 layout 中的实现稍微有所不同：</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:ellipsize</span>=<span class=\"string\">\"marquee\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:focusable</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:focusableInTouchMode</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:marqueeRepeatLimit</span>=<span class=\"string\">\"marquee_forever\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:singleLine</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">requestFocus</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">android:duplicateParentState</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">android:focusable</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">android:focusableInTouchMode</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">TextView</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n<p>需要在 TextView 中加入 requestFocus 标签才可以实现跑马灯效果。</p>\n","site":{"data":{}},"excerpt":"<p>最近在自己的音乐播放器项目中要加入跑马灯效果，于是便研究了下。跑马灯效果是 TextView 自带的一个属性，使用 TextView 来实现单个、多个跑马灯效果比较简单。</p>","more":"<h4 id=\"1-单个跑马灯效果\"><a href=\"#1-单个跑马灯效果\" class=\"headerlink\" title=\"1.单个跑马灯效果\"></a>1. 单个跑马灯效果</h4><p>这种比较简单，只需要在布局文件中加入几个属性就可以了：</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:ellipsize</span>=<span class=\"string\">\"marquee\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:focusable</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:focusableInTouchMode</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:marqueeRepeatLimit</span>=<span class=\"string\">\"marquee_forever\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:singleLine</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n<h4 id=\"2-多个跑马灯效果\"><a href=\"#2-多个跑马灯效果\" class=\"headerlink\" title=\"2.多个跑马灯效果\"></a>2. 多个跑马灯效果</h4><p>在同一个 layout 中，两个 TextView 如果都设置了焦点，只有后一个会处于 focused 的状态，这个时候需要写一个类来继承 TextView，稍作修改即可：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MarqueeView</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">TextView</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">MarqueeView</span><span class=\"params\">(Context context)</span> {</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>(context, <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">MarqueeView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> {</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>(context, attrs, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">MarqueeView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"type\">int</span> defStyleAttr)</span> {</span><br><span class=\"line\">\t\t<span class=\"built_in\">super</span>(context, attrs, defStyleAttr);</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onFocusChanged</span><span class=\"params\">(<span class=\"type\">boolean</span> focused, <span class=\"type\">int</span> direction, Rect previouslyFocusedRect)</span> {</span><br><span class=\"line\">\t\t<span class=\"built_in\">super</span>.onFocusChanged(<span class=\"literal\">true</span>, direction, previouslyFocusedRect);</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onWindowFocusChanged</span><span class=\"params\">(<span class=\"type\">boolean</span> hasWindowFocus)</span> {</span><br><span class=\"line\">\t\t<span class=\"built_in\">super</span>.onWindowFocusChanged(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isFocused</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>然后就可以在布局文件中使用了：</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MarqueeView</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:ellipsize</span>=<span class=\"string\">\"marquee\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:marqueeRepeatLimit</span>=<span class=\"string\">\"marquee_forever\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:singleLine</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n<h4 id=\"3-在appwidget中实现跑马灯效果\"><a href=\"#3-在appwidget中实现跑马灯效果\" class=\"headerlink\" title=\"3.在appwidget中实现跑马灯效果\"></a>3. 在 appwidget 中实现跑马灯效果</h4><p>appwidget 比较特殊，它只支持几个固定的 view，所以就不能实现多个跑马灯效果，只能实现单个效果，不过和在普通 layout 中的实现稍微有所不同：</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:ellipsize</span>=<span class=\"string\">\"marquee\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:focusable</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:focusableInTouchMode</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:marqueeRepeatLimit</span>=<span class=\"string\">\"marquee_forever\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:singleLine</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">requestFocus</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">android:duplicateParentState</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">android:focusable</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">android:focusableInTouchMode</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">TextView</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n<p>需要在 TextView 中加入 requestFocus 标签才可以实现跑马灯效果。</p>"},{"layout":"post","title":"Android JNI 注册的两种方式","_content":"\nAndroid JNI开发时，如何注册JNI的方法，Java才能调用，下面说一下JNI的两种注册方法。\n\n#### 第一种方法：静态注册\n所谓静态注册就是调用java的命令工具javah来生成头文件，然后再实现头文件中的所有函数即可。这种方法比较简单，首先在命令行中（我这里使用的是windows cmd，linux、mac是一样的），进入到src目录下，然后执行：\n```shell\n$ javah -d E:\\SourceCode\\Android\\JniTest\\ -jni com.coolerfall.HelloJni\n```\n其中-d表示生成的头文件的输出目录，可以自行设置，com.coolerfall.HelloJni是包含有native方法的类，native方法如：\n```java\npublic static native void init();\n```\n最后生成一个com_coolerfall_player_HelloJni.h头文件，接下来就可以新建一个c文件实现这些函数就ok了。\n<!-- more -->\n#### 第二种方法：动态注册\n静态方法虽然用起来方便，只需要使用一句命令行就搞定了，但是这种方法我们不知道jni的注册过程是怎样的，而且如果新添加一个方法后，又得重新生成一次，比较麻烦，动态注册就可以避免这个问题。和静态注册的区别在于，不使用javah，而由我们自己来写注册函数等等。\n　　我们可以新建一个c文件，比如init.c，然后在里面添加\n```c\n#include <jni.h>\n\nstatic JNINativeMethod g_methods[] = {\n\t{\"init\", \"()V\", (void *)init},\n\t{\"start\", \"(Ljava/lang/String;JJ)V\", (void *)start},\n};\n\nint register_native_methods(JNIEnv* env, const char* class_name,\n\t\tJNINativeMethod* methods, int num_methods)\n{\n\tjclass clazz;\n\tclazz = (*env)->FindClass(env, class_name);\n\tif (clazz == NULL) {\n\t\treturn JNI_FALSE;\n\t}\n\tif ((*env)->RegisterNatives(env, clazz, methods, num_methods) < 0) {\n\t\treturn JNI_FALSE;\n\t}\n\n\treturn JNI_TRUE;\n}\n\njint JNI_OnLoad(JavaVM *vm, void *reserved)\n{\n\tJNIEnv* env = NULL;\n\n\tif ((*vm)->GetEnv(vm, (void **) &env, JNI_VERSION_1_4) != JNI_OK)\n\t{\n\t\treturn 0;\n\t}\n\n\tif (!register_native_methods(env, \"com/coolerfall/HelloJni\", g_methods,\n\t\t\tsizeof(g_methods) / sizeof(g_methods[0])))\n\t{\n\t\treturn 0;\n\t}\n\n\treturn JNI_VERSION_1_4;\n}\n```\nJava层调用System.loadLibrary(\"xxx\")的时候，会首先进入JNI_OnLoad这个函数里面，因此，我们就在这里面调用register_native_methods对JNI的一些列方法进行注册，最终在register_native_methods调用了jni函数RegisterNatives来对native方法注册到对应的类上去，这样就完成了jni的注册，java就可以调用jni的方法了。使用这种方法时，添加一个native方法就非常方便了，直接在g_methods数组里面添加新的方法即可。\n\n关于g_methods数组里面方法的签名规则可以查看[Android JNI类型、方法签名规范][1]。\n\n\n[1]: http://coolerfall.com/android/jni-signature/","source":"_posts/2015-07-10-jni_register.md","raw":"---\nlayout: post\ntitle: Android JNI注册的两种方式\ncategory: android\ntags: [jni]\n---\n\nAndroid JNI开发时，如何注册JNI的方法，Java才能调用，下面说一下JNI的两种注册方法。\n\n#### 第一种方法：静态注册\n所谓静态注册就是调用java的命令工具javah来生成头文件，然后再实现头文件中的所有函数即可。这种方法比较简单，首先在命令行中（我这里使用的是windows cmd，linux、mac是一样的），进入到src目录下，然后执行：\n```shell\n$ javah -d E:\\SourceCode\\Android\\JniTest\\ -jni com.coolerfall.HelloJni\n```\n其中-d表示生成的头文件的输出目录，可以自行设置，com.coolerfall.HelloJni是包含有native方法的类，native方法如：\n```java\npublic static native void init();\n```\n最后生成一个com_coolerfall_player_HelloJni.h头文件，接下来就可以新建一个c文件实现这些函数就ok了。\n<!-- more -->\n#### 第二种方法：动态注册\n静态方法虽然用起来方便，只需要使用一句命令行就搞定了，但是这种方法我们不知道jni的注册过程是怎样的，而且如果新添加一个方法后，又得重新生成一次，比较麻烦，动态注册就可以避免这个问题。和静态注册的区别在于，不使用javah，而由我们自己来写注册函数等等。\n　　我们可以新建一个c文件，比如init.c，然后在里面添加\n```c\n#include <jni.h>\n\nstatic JNINativeMethod g_methods[] = {\n\t{\"init\", \"()V\", (void *)init},\n\t{\"start\", \"(Ljava/lang/String;JJ)V\", (void *)start},\n};\n\nint register_native_methods(JNIEnv* env, const char* class_name,\n\t\tJNINativeMethod* methods, int num_methods)\n{\n\tjclass clazz;\n\tclazz = (*env)->FindClass(env, class_name);\n\tif (clazz == NULL) {\n\t\treturn JNI_FALSE;\n\t}\n\tif ((*env)->RegisterNatives(env, clazz, methods, num_methods) < 0) {\n\t\treturn JNI_FALSE;\n\t}\n\n\treturn JNI_TRUE;\n}\n\njint JNI_OnLoad(JavaVM *vm, void *reserved)\n{\n\tJNIEnv* env = NULL;\n\n\tif ((*vm)->GetEnv(vm, (void **) &env, JNI_VERSION_1_4) != JNI_OK)\n\t{\n\t\treturn 0;\n\t}\n\n\tif (!register_native_methods(env, \"com/coolerfall/HelloJni\", g_methods,\n\t\t\tsizeof(g_methods) / sizeof(g_methods[0])))\n\t{\n\t\treturn 0;\n\t}\n\n\treturn JNI_VERSION_1_4;\n}\n```\nJava层调用System.loadLibrary(\"xxx\")的时候，会首先进入JNI_OnLoad这个函数里面，因此，我们就在这里面调用register_native_methods对JNI的一些列方法进行注册，最终在register_native_methods调用了jni函数RegisterNatives来对native方法注册到对应的类上去，这样就完成了jni的注册，java就可以调用jni的方法了。使用这种方法时，添加一个native方法就非常方便了，直接在g_methods数组里面添加新的方法即可。\n\n关于g_methods数组里面方法的签名规则可以查看[Android JNI类型、方法签名规范][1]。\n\n\n[1]: http://coolerfall.com/android/jni-signature/","slug":"jni_register","published":1,"date":"2015-07-09T16:00:00.000Z","updated":"2023-05-23T06:14:19.364Z","comments":1,"photos":[],"link":"","_id":"cli00ivlv0016z0inc10084mp","content":"<p>Android JNI 开发时，如何注册 JNI 的方法，Java 才能调用，下面说一下 JNI 的两种注册方法。</p>\n<h4 id=\"第一种方法：静态注册\"><a href=\"#第一种方法：静态注册\" class=\"headerlink\" title=\"第一种方法：静态注册\"></a>第一种方法：静态注册</h4><p>所谓静态注册就是调用 java 的命令工具 javah 来生成头文件，然后再实现头文件中的所有函数即可。这种方法比较简单，首先在命令行中（我这里使用的是 windows cmd，linux、mac 是一样的），进入到 src 目录下，然后执行：</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">javah -d E:\\SourceCode\\Android\\JniTest\\ -jni com.coolerfall.HelloJni</span></span><br></pre></td></tr></tbody></table></figure>\n<p>其中 - d 表示生成的头文件的输出目录，可以自行设置，com.coolerfall.HelloJni 是包含有 native 方法的类，native 方法如：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span>;</span><br></pre></td></tr></tbody></table></figure>\n<p>最后生成一个 com_coolerfall_player_HelloJni.h 头文件，接下来就可以新建一个 c 文件实现这些函数就 ok 了。</p>\n<span id=\"more\"></span>\n<h4 id=\"第二种方法：动态注册\"><a href=\"#第二种方法：动态注册\" class=\"headerlink\" title=\"第二种方法：动态注册\"></a>第二种方法：动态注册</h4><p>静态方法虽然用起来方便，只需要使用一句命令行就搞定了，但是这种方法我们不知道 jni 的注册过程是怎样的，而且如果新添加一个方法后，又得重新生成一次，比较麻烦，动态注册就可以避免这个问题。和静态注册的区别在于，不使用 javah，而由我们自己来写注册函数等等。<br>　　我们可以新建一个 c 文件，比如 init.c，然后在里面添加</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;jni.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> JNINativeMethod g_methods[] = {</span><br><span class=\"line\">\t{<span class=\"string\">\"init\"</span>, <span class=\"string\">\"()V\"</span>, (<span class=\"type\">void</span> *)init},</span><br><span class=\"line\">\t{<span class=\"string\">\"start\"</span>, <span class=\"string\">\"(Ljava/lang/String;JJ)V\"</span>, (<span class=\"type\">void</span> *)start},</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">register_native_methods</span><span class=\"params\">(JNIEnv* env, <span class=\"type\">const</span> <span class=\"type\">char</span>* class_name,</span></span><br><span class=\"line\"><span class=\"params\">\t\tJNINativeMethod* methods, <span class=\"type\">int</span> num_methods)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\tjclass clazz;</span><br><span class=\"line\">\tclazz = (*env)-&gt;FindClass(env, class_name);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (clazz == <span class=\"literal\">NULL</span>) {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> JNI_FALSE;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((*env)-&gt;RegisterNatives(env, clazz, methods, num_methods) &lt; <span class=\"number\">0</span>) {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> JNI_FALSE;</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> JNI_TRUE;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">jint <span class=\"title function_\">JNI_OnLoad</span><span class=\"params\">(JavaVM *vm, <span class=\"type\">void</span> *reserved)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\tJNIEnv* env = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((*vm)-&gt;GetEnv(vm, (<span class=\"type\">void</span> **) &amp;env, JNI_VERSION_1_4) != JNI_OK)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!register_native_methods(env, <span class=\"string\">\"com/coolerfall/HelloJni\"</span>, g_methods,</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">sizeof</span>(g_methods) / <span class=\"keyword\">sizeof</span>(g_methods[<span class=\"number\">0</span>])))</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> JNI_VERSION_1_4;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>Java 层调用 System.loadLibrary (“xxx”) 的时候，会首先进入 JNI_OnLoad 这个函数里面，因此，我们就在这里面调用 register_native_methods 对 JNI 的一些列方法进行注册，最终在 register_native_methods 调用了 jni 函数 RegisterNatives 来对 native 方法注册到对应的类上去，这样就完成了 jni 的注册，java 就可以调用 jni 的方法了。使用这种方法时，添加一个 native 方法就非常方便了，直接在 g_methods 数组里面添加新的方法即可。</p>\n<p>关于 g_methods 数组里面方法的签名规则可以查看 <a href=\"http://coolerfall.com/android/jni-signature/\">Android JNI 类型、方法签名规范</a>。</p>\n","site":{"data":{}},"excerpt":"<p>Android JNI 开发时，如何注册 JNI 的方法，Java 才能调用，下面说一下 JNI 的两种注册方法。</p>\n<h4 id=\"第一种方法：静态注册\"><a href=\"#第一种方法：静态注册\" class=\"headerlink\" title=\"第一种方法：静态注册\"></a>第一种方法：静态注册</h4><p>所谓静态注册就是调用 java 的命令工具 javah 来生成头文件，然后再实现头文件中的所有函数即可。这种方法比较简单，首先在命令行中（我这里使用的是 windows cmd，linux、mac 是一样的），进入到 src 目录下，然后执行：</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">javah -d E:\\SourceCode\\Android\\JniTest\\ -jni com.coolerfall.HelloJni</span></span><br></pre></td></tr></tbody></table></figure>\n<p>其中 - d 表示生成的头文件的输出目录，可以自行设置，com.coolerfall.HelloJni 是包含有 native 方法的类，native 方法如：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span>;</span><br></pre></td></tr></tbody></table></figure>\n<p>最后生成一个 com_coolerfall_player_HelloJni.h 头文件，接下来就可以新建一个 c 文件实现这些函数就 ok 了。</p>","more":"<h4 id=\"第二种方法：动态注册\"><a href=\"#第二种方法：动态注册\" class=\"headerlink\" title=\"第二种方法：动态注册\"></a>第二种方法：动态注册</h4><p>静态方法虽然用起来方便，只需要使用一句命令行就搞定了，但是这种方法我们不知道 jni 的注册过程是怎样的，而且如果新添加一个方法后，又得重新生成一次，比较麻烦，动态注册就可以避免这个问题。和静态注册的区别在于，不使用 javah，而由我们自己来写注册函数等等。<br>　　我们可以新建一个 c 文件，比如 init.c，然后在里面添加</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;jni.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> JNINativeMethod g_methods[] = {</span><br><span class=\"line\">\t{<span class=\"string\">\"init\"</span>, <span class=\"string\">\"()V\"</span>, (<span class=\"type\">void</span> *)init},</span><br><span class=\"line\">\t{<span class=\"string\">\"start\"</span>, <span class=\"string\">\"(Ljava/lang/String;JJ)V\"</span>, (<span class=\"type\">void</span> *)start},</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">register_native_methods</span><span class=\"params\">(JNIEnv* env, <span class=\"type\">const</span> <span class=\"type\">char</span>* class_name,</span></span><br><span class=\"line\"><span class=\"params\">\t\tJNINativeMethod* methods, <span class=\"type\">int</span> num_methods)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\tjclass clazz;</span><br><span class=\"line\">\tclazz = (*env)-&gt;FindClass(env, class_name);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (clazz == <span class=\"literal\">NULL</span>) {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> JNI_FALSE;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((*env)-&gt;RegisterNatives(env, clazz, methods, num_methods) &lt; <span class=\"number\">0</span>) {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> JNI_FALSE;</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> JNI_TRUE;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">jint <span class=\"title function_\">JNI_OnLoad</span><span class=\"params\">(JavaVM *vm, <span class=\"type\">void</span> *reserved)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\tJNIEnv* env = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((*vm)-&gt;GetEnv(vm, (<span class=\"type\">void</span> **) &amp;env, JNI_VERSION_1_4) != JNI_OK)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!register_native_methods(env, <span class=\"string\">\"com/coolerfall/HelloJni\"</span>, g_methods,</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">sizeof</span>(g_methods) / <span class=\"keyword\">sizeof</span>(g_methods[<span class=\"number\">0</span>])))</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> JNI_VERSION_1_4;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>Java 层调用 System.loadLibrary (“xxx”) 的时候，会首先进入 JNI_OnLoad 这个函数里面，因此，我们就在这里面调用 register_native_methods 对 JNI 的一些列方法进行注册，最终在 register_native_methods 调用了 jni 函数 RegisterNatives 来对 native 方法注册到对应的类上去，这样就完成了 jni 的注册，java 就可以调用 jni 的方法了。使用这种方法时，添加一个 native 方法就非常方便了，直接在 g_methods 数组里面添加新的方法即可。</p>\n<p>关于 g_methods 数组里面方法的签名规则可以查看 <a href=\"http://coolerfall.com/android/jni-signature/\">Android JNI 类型、方法签名规范</a>。</p>"},{"layout":"post","title":"Android AppWidget 中实现动画效果","_content":"\n最近在写AppWidget的时候，想实现一个淡入的动画效果，由于AppWidget只支持几种view并且没有提供实现动画的方法，折腾了很久发现只有使用LayoutAnimation可以勉强实现动画效果。\n<!-- more -->\n这里就拿淡入动画作为例子。首先在`res/anim`中新建一个动画`fade_in.xml`：\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<alpha xmlns:android=\"http://schemas.android.com/apk/res/android\"\n       android:duration=\"1200\"\n       android:fromAlpha=\"0.0\"\n       android:interpolator=\"@android:anim/accelerate_interpolator\"\n       android:toAlpha=\"0.8\"/>\n```\n然后再新建一个layoutAnimation，`widget_fade_in.xml`：\n```xml\n<layoutAnimation xmlns:android=\"http://schemas.android.com/apk/res/android\"\n                 android:animation=\"@anim/fade_in\"/>\n```\n动画效果准备好后，接下来就是在AppWidget布局中使用了。比如AppWidget的布局，`widget_layout.xml`如下：\n```xml\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:background=\"@color/widget_bg\">\n\n    <RelativeLayout\n        android:id=\"@+id/widget_layout_iv\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center\"\n        android:layoutAnimation=\"@anim/widget_fade_in\">\n\n        <ImageView\n            android:id=\"@+id/widget_iv\"\n            android:layout_width=\"100.0dip\"\n            android:layout_height=\"100.0dip\"\n            android:layout_centerInParent=\"true\"/>\n\n    </RelativeLayout>\n\n    <TextView\n        android:id=\"@+id/widget_tv\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/app_name\">\n    </TextView>\n\n</LinearLayout>\n```\n要让ImageView实现淡入动画，需要将其单独加入到一个layout中，然后在layout中加入`android:layoutAnimation=\"@anim/widget_fade_in\"`。这样ImageView所在的layout就有动画效果了，不过这个动画效果只会在AppWidget第一次加载的时候有，如果想每隔一段时间去切换，就需要让AppWidget不断的实现重新加载的过程，需要使用到RemoteViews的removeAllViews和addView方法，这两个方法可以让AppWidget的layout刷新来实现重复动画的效果。再新建一个layout文件`widget_image.xml`:\n```xml\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/widget_layout_iv\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_gravity=\"center\"\n    android:layoutAnimation=\"@anim/widget_fade_in\">\n\n    <ImageView\n        android:id=\"@+id/widget_iv\"\n        android:layout_width=\"100.0dip\"\n        android:layout_height=\"100.0dip\"\n        android:layout_centerInParent=\"true\"/>\n\n</RelativeLayout>\n```\n这里面的内容保持和`widget_layout.xml`中要实现动画的layout一致就行了。\n最后需要在AppWidgetProvider中使用removeAllViews和addView方法：\n```java\npublic class ExampleWidget extends AppWidgetProvider {\n\t@Override\n\tpublic void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {\n\t\tupdateWidget(context, appWidgetManager, appWidgetIds);\n\t}\n\n\tpublic static void updateWidget(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {\n\t\tString pkgName = context.getPackageName();\n\t\tRemoteViews views = new RemoteViews(pkgName, R.layout.widget_layout);\n\t\tRemoteViews subView = new RemoteViews(pkgName, R.layout.widget_image);\n\t\tviews.removeAllViews(R.id.widget_layout);\n\t\tviews.addView(R.id.widget_layout, subView);\n\t}\n}\n```\n最后就是在Activity或者Service中，在需要更新的时候调用`updateWidget`就有动画效果了。","source":"_posts/2015-07-27-app-widget-animation.md","raw":"---\nlayout: post\ntitle: Android AppWidget中实现动画效果\ncategory: android\ntags: [animation]\n---\n\n最近在写AppWidget的时候，想实现一个淡入的动画效果，由于AppWidget只支持几种view并且没有提供实现动画的方法，折腾了很久发现只有使用LayoutAnimation可以勉强实现动画效果。\n<!-- more -->\n这里就拿淡入动画作为例子。首先在`res/anim`中新建一个动画`fade_in.xml`：\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<alpha xmlns:android=\"http://schemas.android.com/apk/res/android\"\n       android:duration=\"1200\"\n       android:fromAlpha=\"0.0\"\n       android:interpolator=\"@android:anim/accelerate_interpolator\"\n       android:toAlpha=\"0.8\"/>\n```\n然后再新建一个layoutAnimation，`widget_fade_in.xml`：\n```xml\n<layoutAnimation xmlns:android=\"http://schemas.android.com/apk/res/android\"\n                 android:animation=\"@anim/fade_in\"/>\n```\n动画效果准备好后，接下来就是在AppWidget布局中使用了。比如AppWidget的布局，`widget_layout.xml`如下：\n```xml\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:background=\"@color/widget_bg\">\n\n    <RelativeLayout\n        android:id=\"@+id/widget_layout_iv\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center\"\n        android:layoutAnimation=\"@anim/widget_fade_in\">\n\n        <ImageView\n            android:id=\"@+id/widget_iv\"\n            android:layout_width=\"100.0dip\"\n            android:layout_height=\"100.0dip\"\n            android:layout_centerInParent=\"true\"/>\n\n    </RelativeLayout>\n\n    <TextView\n        android:id=\"@+id/widget_tv\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/app_name\">\n    </TextView>\n\n</LinearLayout>\n```\n要让ImageView实现淡入动画，需要将其单独加入到一个layout中，然后在layout中加入`android:layoutAnimation=\"@anim/widget_fade_in\"`。这样ImageView所在的layout就有动画效果了，不过这个动画效果只会在AppWidget第一次加载的时候有，如果想每隔一段时间去切换，就需要让AppWidget不断的实现重新加载的过程，需要使用到RemoteViews的removeAllViews和addView方法，这两个方法可以让AppWidget的layout刷新来实现重复动画的效果。再新建一个layout文件`widget_image.xml`:\n```xml\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/widget_layout_iv\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_gravity=\"center\"\n    android:layoutAnimation=\"@anim/widget_fade_in\">\n\n    <ImageView\n        android:id=\"@+id/widget_iv\"\n        android:layout_width=\"100.0dip\"\n        android:layout_height=\"100.0dip\"\n        android:layout_centerInParent=\"true\"/>\n\n</RelativeLayout>\n```\n这里面的内容保持和`widget_layout.xml`中要实现动画的layout一致就行了。\n最后需要在AppWidgetProvider中使用removeAllViews和addView方法：\n```java\npublic class ExampleWidget extends AppWidgetProvider {\n\t@Override\n\tpublic void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {\n\t\tupdateWidget(context, appWidgetManager, appWidgetIds);\n\t}\n\n\tpublic static void updateWidget(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {\n\t\tString pkgName = context.getPackageName();\n\t\tRemoteViews views = new RemoteViews(pkgName, R.layout.widget_layout);\n\t\tRemoteViews subView = new RemoteViews(pkgName, R.layout.widget_image);\n\t\tviews.removeAllViews(R.id.widget_layout);\n\t\tviews.addView(R.id.widget_layout, subView);\n\t}\n}\n```\n最后就是在Activity或者Service中，在需要更新的时候调用`updateWidget`就有动画效果了。","slug":"app-widget-animation","published":1,"date":"2015-07-26T16:00:00.000Z","updated":"2023-05-23T06:14:41.857Z","comments":1,"photos":[],"link":"","_id":"cli00ivlw0019z0ind6g41nw2","content":"<p>最近在写 AppWidget 的时候，想实现一个淡入的动画效果，由于 AppWidget 只支持几种 view 并且没有提供实现动画的方法，折腾了很久发现只有使用 LayoutAnimation 可以勉强实现动画效果。</p>\n<span id=\"more\"></span>\n<p>这里就拿淡入动画作为例子。首先在 <code>res/anim</code> 中新建一个动画 <code>fade_in.xml</code>：</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">alpha</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">android:duration</span>=<span class=\"string\">\"1200\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">android:fromAlpha</span>=<span class=\"string\">\"0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">android:interpolator</span>=<span class=\"string\">\"@android:anim/accelerate_interpolator\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">android:toAlpha</span>=<span class=\"string\">\"0.8\"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n<p>然后再新建一个 layoutAnimation，<code>widget_fade_in.xml</code>：</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layoutAnimation</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                 <span class=\"attr\">android:animation</span>=<span class=\"string\">\"@anim/fade_in\"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n<p>动画效果准备好后，接下来就是在 AppWidget 布局中使用了。比如 AppWidget 的布局，<code>widget_layout.xml</code> 如下：</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/widget_bg\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/widget_layout_iv\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layoutAnimation</span>=<span class=\"string\">\"@anim/widget_fade_in\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/widget_iv\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"100.0dip\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"100.0dip\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_centerInParent</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/widget_tv\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/app_name\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">TextView</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n<p>要让 ImageView 实现淡入动画，需要将其单独加入到一个 layout 中，然后在 layout 中加入 <code>android:layoutAnimation=\"@anim/widget_fade_in\"</code>。这样 ImageView 所在的 layout 就有动画效果了，不过这个动画效果只会在 AppWidget 第一次加载的时候有，如果想每隔一段时间去切换，就需要让 AppWidget 不断的实现重新加载的过程，需要使用到 RemoteViews 的 removeAllViews 和 addView 方法，这两个方法可以让 AppWidget 的 layout 刷新来实现重复动画的效果。再新建一个 layout 文件 <code>widget_image.xml</code>:</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/widget_layout_iv\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layoutAnimation</span>=<span class=\"string\">\"@anim/widget_fade_in\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/widget_iv\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"100.0dip\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"100.0dip\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_centerInParent</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n<p>这里面的内容保持和 <code>widget_layout.xml</code> 中要实现动画的 layout 一致就行了。<br>最后需要在 AppWidgetProvider 中使用 removeAllViews 和 addView 方法：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExampleWidget</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppWidgetProvider</span> {</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onUpdate</span><span class=\"params\">(Context context, AppWidgetManager appWidgetManager, <span class=\"type\">int</span>[] appWidgetIds)</span> {</span><br><span class=\"line\">\t\tupdateWidget(context, appWidgetManager, appWidgetIds);</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateWidget</span><span class=\"params\">(Context context, AppWidgetManager appWidgetManager, <span class=\"type\">int</span>[] appWidgetIds)</span> {</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">pkgName</span> <span class=\"operator\">=</span> context.getPackageName();</span><br><span class=\"line\">\t\t<span class=\"type\">RemoteViews</span> <span class=\"variable\">views</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RemoteViews</span>(pkgName, R.layout.widget_layout);</span><br><span class=\"line\">\t\t<span class=\"type\">RemoteViews</span> <span class=\"variable\">subView</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RemoteViews</span>(pkgName, R.layout.widget_image);</span><br><span class=\"line\">\t\tviews.removeAllViews(R.id.widget_layout);</span><br><span class=\"line\">\t\tviews.addView(R.id.widget_layout, subView);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>最后就是在 Activity 或者 Service 中，在需要更新的时候调用 <code>updateWidget</code> 就有动画效果了。</p>\n","site":{"data":{}},"excerpt":"<p>最近在写 AppWidget 的时候，想实现一个淡入的动画效果，由于 AppWidget 只支持几种 view 并且没有提供实现动画的方法，折腾了很久发现只有使用 LayoutAnimation 可以勉强实现动画效果。</p>","more":"<p>这里就拿淡入动画作为例子。首先在 <code>res/anim</code> 中新建一个动画 <code>fade_in.xml</code>：</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">alpha</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">android:duration</span>=<span class=\"string\">\"1200\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">android:fromAlpha</span>=<span class=\"string\">\"0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">android:interpolator</span>=<span class=\"string\">\"@android:anim/accelerate_interpolator\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">android:toAlpha</span>=<span class=\"string\">\"0.8\"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n<p>然后再新建一个 layoutAnimation，<code>widget_fade_in.xml</code>：</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layoutAnimation</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                 <span class=\"attr\">android:animation</span>=<span class=\"string\">\"@anim/fade_in\"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n<p>动画效果准备好后，接下来就是在 AppWidget 布局中使用了。比如 AppWidget 的布局，<code>widget_layout.xml</code> 如下：</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/widget_bg\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/widget_layout_iv\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layoutAnimation</span>=<span class=\"string\">\"@anim/widget_fade_in\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/widget_iv\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"100.0dip\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"100.0dip\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_centerInParent</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/widget_tv\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/app_name\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">TextView</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n<p>要让 ImageView 实现淡入动画，需要将其单独加入到一个 layout 中，然后在 layout 中加入 <code>android:layoutAnimation=\"@anim/widget_fade_in\"</code>。这样 ImageView 所在的 layout 就有动画效果了，不过这个动画效果只会在 AppWidget 第一次加载的时候有，如果想每隔一段时间去切换，就需要让 AppWidget 不断的实现重新加载的过程，需要使用到 RemoteViews 的 removeAllViews 和 addView 方法，这两个方法可以让 AppWidget 的 layout 刷新来实现重复动画的效果。再新建一个 layout 文件 <code>widget_image.xml</code>:</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/widget_layout_iv\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layoutAnimation</span>=<span class=\"string\">\"@anim/widget_fade_in\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/widget_iv\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"100.0dip\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"100.0dip\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_centerInParent</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n<p>这里面的内容保持和 <code>widget_layout.xml</code> 中要实现动画的 layout 一致就行了。<br>最后需要在 AppWidgetProvider 中使用 removeAllViews 和 addView 方法：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExampleWidget</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppWidgetProvider</span> {</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onUpdate</span><span class=\"params\">(Context context, AppWidgetManager appWidgetManager, <span class=\"type\">int</span>[] appWidgetIds)</span> {</span><br><span class=\"line\">\t\tupdateWidget(context, appWidgetManager, appWidgetIds);</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateWidget</span><span class=\"params\">(Context context, AppWidgetManager appWidgetManager, <span class=\"type\">int</span>[] appWidgetIds)</span> {</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">pkgName</span> <span class=\"operator\">=</span> context.getPackageName();</span><br><span class=\"line\">\t\t<span class=\"type\">RemoteViews</span> <span class=\"variable\">views</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RemoteViews</span>(pkgName, R.layout.widget_layout);</span><br><span class=\"line\">\t\t<span class=\"type\">RemoteViews</span> <span class=\"variable\">subView</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RemoteViews</span>(pkgName, R.layout.widget_image);</span><br><span class=\"line\">\t\tviews.removeAllViews(R.id.widget_layout);</span><br><span class=\"line\">\t\tviews.addView(R.id.widget_layout, subView);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>最后就是在 Activity 或者 Service 中，在需要更新的时候调用 <code>updateWidget</code> 就有动画效果了。</p>"},{"layout":"post","title":"Error: The output jar is empty. Did you specify the proper '-keep' options","_content":"\n最近在写个小工具混淆Android lib包，用到了proguard命令行的方式，结果出现`Error: The output jar is empty. Did you specify the proper '-keep' options`的错误。\"出现这个错误是因为我这里混淆的lib包里面所有方法都没有调用，所以输入类全被压缩移除，导致没有输出。解决这个问题很简单，只需要加上`-dontshrink`就可以了。","source":"_posts/2015-11-20-proguard-shrink-error.md","raw":"---\nlayout: post\ntitle: \"Error: The output jar is empty. Did you specify the proper '-keep' options\"\ncategory: android\ntags: [proguard]\n---\n\n最近在写个小工具混淆Android lib包，用到了proguard命令行的方式，结果出现`Error: The output jar is empty. Did you specify the proper '-keep' options`的错误。\"出现这个错误是因为我这里混淆的lib包里面所有方法都没有调用，所以输入类全被压缩移除，导致没有输出。解决这个问题很简单，只需要加上`-dontshrink`就可以了。","slug":"proguard-shrink-error","published":1,"date":"2015-11-19T16:00:00.000Z","updated":"2023-05-23T06:14:45.100Z","comments":1,"photos":[],"link":"","_id":"cli00ivlx001dz0in5o0veoqq","content":"<p>最近在写个小工具混淆 Android lib 包，用到了 proguard 命令行的方式，结果出现 <code>Error: The output jar is empty. Did you specify the proper '-keep' options</code> 的错误。” 出现这个错误是因为我这里混淆的 lib 包里面所有方法都没有调用，所以输入类全被压缩移除，导致没有输出。解决这个问题很简单，只需要加上 <code>-dontshrink</code> 就可以了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在写个小工具混淆 Android lib 包，用到了 proguard 命令行的方式，结果出现 <code>Error: The output jar is empty. Did you specify the proper '-keep' options</code> 的错误。” 出现这个错误是因为我这里混淆的 lib 包里面所有方法都没有调用，所以输入类全被压缩移除，导致没有输出。解决这个问题很简单，只需要加上 <code>-dontshrink</code> 就可以了。</p>\n"},{"layout":"post","title":"Java 中计算字符串以及文件的 hash 值","_content":"\nAndroid开发中常常会使用到hash值，字符串的hash用的比较多，一般用于字段、存储的key等等，文件的hash一般用于校验文件的正确性，记录下最简单的方式。\n <!-- more -->\n计算字符串的hash值，网上也有其他的计算方法，这里给出一个相对简洁的方法：\n```java\npublic static String md5(String origin) {\n\ttry {\n\t\tMessageDigest md = MessageDigest.getInstance(\"MD5\");\n\t\tmd.update(origin.getBytes(\"UTF-8\"));\n\t\tBigInteger bi = new BigInteger(1, md.digest());\n\n\t\treturn bi.toString(16);\n\t} catch (Exception e) {\n\t\treturn \"\";\n\t}\n}\n```\n注意要把字符串用utf-8的方式获取byte，否则会导致不用语言之间得出的结果不一样（比如php或go）。\n计算文件的hash值略麻烦一点：\n```java\npublic static String fileHash(String filePath) {\n\tFile file = new File(filePath);\n\tif (file == null || !file.exists()) {\n\t\treturn NULL;\n\t}\n\n\tString result = NULL;\n\tFileInputStream fis = null;\n\n\ttry {\n\t\tfis = new FileInputStream(file);\n\t\tMappedByteBuffer mbf = fis.getChannel().map(\n\t\t\t\tFileChannel.MapMode.READ_ONLY, 0, file.length());\n\t\tMessageDigest md = MessageDigest.getInstance(\"MD5\");\n\t\tmd.update(mbf);\n\t\tBigInteger bi = new BigInteger(1, md.digest());\n\t\tresult = bi.toString(16);\n\t} catch (Exception e) {\n\t\treturn NULL;\n\t} finally {\n\t\tif (fis != null) {\n\t\t\ttry {\n\t\t\t\tfis.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\t/* ignore */\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n}\n```\n如果文件较大，这个计算过程可能会比较长。\n\nsha1和sha256的计算方法就很类似了，只需要将`MessageDigest.getInstance(\"MD5\")`换一下就可以用了。go版本的hash计算请查看[go-hash][1]。\n\n[1]: http://coolerfall.com/go/golang-hash","source":"_posts/2015-07-24-java-hash.md","raw":"---\nlayout: post\ntitle: Java中计算字符串以及文件的hash值\ncategory: android\ntags: [hash]\n---\n\nAndroid开发中常常会使用到hash值，字符串的hash用的比较多，一般用于字段、存储的key等等，文件的hash一般用于校验文件的正确性，记录下最简单的方式。\n <!-- more -->\n计算字符串的hash值，网上也有其他的计算方法，这里给出一个相对简洁的方法：\n```java\npublic static String md5(String origin) {\n\ttry {\n\t\tMessageDigest md = MessageDigest.getInstance(\"MD5\");\n\t\tmd.update(origin.getBytes(\"UTF-8\"));\n\t\tBigInteger bi = new BigInteger(1, md.digest());\n\n\t\treturn bi.toString(16);\n\t} catch (Exception e) {\n\t\treturn \"\";\n\t}\n}\n```\n注意要把字符串用utf-8的方式获取byte，否则会导致不用语言之间得出的结果不一样（比如php或go）。\n计算文件的hash值略麻烦一点：\n```java\npublic static String fileHash(String filePath) {\n\tFile file = new File(filePath);\n\tif (file == null || !file.exists()) {\n\t\treturn NULL;\n\t}\n\n\tString result = NULL;\n\tFileInputStream fis = null;\n\n\ttry {\n\t\tfis = new FileInputStream(file);\n\t\tMappedByteBuffer mbf = fis.getChannel().map(\n\t\t\t\tFileChannel.MapMode.READ_ONLY, 0, file.length());\n\t\tMessageDigest md = MessageDigest.getInstance(\"MD5\");\n\t\tmd.update(mbf);\n\t\tBigInteger bi = new BigInteger(1, md.digest());\n\t\tresult = bi.toString(16);\n\t} catch (Exception e) {\n\t\treturn NULL;\n\t} finally {\n\t\tif (fis != null) {\n\t\t\ttry {\n\t\t\t\tfis.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\t/* ignore */\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n}\n```\n如果文件较大，这个计算过程可能会比较长。\n\nsha1和sha256的计算方法就很类似了，只需要将`MessageDigest.getInstance(\"MD5\")`换一下就可以用了。go版本的hash计算请查看[go-hash][1]。\n\n[1]: http://coolerfall.com/go/golang-hash","slug":"java-hash","published":1,"date":"2015-07-23T16:00:00.000Z","updated":"2023-05-23T06:14:39.000Z","comments":1,"photos":[],"link":"","_id":"cli00ivly001hz0in5f88biz9","content":"<p>Android 开发中常常会使用到 hash 值，字符串的 hash 用的比较多，一般用于字段、存储的 key 等等，文件的 hash 一般用于校验文件的正确性，记录下最简单的方式。<br> <span id=\"more\"></span><br>计算字符串的 hash 值，网上也有其他的计算方法，这里给出一个相对简洁的方法：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">md5</span><span class=\"params\">(String origin)</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> {</span><br><span class=\"line\">\t\t<span class=\"type\">MessageDigest</span> <span class=\"variable\">md</span> <span class=\"operator\">=</span> MessageDigest.getInstance(<span class=\"string\">\"MD5\"</span>);</span><br><span class=\"line\">\t\tmd.update(origin.getBytes(<span class=\"string\">\"UTF-8\"</span>));</span><br><span class=\"line\">\t\t<span class=\"type\">BigInteger</span> <span class=\"variable\">bi</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"number\">1</span>, md.digest());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> bi.toString(<span class=\"number\">16</span>);</span><br><span class=\"line\">\t} <span class=\"keyword\">catch</span> (Exception e) {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>注意要把字符串用 utf-8 的方式获取 byte，否则会导致不用语言之间得出的结果不一样（比如 php 或 go）。<br>计算文件的 hash 值略麻烦一点：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">fileHash</span><span class=\"params\">(String filePath)</span> {</span><br><span class=\"line\">\t<span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(filePath);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (file == <span class=\"literal\">null</span> || !file.exists()) {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> NULL;</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> NULL;</span><br><span class=\"line\">\t<span class=\"type\">FileInputStream</span> <span class=\"variable\">fis</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> {</span><br><span class=\"line\">\t\tfis = <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(file);</span><br><span class=\"line\">\t\t<span class=\"type\">MappedByteBuffer</span> <span class=\"variable\">mbf</span> <span class=\"operator\">=</span> fis.getChannel().map(</span><br><span class=\"line\">\t\t\t\tFileChannel.MapMode.READ_ONLY, <span class=\"number\">0</span>, file.length());</span><br><span class=\"line\">\t\t<span class=\"type\">MessageDigest</span> <span class=\"variable\">md</span> <span class=\"operator\">=</span> MessageDigest.getInstance(<span class=\"string\">\"MD5\"</span>);</span><br><span class=\"line\">\t\tmd.update(mbf);</span><br><span class=\"line\">\t\t<span class=\"type\">BigInteger</span> <span class=\"variable\">bi</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"number\">1</span>, md.digest());</span><br><span class=\"line\">\t\tresult = bi.toString(<span class=\"number\">16</span>);</span><br><span class=\"line\">\t} <span class=\"keyword\">catch</span> (Exception e) {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> NULL;</span><br><span class=\"line\">\t} <span class=\"keyword\">finally</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (fis != <span class=\"literal\">null</span>) {</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> {</span><br><span class=\"line\">\t\t\t\tfis.close();</span><br><span class=\"line\">\t\t\t} <span class=\"keyword\">catch</span> (IOException e) {</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">/* ignore */</span></span><br><span class=\"line\">\t\t\t}</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>如果文件较大，这个计算过程可能会比较长。</p>\n<p>sha1 和 sha256 的计算方法就很类似了，只需要将 <code>MessageDigest.getInstance(\"MD5\")</code> 换一下就可以用了。go 版本的 hash 计算请查看 <a href=\"http://coolerfall.com/go/golang-hash\">go-hash</a>。</p>\n","site":{"data":{}},"excerpt":"<p>Android 开发中常常会使用到 hash 值，字符串的 hash 用的比较多，一般用于字段、存储的 key 等等，文件的 hash 一般用于校验文件的正确性，记录下最简单的方式。<br>","more":"<br>计算字符串的 hash 值，网上也有其他的计算方法，这里给出一个相对简洁的方法：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">md5</span><span class=\"params\">(String origin)</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> {</span><br><span class=\"line\">\t\t<span class=\"type\">MessageDigest</span> <span class=\"variable\">md</span> <span class=\"operator\">=</span> MessageDigest.getInstance(<span class=\"string\">\"MD5\"</span>);</span><br><span class=\"line\">\t\tmd.update(origin.getBytes(<span class=\"string\">\"UTF-8\"</span>));</span><br><span class=\"line\">\t\t<span class=\"type\">BigInteger</span> <span class=\"variable\">bi</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"number\">1</span>, md.digest());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> bi.toString(<span class=\"number\">16</span>);</span><br><span class=\"line\">\t} <span class=\"keyword\">catch</span> (Exception e) {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>注意要把字符串用 utf-8 的方式获取 byte，否则会导致不用语言之间得出的结果不一样（比如 php 或 go）。<br>计算文件的 hash 值略麻烦一点：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">fileHash</span><span class=\"params\">(String filePath)</span> {</span><br><span class=\"line\">\t<span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(filePath);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (file == <span class=\"literal\">null</span> || !file.exists()) {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> NULL;</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> NULL;</span><br><span class=\"line\">\t<span class=\"type\">FileInputStream</span> <span class=\"variable\">fis</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> {</span><br><span class=\"line\">\t\tfis = <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(file);</span><br><span class=\"line\">\t\t<span class=\"type\">MappedByteBuffer</span> <span class=\"variable\">mbf</span> <span class=\"operator\">=</span> fis.getChannel().map(</span><br><span class=\"line\">\t\t\t\tFileChannel.MapMode.READ_ONLY, <span class=\"number\">0</span>, file.length());</span><br><span class=\"line\">\t\t<span class=\"type\">MessageDigest</span> <span class=\"variable\">md</span> <span class=\"operator\">=</span> MessageDigest.getInstance(<span class=\"string\">\"MD5\"</span>);</span><br><span class=\"line\">\t\tmd.update(mbf);</span><br><span class=\"line\">\t\t<span class=\"type\">BigInteger</span> <span class=\"variable\">bi</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"number\">1</span>, md.digest());</span><br><span class=\"line\">\t\tresult = bi.toString(<span class=\"number\">16</span>);</span><br><span class=\"line\">\t} <span class=\"keyword\">catch</span> (Exception e) {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> NULL;</span><br><span class=\"line\">\t} <span class=\"keyword\">finally</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (fis != <span class=\"literal\">null</span>) {</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> {</span><br><span class=\"line\">\t\t\t\tfis.close();</span><br><span class=\"line\">\t\t\t} <span class=\"keyword\">catch</span> (IOException e) {</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">/* ignore */</span></span><br><span class=\"line\">\t\t\t}</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>如果文件较大，这个计算过程可能会比较长。</p>\n<p>sha1 和 sha256 的计算方法就很类似了，只需要将 <code>MessageDigest.getInstance(\"MD5\")</code> 换一下就可以用了。go 版本的 hash 计算请查看 <a href=\"http://coolerfall.com/go/golang-hash\">go-hash</a>。</p>"},{"layout":"post","title":"使用 MediaSessionCompat 来实现 Media Button 的监听","_content":"\n在API21之前，如果想实现线控，则只需要使用:\n```java\nAudioManager.reregisterMediaButtonEventReceiver(ComponentName eventReceiver)\n```\n即可，但是最近更新SDK之后发现这个API已经废弃掉了，推荐使用MediaSession来代替。\n<!-- more -->\nAPI21之前的实现可以参考[这篇文章][1]，但是MediaSession是在新的api中加入的，我们可以使用android.support.v4.media.session.MediaSessionCompat：\n```java\n/**\n * Creates a new session.\n *\n * @param context The context.\n * @param tag A short name for debugging purposes.\n * @param mediaButtonEventReceiver The component name for your receiver.\n *            If null, this will attempt to find an appropriate\n *            {@link BroadcastReceiver} that handles\n *            {@link Intent#ACTION_MEDIA_BUTTON} from your manifest.\n *            A receiver is required to support platform versions earlier\n *            than {@link android.os.Build.VERSION_CODES#LOLLIPOP}.\n * @param mbrIntent The PendingIntent for your receiver component that\n *            handles media button events. This is optional and will be used\n *            on {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2} and\n *            later instead of the component name.\n */\npublic MediaSessionCompat(Context context, String tag, ComponentName mediaButtonEventReceiver,\n            PendingIntent mbrIntent) {\n```\nMediaSessionCompat的构造函数一共有四个参数，我们这里简单实现Media Button的监听，只需要context和mediaButtonEventReceiver即可，tag用于调试，mbrIntent设置为null即可。首先和API21之前一样实现了一个MediaButtonReceiver：\n```java\npublic class MediaButtonReceiver extends BroadcastReceiver {\n\t@Override\n\tpublic void onReceive(Context context, Intent intent) {\n\t\tif (!Intent.ACTION_MEDIA_BUTTON.equals(intent.getAction())) {\n\t\t\treturn;\n\t\t}\n\n\t\tKeyEvent event = intent.getParcelableExtra(Intent.EXTRA_KEY_EVENT);\n\t\tif (event == null || event.getAction() != KeyEvent.ACTION_UP) {\n\t\t\treturn;\n\t\t}\n\n\t\t// do something\n\t}\n}\n```\n接下来我们要做的就是new一个MediaSessionCompat：\n```java\npublic class PlayerService extends Service {\n\tprivate MediaSessionCompat mMediaSession;\n\t\n\t@Override\n\tpublic void onCreate() {\n\t\tsuper.onCreate();\n\n\t\tComponentName mbr = new ComponentName(getPackageName(), MediaButtonReceiver.class.getName());\n\t\tmMediaSession = new MediaSessionCompat(this, \"mbr\", mbr, null);\n\t\t/* set flags to handle media buttons */\n\t\tmMediaSession.setFlags(MediaSessionCompat.FLAG_HANDLES_MEDIA_BUTTONS | \n\t\t\tMediaSessionCompat.FLAG_HANDLES_TRANSPORT_CONTROLS);\n\n\t\t/* this is need after Lolipop */\n\t\tmMediaSession.setCallback(new MediaSessionCompat.Callback() {\n\t\t\t@Override\n\t\t\tpublic boolean onMediaButtonEvent(Intent intent) {\n\t\t\t\tif (!Intent.ACTION_MEDIA_BUTTON.equals(intent.getAction())) {\n\t\t\t\t\treturn super.onMediaButtonEvent(intent);\n\t\t\t\t}\n\n\t\t\t\tKeyEvent event = intent.getParcelableExtra(Intent.EXTRA_KEY_EVENT);\n\t\t\t\tif (event == null || event.getAction() != KeyEvent.ACTION_UP) {\n\t\t\t\t\treturn super.onMediaButtonEvent(intent);\n\t\t\t\t}\n\n\t\t\t\t// do something\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\n\t\t/* to make sure the media session is active */\n\t\tif (!mMediaSession.isActive()) {\n\t\t\tmMediaSession.setActive(true);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void onDestroy() {\n\t\tmMediaSession.release();\n\t}\n}\n```\n其他的和API21之前一样，需要在manifest中注册这个MediaButtonReceiver\n```java\n<receiver android:name=\"com.coolerfall.managers.receivers.MediaButtonReceiver\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.MEDIA_BUTTON\"/>\n    </intent-filter>\n</receiver>\n```\n这样就可以实现和API21之前的监听效果了。\n\nPS: API21之前MediaButtonReceiver是必须的；API21之后MediaSessionCompat.setCallback是必须的，因为MediaSessionCompatAPI21之后通过callback来处理media button。\n\n[1]: http://blog.csdn.net/qinjuning/article/details/6938436","source":"_posts/2016-01-06-media-session-compat.md","raw":"---\nlayout: post\ntitle: 使用MediaSessionCompat来实现Media Button的监听\ncategory: android\ntags: [media]\n---\n\n在API21之前，如果想实现线控，则只需要使用:\n```java\nAudioManager.reregisterMediaButtonEventReceiver(ComponentName eventReceiver)\n```\n即可，但是最近更新SDK之后发现这个API已经废弃掉了，推荐使用MediaSession来代替。\n<!-- more -->\nAPI21之前的实现可以参考[这篇文章][1]，但是MediaSession是在新的api中加入的，我们可以使用android.support.v4.media.session.MediaSessionCompat：\n```java\n/**\n * Creates a new session.\n *\n * @param context The context.\n * @param tag A short name for debugging purposes.\n * @param mediaButtonEventReceiver The component name for your receiver.\n *            If null, this will attempt to find an appropriate\n *            {@link BroadcastReceiver} that handles\n *            {@link Intent#ACTION_MEDIA_BUTTON} from your manifest.\n *            A receiver is required to support platform versions earlier\n *            than {@link android.os.Build.VERSION_CODES#LOLLIPOP}.\n * @param mbrIntent The PendingIntent for your receiver component that\n *            handles media button events. This is optional and will be used\n *            on {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2} and\n *            later instead of the component name.\n */\npublic MediaSessionCompat(Context context, String tag, ComponentName mediaButtonEventReceiver,\n            PendingIntent mbrIntent) {\n```\nMediaSessionCompat的构造函数一共有四个参数，我们这里简单实现Media Button的监听，只需要context和mediaButtonEventReceiver即可，tag用于调试，mbrIntent设置为null即可。首先和API21之前一样实现了一个MediaButtonReceiver：\n```java\npublic class MediaButtonReceiver extends BroadcastReceiver {\n\t@Override\n\tpublic void onReceive(Context context, Intent intent) {\n\t\tif (!Intent.ACTION_MEDIA_BUTTON.equals(intent.getAction())) {\n\t\t\treturn;\n\t\t}\n\n\t\tKeyEvent event = intent.getParcelableExtra(Intent.EXTRA_KEY_EVENT);\n\t\tif (event == null || event.getAction() != KeyEvent.ACTION_UP) {\n\t\t\treturn;\n\t\t}\n\n\t\t// do something\n\t}\n}\n```\n接下来我们要做的就是new一个MediaSessionCompat：\n```java\npublic class PlayerService extends Service {\n\tprivate MediaSessionCompat mMediaSession;\n\t\n\t@Override\n\tpublic void onCreate() {\n\t\tsuper.onCreate();\n\n\t\tComponentName mbr = new ComponentName(getPackageName(), MediaButtonReceiver.class.getName());\n\t\tmMediaSession = new MediaSessionCompat(this, \"mbr\", mbr, null);\n\t\t/* set flags to handle media buttons */\n\t\tmMediaSession.setFlags(MediaSessionCompat.FLAG_HANDLES_MEDIA_BUTTONS | \n\t\t\tMediaSessionCompat.FLAG_HANDLES_TRANSPORT_CONTROLS);\n\n\t\t/* this is need after Lolipop */\n\t\tmMediaSession.setCallback(new MediaSessionCompat.Callback() {\n\t\t\t@Override\n\t\t\tpublic boolean onMediaButtonEvent(Intent intent) {\n\t\t\t\tif (!Intent.ACTION_MEDIA_BUTTON.equals(intent.getAction())) {\n\t\t\t\t\treturn super.onMediaButtonEvent(intent);\n\t\t\t\t}\n\n\t\t\t\tKeyEvent event = intent.getParcelableExtra(Intent.EXTRA_KEY_EVENT);\n\t\t\t\tif (event == null || event.getAction() != KeyEvent.ACTION_UP) {\n\t\t\t\t\treturn super.onMediaButtonEvent(intent);\n\t\t\t\t}\n\n\t\t\t\t// do something\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\n\t\t/* to make sure the media session is active */\n\t\tif (!mMediaSession.isActive()) {\n\t\t\tmMediaSession.setActive(true);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void onDestroy() {\n\t\tmMediaSession.release();\n\t}\n}\n```\n其他的和API21之前一样，需要在manifest中注册这个MediaButtonReceiver\n```java\n<receiver android:name=\"com.coolerfall.managers.receivers.MediaButtonReceiver\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.MEDIA_BUTTON\"/>\n    </intent-filter>\n</receiver>\n```\n这样就可以实现和API21之前的监听效果了。\n\nPS: API21之前MediaButtonReceiver是必须的；API21之后MediaSessionCompat.setCallback是必须的，因为MediaSessionCompatAPI21之后通过callback来处理media button。\n\n[1]: http://blog.csdn.net/qinjuning/article/details/6938436","slug":"media-session-compat","published":1,"date":"2016-01-05T16:00:00.000Z","updated":"2023-05-23T06:14:48.363Z","comments":1,"photos":[],"link":"","_id":"cli00ivly001kz0in9ia6h8zm","content":"<p>在 API21 之前，如果想实现线控，则只需要使用:</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AudioManager.reregisterMediaButtonEventReceiver(ComponentName eventReceiver)</span><br></pre></td></tr></tbody></table></figure>\n<p>即可，但是最近更新 SDK 之后发现这个 API 已经废弃掉了，推荐使用 MediaSession 来代替。</p>\n<span id=\"more\"></span>\n<p>API21 之前的实现可以参考<a href=\"http://blog.csdn.net/qinjuning/article/details/6938436\">这篇文章</a>，但是 MediaSession 是在新的 api 中加入的，我们可以使用 android.support.v4.media.session.MediaSessionCompat：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Creates a new session.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> context The context.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> tag A short name for debugging purposes.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> mediaButtonEventReceiver The component name for your receiver.</span></span><br><span class=\"line\"><span class=\"comment\"> *            If null, this will attempt to find an appropriate</span></span><br><span class=\"line\"><span class=\"comment\"> *            {<span class=\"doctag\">@link</span> BroadcastReceiver} that handles</span></span><br><span class=\"line\"><span class=\"comment\"> *            {<span class=\"doctag\">@link</span> Intent#ACTION_MEDIA_BUTTON} from your manifest.</span></span><br><span class=\"line\"><span class=\"comment\"> *            A receiver is required to support platform versions earlier</span></span><br><span class=\"line\"><span class=\"comment\"> *            than {<span class=\"doctag\">@link</span> android.os.Build.VERSION_CODES#LOLLIPOP}.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> mbrIntent The PendingIntent for your receiver component that</span></span><br><span class=\"line\"><span class=\"comment\"> *            handles media button events. This is optional and will be used</span></span><br><span class=\"line\"><span class=\"comment\"> *            on {<span class=\"doctag\">@link</span> android.os.Build.VERSION_CODES#JELLY_BEAN_MR2} and</span></span><br><span class=\"line\"><span class=\"comment\"> *            later instead of the component name.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">MediaSessionCompat</span><span class=\"params\">(Context context, String tag, ComponentName mediaButtonEventReceiver,</span></span><br><span class=\"line\"><span class=\"params\">            PendingIntent mbrIntent)</span> {</span><br></pre></td></tr></tbody></table></figure>\n<p>MediaSessionCompat 的构造函数一共有四个参数，我们这里简单实现 Media Button 的监听，只需要 context 和 mediaButtonEventReceiver 即可，tag 用于调试，mbrIntent 设置为 null 即可。首先和 API21 之前一样实现了一个 MediaButtonReceiver：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MediaButtonReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BroadcastReceiver</span> {</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!Intent.ACTION_MEDIA_BUTTON.equals(intent.getAction())) {</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">KeyEvent</span> <span class=\"variable\">event</span> <span class=\"operator\">=</span> intent.getParcelableExtra(Intent.EXTRA_KEY_EVENT);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (event == <span class=\"literal\">null</span> || event.getAction() != KeyEvent.ACTION_UP) {</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// do something</span></span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>接下来我们要做的就是 new 一个 MediaSessionCompat：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PlayerService</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Service</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> MediaSessionCompat mMediaSession;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t\t<span class=\"built_in\">super</span>.onCreate();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">ComponentName</span> <span class=\"variable\">mbr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ComponentName</span>(getPackageName(), MediaButtonReceiver.class.getName());</span><br><span class=\"line\">\t\tmMediaSession = <span class=\"keyword\">new</span> <span class=\"title class_\">MediaSessionCompat</span>(<span class=\"built_in\">this</span>, <span class=\"string\">\"mbr\"</span>, mbr, <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">/* set flags to handle media buttons */</span></span><br><span class=\"line\">\t\tmMediaSession.setFlags(MediaSessionCompat.FLAG_HANDLES_MEDIA_BUTTONS | </span><br><span class=\"line\">\t\t\tMediaSessionCompat.FLAG_HANDLES_TRANSPORT_CONTROLS);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/* this is need after Lolipop */</span></span><br><span class=\"line\">\t\tmMediaSession.setCallback(<span class=\"keyword\">new</span> <span class=\"title class_\">MediaSessionCompat</span>.Callback() {</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">onMediaButtonEvent</span><span class=\"params\">(Intent intent)</span> {</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!Intent.ACTION_MEDIA_BUTTON.equals(intent.getAction())) {</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.onMediaButtonEvent(intent);</span><br><span class=\"line\">\t\t\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"type\">KeyEvent</span> <span class=\"variable\">event</span> <span class=\"operator\">=</span> intent.getParcelableExtra(Intent.EXTRA_KEY_EVENT);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (event == <span class=\"literal\">null</span> || event.getAction() != KeyEvent.ACTION_UP) {</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.onMediaButtonEvent(intent);</span><br><span class=\"line\">\t\t\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// do something</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t}</span><br><span class=\"line\">\t\t});</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/* to make sure the media session is active */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!mMediaSession.isActive()) {</span><br><span class=\"line\">\t\t\tmMediaSession.setActive(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDestroy</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t\tmMediaSession.release();</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>其他的和 API21 之前一样，需要在 manifest 中注册这个 MediaButtonReceiver</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;receiver android:name=<span class=\"string\">\"com.coolerfall.managers.receivers.MediaButtonReceiver\"</span>&gt;</span><br><span class=\"line\">    &lt;intent-filter&gt;</span><br><span class=\"line\">        &lt;action android:name=<span class=\"string\">\"android.intent.action.MEDIA_BUTTON\"</span>/&gt;</span><br><span class=\"line\">    &lt;/intent-filter&gt;</span><br><span class=\"line\">&lt;/receiver&gt;</span><br></pre></td></tr></tbody></table></figure>\n<p>这样就可以实现和 API21 之前的监听效果了。</p>\n<p>PS: API21 之前 MediaButtonReceiver 是必须的；API21 之后 MediaSessionCompat.setCallback 是必须的，因为 MediaSessionCompatAPI21 之后通过 callback 来处理 media button。</p>\n","site":{"data":{}},"excerpt":"<p>在 API21 之前，如果想实现线控，则只需要使用:</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AudioManager.reregisterMediaButtonEventReceiver(ComponentName eventReceiver)</span><br></pre></td></tr></tbody></table></figure>\n<p>即可，但是最近更新 SDK 之后发现这个 API 已经废弃掉了，推荐使用 MediaSession 来代替。</p>","more":"<p>API21 之前的实现可以参考<a href=\"http://blog.csdn.net/qinjuning/article/details/6938436\">这篇文章</a>，但是 MediaSession 是在新的 api 中加入的，我们可以使用 android.support.v4.media.session.MediaSessionCompat：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Creates a new session.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> context The context.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> tag A short name for debugging purposes.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> mediaButtonEventReceiver The component name for your receiver.</span></span><br><span class=\"line\"><span class=\"comment\"> *            If null, this will attempt to find an appropriate</span></span><br><span class=\"line\"><span class=\"comment\"> *            {<span class=\"doctag\">@link</span> BroadcastReceiver} that handles</span></span><br><span class=\"line\"><span class=\"comment\"> *            {<span class=\"doctag\">@link</span> Intent#ACTION_MEDIA_BUTTON} from your manifest.</span></span><br><span class=\"line\"><span class=\"comment\"> *            A receiver is required to support platform versions earlier</span></span><br><span class=\"line\"><span class=\"comment\"> *            than {<span class=\"doctag\">@link</span> android.os.Build.VERSION_CODES#LOLLIPOP}.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> mbrIntent The PendingIntent for your receiver component that</span></span><br><span class=\"line\"><span class=\"comment\"> *            handles media button events. This is optional and will be used</span></span><br><span class=\"line\"><span class=\"comment\"> *            on {<span class=\"doctag\">@link</span> android.os.Build.VERSION_CODES#JELLY_BEAN_MR2} and</span></span><br><span class=\"line\"><span class=\"comment\"> *            later instead of the component name.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">MediaSessionCompat</span><span class=\"params\">(Context context, String tag, ComponentName mediaButtonEventReceiver,</span></span><br><span class=\"line\"><span class=\"params\">            PendingIntent mbrIntent)</span> {</span><br></pre></td></tr></tbody></table></figure>\n<p>MediaSessionCompat 的构造函数一共有四个参数，我们这里简单实现 Media Button 的监听，只需要 context 和 mediaButtonEventReceiver 即可，tag 用于调试，mbrIntent 设置为 null 即可。首先和 API21 之前一样实现了一个 MediaButtonReceiver：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MediaButtonReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BroadcastReceiver</span> {</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!Intent.ACTION_MEDIA_BUTTON.equals(intent.getAction())) {</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">KeyEvent</span> <span class=\"variable\">event</span> <span class=\"operator\">=</span> intent.getParcelableExtra(Intent.EXTRA_KEY_EVENT);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (event == <span class=\"literal\">null</span> || event.getAction() != KeyEvent.ACTION_UP) {</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// do something</span></span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>接下来我们要做的就是 new 一个 MediaSessionCompat：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PlayerService</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Service</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> MediaSessionCompat mMediaSession;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t\t<span class=\"built_in\">super</span>.onCreate();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">ComponentName</span> <span class=\"variable\">mbr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ComponentName</span>(getPackageName(), MediaButtonReceiver.class.getName());</span><br><span class=\"line\">\t\tmMediaSession = <span class=\"keyword\">new</span> <span class=\"title class_\">MediaSessionCompat</span>(<span class=\"built_in\">this</span>, <span class=\"string\">\"mbr\"</span>, mbr, <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">/* set flags to handle media buttons */</span></span><br><span class=\"line\">\t\tmMediaSession.setFlags(MediaSessionCompat.FLAG_HANDLES_MEDIA_BUTTONS | </span><br><span class=\"line\">\t\t\tMediaSessionCompat.FLAG_HANDLES_TRANSPORT_CONTROLS);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/* this is need after Lolipop */</span></span><br><span class=\"line\">\t\tmMediaSession.setCallback(<span class=\"keyword\">new</span> <span class=\"title class_\">MediaSessionCompat</span>.Callback() {</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">onMediaButtonEvent</span><span class=\"params\">(Intent intent)</span> {</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!Intent.ACTION_MEDIA_BUTTON.equals(intent.getAction())) {</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.onMediaButtonEvent(intent);</span><br><span class=\"line\">\t\t\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"type\">KeyEvent</span> <span class=\"variable\">event</span> <span class=\"operator\">=</span> intent.getParcelableExtra(Intent.EXTRA_KEY_EVENT);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (event == <span class=\"literal\">null</span> || event.getAction() != KeyEvent.ACTION_UP) {</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.onMediaButtonEvent(intent);</span><br><span class=\"line\">\t\t\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// do something</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t}</span><br><span class=\"line\">\t\t});</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/* to make sure the media session is active */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!mMediaSession.isActive()) {</span><br><span class=\"line\">\t\t\tmMediaSession.setActive(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDestroy</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t\tmMediaSession.release();</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>其他的和 API21 之前一样，需要在 manifest 中注册这个 MediaButtonReceiver</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;receiver android:name=<span class=\"string\">\"com.coolerfall.managers.receivers.MediaButtonReceiver\"</span>&gt;</span><br><span class=\"line\">    &lt;intent-filter&gt;</span><br><span class=\"line\">        &lt;action android:name=<span class=\"string\">\"android.intent.action.MEDIA_BUTTON\"</span>/&gt;</span><br><span class=\"line\">    &lt;/intent-filter&gt;</span><br><span class=\"line\">&lt;/receiver&gt;</span><br></pre></td></tr></tbody></table></figure>\n<p>这样就可以实现和 API21 之前的监听效果了。</p>\n<p>PS: API21 之前 MediaButtonReceiver 是必须的；API21 之后 MediaSessionCompat.setCallback 是必须的，因为 MediaSessionCompatAPI21 之后通过 callback 来处理 media button。</p>"},{"layout":"post","title":"Linux c 语言一些字符串操作函数的实现","_content":"\nc语言对字符串的操作函数有很多都没有实现，比如java中的trim、indexOf、substring等等，于是就动手实现了几个字符串操作函数，以备以后开发中使用。\n<!-- more -->\n#### 1.trim函数（去掉字符串首尾空格）\n```c\n/**\n * Remove space from string at the beginning and end.\n *\n * @param src pointer to source string\n */\nvoid trim(char *src)\n{\n\tint i;\n\tint len = strlen(src);\n\tint start = 0, end = len - 1;\n\n\twhile (start < end && src[start] <= ' ' && src[start] != 0)\n\t{\n\t\tstart ++;\n\t}\n\n\twhile (end >= start && src[end] <= ' ' && src[end] != 0)\n\t{\n\t\tend --;\n\t}\n\n\tmemmove(src, src + start, end - start + 1);\n\tsrc[end - start + 1] = '\\0';\n}\n```\n#### 2.index_of函数（获得某个字符串在另一个字符串中第一次出现时的位置）\n```c\n/**\n * To get the index when sub string first appear in src.\n *\n * @param src src string\n * @param sub the string to search\n * @return    the index of substring in source string, \n *            otherwise return -1 if not exists\n */\nint index_of(const char *src, const char *sub)\n{\n\tchar *result = strstr(src, sub);\n\n\treturn result ? strlen(src) - strlen(result) : -1;\n}\n```\n#### 3.last_index_of函数（获得某个字符串在另一个字符串中最后一次出现时的位置）\n```c\n/**\n * To get the index when need string last appear in src.\n *\n * @param src  src string\n * @param need the string to search\n * @return     the index of substring in source string, \n *             otherwise return -1 if not exists\n */\nint last_index_of(const char *src, const char *need)\n{\n\tint i;\n\tconst char *p = src + strlen(src);\n\tsize_t len = strlen(need);\n\tchar *buf;\n\n\tfor(i = 0; i < strlen(src); i ++)\n\t{\n\t\tbuf = strchr(p --, *need);\n\t\tif (!buf)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (strncmp(buf, need, len) == 0)\n\t\t{\n\t\t\treturn strlen(src) - strlen((char *)buf);\n\t\t}\n\t}\n\n\treturn -1;\n}\n```\n#### 4.substring函数（截取字符串）\n```c\n/**\n * Get sub string from source string.\n *\n * @param dest  dest poniter to save string\n * @param src   source string poniter\n * @param start the start index\n * @param end   the end index\n */\nvoid substring(char *dest, const char *src, int start, int end)\n{\n\tint i = start;\n\n\tif (start > strlen(src))\n\t{\n\t\treturn;\n\t}\n\n\tif (end > strlen(src))\n\t{\n\t\tend = strlen(src);\n\t}\n\n\twhile (i < end)\n\t{\n\t\tdest[i - start] = src[i];\n\t\ti ++;\n\t}\n\n\tdest[i - start] = '\\0';\n}\n```\n#### 5.starts_with函数（检测字符串是否以某个字符串开头）\n```c\n/**\n * To check if the string start with specified string.\n *\n * @param  src    source string pointer\n * @param  prefix prefix string poniter\n * @return        ture if start with specified string, otherwise return false\n */\nbool starts_with(const char *src, const char *prefix)\n{\n\tint len = strlen(prefix);\n\tchar buf[len];\n\n\tsubstring(buf, src, 0, len);\n\n\treturn !strcmp(buf, prefix);\n}\n```\n#### 6.ends_with函数（检测字符串是否以某个字符串结尾）\n```c\n/**\n * To check if the string end with specified string.\n *\n * @param  src    source string pointer\n * @param  suffix suffix string poniter\n * @return        ture if end with specified string, otherwise return false\n */\nbool ends_with(const char *src, const char *suffix)\n{\n\tint len = strlen(suffix);\n\tchar buf[len];\n\n\tsubstring(buf, src, strlen(src) - len, strlen(src));\n\n\treturn !strcmp(buf, suffix);\n}\n```\n其中starts_with和ends_with使用了substring函数，其他函数都可以单独使用。","source":"_posts/2015-07-22-linux-c-string-operation.md","raw":"---\nlayout: post\ntitle: Linux c语言一些字符串操作函数的实现\ncategory: c\ntags: [c]\n---\n\nc语言对字符串的操作函数有很多都没有实现，比如java中的trim、indexOf、substring等等，于是就动手实现了几个字符串操作函数，以备以后开发中使用。\n<!-- more -->\n#### 1.trim函数（去掉字符串首尾空格）\n```c\n/**\n * Remove space from string at the beginning and end.\n *\n * @param src pointer to source string\n */\nvoid trim(char *src)\n{\n\tint i;\n\tint len = strlen(src);\n\tint start = 0, end = len - 1;\n\n\twhile (start < end && src[start] <= ' ' && src[start] != 0)\n\t{\n\t\tstart ++;\n\t}\n\n\twhile (end >= start && src[end] <= ' ' && src[end] != 0)\n\t{\n\t\tend --;\n\t}\n\n\tmemmove(src, src + start, end - start + 1);\n\tsrc[end - start + 1] = '\\0';\n}\n```\n#### 2.index_of函数（获得某个字符串在另一个字符串中第一次出现时的位置）\n```c\n/**\n * To get the index when sub string first appear in src.\n *\n * @param src src string\n * @param sub the string to search\n * @return    the index of substring in source string, \n *            otherwise return -1 if not exists\n */\nint index_of(const char *src, const char *sub)\n{\n\tchar *result = strstr(src, sub);\n\n\treturn result ? strlen(src) - strlen(result) : -1;\n}\n```\n#### 3.last_index_of函数（获得某个字符串在另一个字符串中最后一次出现时的位置）\n```c\n/**\n * To get the index when need string last appear in src.\n *\n * @param src  src string\n * @param need the string to search\n * @return     the index of substring in source string, \n *             otherwise return -1 if not exists\n */\nint last_index_of(const char *src, const char *need)\n{\n\tint i;\n\tconst char *p = src + strlen(src);\n\tsize_t len = strlen(need);\n\tchar *buf;\n\n\tfor(i = 0; i < strlen(src); i ++)\n\t{\n\t\tbuf = strchr(p --, *need);\n\t\tif (!buf)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (strncmp(buf, need, len) == 0)\n\t\t{\n\t\t\treturn strlen(src) - strlen((char *)buf);\n\t\t}\n\t}\n\n\treturn -1;\n}\n```\n#### 4.substring函数（截取字符串）\n```c\n/**\n * Get sub string from source string.\n *\n * @param dest  dest poniter to save string\n * @param src   source string poniter\n * @param start the start index\n * @param end   the end index\n */\nvoid substring(char *dest, const char *src, int start, int end)\n{\n\tint i = start;\n\n\tif (start > strlen(src))\n\t{\n\t\treturn;\n\t}\n\n\tif (end > strlen(src))\n\t{\n\t\tend = strlen(src);\n\t}\n\n\twhile (i < end)\n\t{\n\t\tdest[i - start] = src[i];\n\t\ti ++;\n\t}\n\n\tdest[i - start] = '\\0';\n}\n```\n#### 5.starts_with函数（检测字符串是否以某个字符串开头）\n```c\n/**\n * To check if the string start with specified string.\n *\n * @param  src    source string pointer\n * @param  prefix prefix string poniter\n * @return        ture if start with specified string, otherwise return false\n */\nbool starts_with(const char *src, const char *prefix)\n{\n\tint len = strlen(prefix);\n\tchar buf[len];\n\n\tsubstring(buf, src, 0, len);\n\n\treturn !strcmp(buf, prefix);\n}\n```\n#### 6.ends_with函数（检测字符串是否以某个字符串结尾）\n```c\n/**\n * To check if the string end with specified string.\n *\n * @param  src    source string pointer\n * @param  suffix suffix string poniter\n * @return        ture if end with specified string, otherwise return false\n */\nbool ends_with(const char *src, const char *suffix)\n{\n\tint len = strlen(suffix);\n\tchar buf[len];\n\n\tsubstring(buf, src, strlen(src) - len, strlen(src));\n\n\treturn !strcmp(buf, suffix);\n}\n```\n其中starts_with和ends_with使用了substring函数，其他函数都可以单独使用。","slug":"linux-c-string-operation","published":1,"date":"2015-07-21T16:00:00.000Z","updated":"2023-05-23T03:07:55.015Z","comments":1,"photos":[],"link":"","_id":"cli00ivlz001oz0in9mi43n5o","content":"<p>c 语言对字符串的操作函数有很多都没有实现，比如 java 中的 trim、indexOf、substring 等等，于是就动手实现了几个字符串操作函数，以备以后开发中使用。</p>\n<span id=\"more\"></span>\n<h4 id=\"1-trim函数（去掉字符串首尾空格）\"><a href=\"#1-trim函数（去掉字符串首尾空格）\" class=\"headerlink\" title=\"1.trim函数（去掉字符串首尾空格）\"></a>1.trim 函数（去掉字符串首尾空格）</h4><figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Remove space from string at the beginning and end.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param src pointer to source string</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">trim</span><span class=\"params\">(<span class=\"type\">char</span> *src)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t<span class=\"type\">int</span> len = <span class=\"built_in\">strlen</span>(src);</span><br><span class=\"line\">\t<span class=\"type\">int</span> start = <span class=\"number\">0</span>, end = len - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (start &lt; end &amp;&amp; src[start] &lt;= <span class=\"string\">' '</span> &amp;&amp; src[start] != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\tstart ++;</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (end &gt;= start &amp;&amp; src[end] &lt;= <span class=\"string\">' '</span> &amp;&amp; src[end] != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\tend --;</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\tmemmove(src, src + start, end - start + <span class=\"number\">1</span>);</span><br><span class=\"line\">\tsrc[end - start + <span class=\"number\">1</span>] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h4 id=\"2-index-of函数（获得某个字符串在另一个字符串中第一次出现时的位置）\"><a href=\"#2-index-of函数（获得某个字符串在另一个字符串中第一次出现时的位置）\" class=\"headerlink\" title=\"2.index_of函数（获得某个字符串在另一个字符串中第一次出现时的位置）\"></a>2.index_of 函数（获得某个字符串在另一个字符串中第一次出现时的位置）</h4><figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * To get the index when sub string first appear in src.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param src src string</span></span><br><span class=\"line\"><span class=\"comment\"> * @param sub the string to search</span></span><br><span class=\"line\"><span class=\"comment\"> * @return    the index of substring in source string, </span></span><br><span class=\"line\"><span class=\"comment\"> *            otherwise return -1 if not exists</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">index_of</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *src, <span class=\"type\">const</span> <span class=\"type\">char</span> *sub)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"type\">char</span> *result = <span class=\"built_in\">strstr</span>(src, sub);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result ? <span class=\"built_in\">strlen</span>(src) - <span class=\"built_in\">strlen</span>(result) : <span class=\"number\">-1</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h4 id=\"3-last-index-of函数（获得某个字符串在另一个字符串中最后一次出现时的位置）\"><a href=\"#3-last-index-of函数（获得某个字符串在另一个字符串中最后一次出现时的位置）\" class=\"headerlink\" title=\"3.last_index_of函数（获得某个字符串在另一个字符串中最后一次出现时的位置）\"></a>3.last_index_of 函数（获得某个字符串在另一个字符串中最后一次出现时的位置）</h4><figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * To get the index when need string last appear in src.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param src  src string</span></span><br><span class=\"line\"><span class=\"comment\"> * @param need the string to search</span></span><br><span class=\"line\"><span class=\"comment\"> * @return     the index of substring in source string, </span></span><br><span class=\"line\"><span class=\"comment\"> *             otherwise return -1 if not exists</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">last_index_of</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *src, <span class=\"type\">const</span> <span class=\"type\">char</span> *need)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">char</span> *p = src + <span class=\"built_in\">strlen</span>(src);</span><br><span class=\"line\">\t<span class=\"type\">size_t</span> len = <span class=\"built_in\">strlen</span>(need);</span><br><span class=\"line\">\t<span class=\"type\">char</span> *buf;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">strlen</span>(src); i ++)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\tbuf = <span class=\"built_in\">strchr</span>(p --, *need);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!buf)</span><br><span class=\"line\">\t\t{</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">strncmp</span>(buf, need, len) == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t{</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">strlen</span>(src) - <span class=\"built_in\">strlen</span>((<span class=\"type\">char</span> *)buf);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h4 id=\"4-substring函数（截取字符串）\"><a href=\"#4-substring函数（截取字符串）\" class=\"headerlink\" title=\"4.substring函数（截取字符串）\"></a>4.substring 函数（截取字符串）</h4><figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Get sub string from source string.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param dest  dest poniter to save string</span></span><br><span class=\"line\"><span class=\"comment\"> * @param src   source string poniter</span></span><br><span class=\"line\"><span class=\"comment\"> * @param start the start index</span></span><br><span class=\"line\"><span class=\"comment\"> * @param end   the end index</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">substring</span><span class=\"params\">(<span class=\"type\">char</span> *dest, <span class=\"type\">const</span> <span class=\"type\">char</span> *src, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"type\">int</span> i = start;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (start &gt; <span class=\"built_in\">strlen</span>(src))</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (end &gt; <span class=\"built_in\">strlen</span>(src))</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\tend = <span class=\"built_in\">strlen</span>(src);</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (i &lt; end)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\tdest[i - start] = src[i];</span><br><span class=\"line\">\t\ti ++;</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\tdest[i - start] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h4 id=\"5-starts-with函数（检测字符串是否以某个字符串开头）\"><a href=\"#5-starts-with函数（检测字符串是否以某个字符串开头）\" class=\"headerlink\" title=\"5.starts_with函数（检测字符串是否以某个字符串开头）\"></a>5.starts_with 函数（检测字符串是否以某个字符串开头）</h4><figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * To check if the string start with specified string.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  src    source string pointer</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  prefix prefix string poniter</span></span><br><span class=\"line\"><span class=\"comment\"> * @return        ture if start with specified string, otherwise return false</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">starts_with</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *src, <span class=\"type\">const</span> <span class=\"type\">char</span> *prefix)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"type\">int</span> len = <span class=\"built_in\">strlen</span>(prefix);</span><br><span class=\"line\">\t<span class=\"type\">char</span> buf[len];</span><br><span class=\"line\"></span><br><span class=\"line\">\tsubstring(buf, src, <span class=\"number\">0</span>, len);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> !<span class=\"built_in\">strcmp</span>(buf, prefix);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h4 id=\"6-ends-with函数（检测字符串是否以某个字符串结尾）\"><a href=\"#6-ends-with函数（检测字符串是否以某个字符串结尾）\" class=\"headerlink\" title=\"6.ends_with函数（检测字符串是否以某个字符串结尾）\"></a>6.ends_with 函数（检测字符串是否以某个字符串结尾）</h4><figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * To check if the string end with specified string.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  src    source string pointer</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  suffix suffix string poniter</span></span><br><span class=\"line\"><span class=\"comment\"> * @return        ture if end with specified string, otherwise return false</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">ends_with</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *src, <span class=\"type\">const</span> <span class=\"type\">char</span> *suffix)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"type\">int</span> len = <span class=\"built_in\">strlen</span>(suffix);</span><br><span class=\"line\">\t<span class=\"type\">char</span> buf[len];</span><br><span class=\"line\"></span><br><span class=\"line\">\tsubstring(buf, src, <span class=\"built_in\">strlen</span>(src) - len, <span class=\"built_in\">strlen</span>(src));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> !<span class=\"built_in\">strcmp</span>(buf, suffix);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>其中 starts_with 和 ends_with 使用了 substring 函数，其他函数都可以单独使用。</p>\n","site":{"data":{}},"excerpt":"<p>c 语言对字符串的操作函数有很多都没有实现，比如 java 中的 trim、indexOf、substring 等等，于是就动手实现了几个字符串操作函数，以备以后开发中使用。</p>","more":"<h4 id=\"1-trim函数（去掉字符串首尾空格）\"><a href=\"#1-trim函数（去掉字符串首尾空格）\" class=\"headerlink\" title=\"1.trim函数（去掉字符串首尾空格）\"></a>1.trim 函数（去掉字符串首尾空格）</h4><figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Remove space from string at the beginning and end.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param src pointer to source string</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">trim</span><span class=\"params\">(<span class=\"type\">char</span> *src)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t<span class=\"type\">int</span> len = <span class=\"built_in\">strlen</span>(src);</span><br><span class=\"line\">\t<span class=\"type\">int</span> start = <span class=\"number\">0</span>, end = len - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (start &lt; end &amp;&amp; src[start] &lt;= <span class=\"string\">' '</span> &amp;&amp; src[start] != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\tstart ++;</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (end &gt;= start &amp;&amp; src[end] &lt;= <span class=\"string\">' '</span> &amp;&amp; src[end] != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\tend --;</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\tmemmove(src, src + start, end - start + <span class=\"number\">1</span>);</span><br><span class=\"line\">\tsrc[end - start + <span class=\"number\">1</span>] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h4 id=\"2-index-of函数（获得某个字符串在另一个字符串中第一次出现时的位置）\"><a href=\"#2-index-of函数（获得某个字符串在另一个字符串中第一次出现时的位置）\" class=\"headerlink\" title=\"2.index_of函数（获得某个字符串在另一个字符串中第一次出现时的位置）\"></a>2.index_of 函数（获得某个字符串在另一个字符串中第一次出现时的位置）</h4><figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * To get the index when sub string first appear in src.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param src src string</span></span><br><span class=\"line\"><span class=\"comment\"> * @param sub the string to search</span></span><br><span class=\"line\"><span class=\"comment\"> * @return    the index of substring in source string, </span></span><br><span class=\"line\"><span class=\"comment\"> *            otherwise return -1 if not exists</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">index_of</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *src, <span class=\"type\">const</span> <span class=\"type\">char</span> *sub)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"type\">char</span> *result = <span class=\"built_in\">strstr</span>(src, sub);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result ? <span class=\"built_in\">strlen</span>(src) - <span class=\"built_in\">strlen</span>(result) : <span class=\"number\">-1</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h4 id=\"3-last-index-of函数（获得某个字符串在另一个字符串中最后一次出现时的位置）\"><a href=\"#3-last-index-of函数（获得某个字符串在另一个字符串中最后一次出现时的位置）\" class=\"headerlink\" title=\"3.last_index_of函数（获得某个字符串在另一个字符串中最后一次出现时的位置）\"></a>3.last_index_of 函数（获得某个字符串在另一个字符串中最后一次出现时的位置）</h4><figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * To get the index when need string last appear in src.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param src  src string</span></span><br><span class=\"line\"><span class=\"comment\"> * @param need the string to search</span></span><br><span class=\"line\"><span class=\"comment\"> * @return     the index of substring in source string, </span></span><br><span class=\"line\"><span class=\"comment\"> *             otherwise return -1 if not exists</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">last_index_of</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *src, <span class=\"type\">const</span> <span class=\"type\">char</span> *need)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">char</span> *p = src + <span class=\"built_in\">strlen</span>(src);</span><br><span class=\"line\">\t<span class=\"type\">size_t</span> len = <span class=\"built_in\">strlen</span>(need);</span><br><span class=\"line\">\t<span class=\"type\">char</span> *buf;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">strlen</span>(src); i ++)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\tbuf = <span class=\"built_in\">strchr</span>(p --, *need);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!buf)</span><br><span class=\"line\">\t\t{</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">strncmp</span>(buf, need, len) == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t{</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">strlen</span>(src) - <span class=\"built_in\">strlen</span>((<span class=\"type\">char</span> *)buf);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h4 id=\"4-substring函数（截取字符串）\"><a href=\"#4-substring函数（截取字符串）\" class=\"headerlink\" title=\"4.substring函数（截取字符串）\"></a>4.substring 函数（截取字符串）</h4><figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Get sub string from source string.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param dest  dest poniter to save string</span></span><br><span class=\"line\"><span class=\"comment\"> * @param src   source string poniter</span></span><br><span class=\"line\"><span class=\"comment\"> * @param start the start index</span></span><br><span class=\"line\"><span class=\"comment\"> * @param end   the end index</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">substring</span><span class=\"params\">(<span class=\"type\">char</span> *dest, <span class=\"type\">const</span> <span class=\"type\">char</span> *src, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"type\">int</span> i = start;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (start &gt; <span class=\"built_in\">strlen</span>(src))</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (end &gt; <span class=\"built_in\">strlen</span>(src))</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\tend = <span class=\"built_in\">strlen</span>(src);</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (i &lt; end)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\tdest[i - start] = src[i];</span><br><span class=\"line\">\t\ti ++;</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\tdest[i - start] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h4 id=\"5-starts-with函数（检测字符串是否以某个字符串开头）\"><a href=\"#5-starts-with函数（检测字符串是否以某个字符串开头）\" class=\"headerlink\" title=\"5.starts_with函数（检测字符串是否以某个字符串开头）\"></a>5.starts_with 函数（检测字符串是否以某个字符串开头）</h4><figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * To check if the string start with specified string.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  src    source string pointer</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  prefix prefix string poniter</span></span><br><span class=\"line\"><span class=\"comment\"> * @return        ture if start with specified string, otherwise return false</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">starts_with</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *src, <span class=\"type\">const</span> <span class=\"type\">char</span> *prefix)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"type\">int</span> len = <span class=\"built_in\">strlen</span>(prefix);</span><br><span class=\"line\">\t<span class=\"type\">char</span> buf[len];</span><br><span class=\"line\"></span><br><span class=\"line\">\tsubstring(buf, src, <span class=\"number\">0</span>, len);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> !<span class=\"built_in\">strcmp</span>(buf, prefix);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h4 id=\"6-ends-with函数（检测字符串是否以某个字符串结尾）\"><a href=\"#6-ends-with函数（检测字符串是否以某个字符串结尾）\" class=\"headerlink\" title=\"6.ends_with函数（检测字符串是否以某个字符串结尾）\"></a>6.ends_with 函数（检测字符串是否以某个字符串结尾）</h4><figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * To check if the string end with specified string.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  src    source string pointer</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  suffix suffix string poniter</span></span><br><span class=\"line\"><span class=\"comment\"> * @return        ture if end with specified string, otherwise return false</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">ends_with</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *src, <span class=\"type\">const</span> <span class=\"type\">char</span> *suffix)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"type\">int</span> len = <span class=\"built_in\">strlen</span>(suffix);</span><br><span class=\"line\">\t<span class=\"type\">char</span> buf[len];</span><br><span class=\"line\"></span><br><span class=\"line\">\tsubstring(buf, src, <span class=\"built_in\">strlen</span>(src) - len, <span class=\"built_in\">strlen</span>(src));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> !<span class=\"built_in\">strcmp</span>(buf, suffix);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>其中 starts_with 和 ends_with 使用了 substring 函数，其他函数都可以单独使用。</p>"},{"layout":"post","title":"使用 UrlQuerySanitizer 来处理 url","_content":"\n网上对于UrlQuerySanitizer的资料比较少，这个是Android提供的一个用来处理url的API。由于项目的需要，需要对url的query参数进行排序，因此需要解析url并处理query参数。\n<!-- more -->\n最初的方法是使用Uri：\n```java\npublic void parseUrl(String url) {\n\tUri uri = Uri.parse(url);\n\tSet<String> query = uri.getQueryParameterNames();\n\tif (!query.isEmpty()) {\n\t\tTreeSet<String> treeQuery = new TreeSet<>(query);\n\t\tfor (String key : treeQuery) {\n\t\t\tString value = uri.getQueryParameter(key);\n\t\t}\n\t}\n}\n```\n通过这样的方式就可以解析url，并获取到各个query参数。但后来发现Uri不能处理一些特殊字符，比如`#`，Uri会截断`#`以后的内容，这样就不能满足开发需求。经过各种google，最后发现了一个UrlQuerySanitizer的API：\n```java\npublic void parseUrl(String url) {\n\tUrlQuerySanitizer sanitizer = new UrlQuerySanitizer();\n\tsanitizer.setAllowUnregisteredParamaters(true);\n\tsanitizer.setUnregisteredParameterValueSanitizer(UrlQuerySanitizer.getAllButNulLegal());\n\tsanitizer.parseUrl(url);\n\tfinal Set<String> query = sanitizer.getParameterSet();\n\tif (!query.isEmpty()) {\n\t\tTreeSet<String> treeQuery = new TreeSet<>(query);\n\t\tfor (String key : treeQuery) {\n\t\t\tString value = sanitizer.getValue(key);\n\t\t}\n\t}\n}\n```\n首先要使用`setAllowUnregisteredParamaters`让其支持特殊字符，然后使用`setUnregisteredParameterValueSanitizer`来设置支持哪些特殊字符，UrlQuerySanitizer提供了集中默认的ValueSanitizer：\n```java\n/**\n * Return a value sanitizer that does not allow any special characters,\n * and also does not allow script URLs.\n * @return a value sanitizer\n */\npublic static final ValueSanitizer getAllIllegal() {\n\treturn sAllIllegal;\n}\n\n/**\n * Return a value sanitizer that allows everything except Nul ('\\0')\n * characters. Script URLs are allowed.\n * @return a value sanitizer\n */\npublic static final ValueSanitizer getAllButNulLegal() {\n\treturn sAllButNulLegal;\n}\n/**\n * Return a value sanitizer that allows everything except Nul ('\\0')\n * characters, space (' '), and other whitespace characters.\n * Script URLs are allowed.\n * @return a value sanitizer\n */\npublic static final ValueSanitizer getAllButWhitespaceLegal() {\n\treturn sAllButWhitespaceLegal;\n}\n/**\n * Return a value sanitizer that allows all the characters used by\n * encoded URLs. Does not allow script URLs.\n * @return a value sanitizer\n */\npublic static final ValueSanitizer getUrlLegal() {\n\treturn sURLLegal;\n}\n/**\n * Return a value sanitizer that allows all the characters used by\n * encoded URLs and allows spaces, which are not technically legal\n * in encoded URLs, but commonly appear anyway.\n * Does not allow script URLs.\n * @return a value sanitizer\n */\npublic static final ValueSanitizer getUrlAndSpaceLegal() {\n\treturn sUrlAndSpaceLegal;\n}\n/**\n * Return a value sanitizer that does not allow any special characters\n * except ampersand ('&'). Does not allow script URLs.\n * @return a value sanitizer\n */\npublic static final ValueSanitizer getAmpLegal() {\n\treturn sAmpLegal;\n}\n/**\n * Return a value sanitizer that does not allow any special characters\n * except ampersand ('&') and space (' '). Does not allow script URLs.\n * @return a value sanitizer\n */\npublic static final ValueSanitizer getAmpAndSpaceLegal() {\n\treturn sAmpAndSpaceLegal;\n}\n/**\n * Return a value sanitizer that does not allow any special characters\n * except space (' '). Does not allow script URLs.\n * @return a value sanitizer\n */\npublic static final ValueSanitizer getSpaceLegal() {\n\treturn sSpaceLegal;\n}\n/**\n * Return a value sanitizer that allows any special characters\n * except angle brackets ('<' and '>') and Nul ('\\0').\n * Allows script URLs.\n * @return a value sanitizer\n */\npublic static final ValueSanitizer getAllButNulAndAngleBracketsLegal() {\n\treturn sAllButNulAndAngleBracketsLegal;\n}\n```\n每种ValueSanitizer都对应过滤哪些字符，被过滤掉的特殊字符会被替换成_或者空格。\n如果默认的ValueSanitizer不能满足开发需求，还可以自己构造ValueSanitizer：\n```java\npublic void parseUrl(String url) {\n\t.....\n\tValueSanitizer sanitizer = new UrlQuerySanitizer.IllegalCharacterValueSanitizer(UrlQuerySanitizer.IllegalCharacterValueSanitizer.ALL_OK);\n\tsetUnregisteredParameterValueSanitizer(sanitizer);\n\t.....\n}\n```\nUrlQuerySanitizer也可以通过key来获取相应的value，比如给一个url：http://coolerfall.com?name=vincent：\n```java\npublic void parseUrl(String url) {\n\tUrlQuerySanitizer sanitizer = new UrlQuerySanitizer();\n\tsanitizer.setAllowUnregisteredParamaters(true);\n\tsanitizer.setUnregisteredParameterValueSanitizer(UrlQuerySanitizer.getAllButNulLegal());\n\tsanitizer.parseUrl(url);\n\tString name = sanitizer.getValue(\"name\");\n}\n```\nUrlQuerySanitizer还可以只解析query参数，比如：name=vincent&article=first：\n```java\npublic void parseUrl(String query) {\n\tUrlQuerySanitizer sanitizer = new UrlQuerySanitizer();\n\tsanitizer.setAllowUnregisteredParamaters(true);\n\tsanitizer.setUnregisteredParameterValueSanitizer(UrlQuerySanitizer.getAllButNulLegal());\n\tsanitizer.parseQuery(query);\n\tString name = sanitizer.getValue(\"name\");\n\t.....\n}\n```\n以上就是UrlQuerySanitizer大致用法，用来解析处理url非常的方便。","source":"_posts/2016-03-30-url-query-sanitizer.md","raw":"---\nlayout: post\ntitle: 使用UrlQuerySanitizer来处理url\ncategory: android\ntags: [url, sanitizer]\n---\n\n网上对于UrlQuerySanitizer的资料比较少，这个是Android提供的一个用来处理url的API。由于项目的需要，需要对url的query参数进行排序，因此需要解析url并处理query参数。\n<!-- more -->\n最初的方法是使用Uri：\n```java\npublic void parseUrl(String url) {\n\tUri uri = Uri.parse(url);\n\tSet<String> query = uri.getQueryParameterNames();\n\tif (!query.isEmpty()) {\n\t\tTreeSet<String> treeQuery = new TreeSet<>(query);\n\t\tfor (String key : treeQuery) {\n\t\t\tString value = uri.getQueryParameter(key);\n\t\t}\n\t}\n}\n```\n通过这样的方式就可以解析url，并获取到各个query参数。但后来发现Uri不能处理一些特殊字符，比如`#`，Uri会截断`#`以后的内容，这样就不能满足开发需求。经过各种google，最后发现了一个UrlQuerySanitizer的API：\n```java\npublic void parseUrl(String url) {\n\tUrlQuerySanitizer sanitizer = new UrlQuerySanitizer();\n\tsanitizer.setAllowUnregisteredParamaters(true);\n\tsanitizer.setUnregisteredParameterValueSanitizer(UrlQuerySanitizer.getAllButNulLegal());\n\tsanitizer.parseUrl(url);\n\tfinal Set<String> query = sanitizer.getParameterSet();\n\tif (!query.isEmpty()) {\n\t\tTreeSet<String> treeQuery = new TreeSet<>(query);\n\t\tfor (String key : treeQuery) {\n\t\t\tString value = sanitizer.getValue(key);\n\t\t}\n\t}\n}\n```\n首先要使用`setAllowUnregisteredParamaters`让其支持特殊字符，然后使用`setUnregisteredParameterValueSanitizer`来设置支持哪些特殊字符，UrlQuerySanitizer提供了集中默认的ValueSanitizer：\n```java\n/**\n * Return a value sanitizer that does not allow any special characters,\n * and also does not allow script URLs.\n * @return a value sanitizer\n */\npublic static final ValueSanitizer getAllIllegal() {\n\treturn sAllIllegal;\n}\n\n/**\n * Return a value sanitizer that allows everything except Nul ('\\0')\n * characters. Script URLs are allowed.\n * @return a value sanitizer\n */\npublic static final ValueSanitizer getAllButNulLegal() {\n\treturn sAllButNulLegal;\n}\n/**\n * Return a value sanitizer that allows everything except Nul ('\\0')\n * characters, space (' '), and other whitespace characters.\n * Script URLs are allowed.\n * @return a value sanitizer\n */\npublic static final ValueSanitizer getAllButWhitespaceLegal() {\n\treturn sAllButWhitespaceLegal;\n}\n/**\n * Return a value sanitizer that allows all the characters used by\n * encoded URLs. Does not allow script URLs.\n * @return a value sanitizer\n */\npublic static final ValueSanitizer getUrlLegal() {\n\treturn sURLLegal;\n}\n/**\n * Return a value sanitizer that allows all the characters used by\n * encoded URLs and allows spaces, which are not technically legal\n * in encoded URLs, but commonly appear anyway.\n * Does not allow script URLs.\n * @return a value sanitizer\n */\npublic static final ValueSanitizer getUrlAndSpaceLegal() {\n\treturn sUrlAndSpaceLegal;\n}\n/**\n * Return a value sanitizer that does not allow any special characters\n * except ampersand ('&'). Does not allow script URLs.\n * @return a value sanitizer\n */\npublic static final ValueSanitizer getAmpLegal() {\n\treturn sAmpLegal;\n}\n/**\n * Return a value sanitizer that does not allow any special characters\n * except ampersand ('&') and space (' '). Does not allow script URLs.\n * @return a value sanitizer\n */\npublic static final ValueSanitizer getAmpAndSpaceLegal() {\n\treturn sAmpAndSpaceLegal;\n}\n/**\n * Return a value sanitizer that does not allow any special characters\n * except space (' '). Does not allow script URLs.\n * @return a value sanitizer\n */\npublic static final ValueSanitizer getSpaceLegal() {\n\treturn sSpaceLegal;\n}\n/**\n * Return a value sanitizer that allows any special characters\n * except angle brackets ('<' and '>') and Nul ('\\0').\n * Allows script URLs.\n * @return a value sanitizer\n */\npublic static final ValueSanitizer getAllButNulAndAngleBracketsLegal() {\n\treturn sAllButNulAndAngleBracketsLegal;\n}\n```\n每种ValueSanitizer都对应过滤哪些字符，被过滤掉的特殊字符会被替换成_或者空格。\n如果默认的ValueSanitizer不能满足开发需求，还可以自己构造ValueSanitizer：\n```java\npublic void parseUrl(String url) {\n\t.....\n\tValueSanitizer sanitizer = new UrlQuerySanitizer.IllegalCharacterValueSanitizer(UrlQuerySanitizer.IllegalCharacterValueSanitizer.ALL_OK);\n\tsetUnregisteredParameterValueSanitizer(sanitizer);\n\t.....\n}\n```\nUrlQuerySanitizer也可以通过key来获取相应的value，比如给一个url：http://coolerfall.com?name=vincent：\n```java\npublic void parseUrl(String url) {\n\tUrlQuerySanitizer sanitizer = new UrlQuerySanitizer();\n\tsanitizer.setAllowUnregisteredParamaters(true);\n\tsanitizer.setUnregisteredParameterValueSanitizer(UrlQuerySanitizer.getAllButNulLegal());\n\tsanitizer.parseUrl(url);\n\tString name = sanitizer.getValue(\"name\");\n}\n```\nUrlQuerySanitizer还可以只解析query参数，比如：name=vincent&article=first：\n```java\npublic void parseUrl(String query) {\n\tUrlQuerySanitizer sanitizer = new UrlQuerySanitizer();\n\tsanitizer.setAllowUnregisteredParamaters(true);\n\tsanitizer.setUnregisteredParameterValueSanitizer(UrlQuerySanitizer.getAllButNulLegal());\n\tsanitizer.parseQuery(query);\n\tString name = sanitizer.getValue(\"name\");\n\t.....\n}\n```\n以上就是UrlQuerySanitizer大致用法，用来解析处理url非常的方便。","slug":"url-query-sanitizer","published":1,"date":"2016-03-29T16:00:00.000Z","updated":"2023-05-23T06:14:52.093Z","comments":1,"photos":[],"link":"","_id":"cli00ivm0001rz0in3a8d16nu","content":"<p>网上对于 UrlQuerySanitizer 的资料比较少，这个是 Android 提供的一个用来处理 url 的 API。由于项目的需要，需要对 url 的 query 参数进行排序，因此需要解析 url 并处理 query 参数。</p>\n<span id=\"more\"></span>\n<p>最初的方法是使用 Uri：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">parseUrl</span><span class=\"params\">(String url)</span> {</span><br><span class=\"line\">\t<span class=\"type\">Uri</span> <span class=\"variable\">uri</span> <span class=\"operator\">=</span> Uri.parse(url);</span><br><span class=\"line\">\tSet&lt;String&gt; query = uri.getQueryParameterNames();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!query.isEmpty()) {</span><br><span class=\"line\">\t\tTreeSet&lt;String&gt; treeQuery = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeSet</span>&lt;&gt;(query);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (String key : treeQuery) {</span><br><span class=\"line\">\t\t\t<span class=\"type\">String</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> uri.getQueryParameter(key);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>通过这样的方式就可以解析 url，并获取到各个 query 参数。但后来发现 Uri 不能处理一些特殊字符，比如<code>#</code>，Uri 会截断<code>#</code>以后的内容，这样就不能满足开发需求。经过各种 google，最后发现了一个 UrlQuerySanitizer 的 API：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">parseUrl</span><span class=\"params\">(String url)</span> {</span><br><span class=\"line\">\t<span class=\"type\">UrlQuerySanitizer</span> <span class=\"variable\">sanitizer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UrlQuerySanitizer</span>();</span><br><span class=\"line\">\tsanitizer.setAllowUnregisteredParamaters(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\tsanitizer.setUnregisteredParameterValueSanitizer(UrlQuerySanitizer.getAllButNulLegal());</span><br><span class=\"line\">\tsanitizer.parseUrl(url);</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> Set&lt;String&gt; query = sanitizer.getParameterSet();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!query.isEmpty()) {</span><br><span class=\"line\">\t\tTreeSet&lt;String&gt; treeQuery = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeSet</span>&lt;&gt;(query);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (String key : treeQuery) {</span><br><span class=\"line\">\t\t\t<span class=\"type\">String</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> sanitizer.getValue(key);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>首先要使用 <code>setAllowUnregisteredParamaters</code> 让其支持特殊字符，然后使用 <code>setUnregisteredParameterValueSanitizer</code> 来设置支持哪些特殊字符，UrlQuerySanitizer 提供了集中默认的 ValueSanitizer：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Return a value sanitizer that does not allow any special characters,</span></span><br><span class=\"line\"><span class=\"comment\"> * and also does not allow script URLs.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> a value sanitizer</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ValueSanitizer <span class=\"title function_\">getAllIllegal</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sAllIllegal;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Return a value sanitizer that allows everything except Nul ('\\0')</span></span><br><span class=\"line\"><span class=\"comment\"> * characters. Script URLs are allowed.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> a value sanitizer</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ValueSanitizer <span class=\"title function_\">getAllButNulLegal</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sAllButNulLegal;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Return a value sanitizer that allows everything except Nul ('\\0')</span></span><br><span class=\"line\"><span class=\"comment\"> * characters, space (' '), and other whitespace characters.</span></span><br><span class=\"line\"><span class=\"comment\"> * Script URLs are allowed.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> a value sanitizer</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ValueSanitizer <span class=\"title function_\">getAllButWhitespaceLegal</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sAllButWhitespaceLegal;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Return a value sanitizer that allows all the characters used by</span></span><br><span class=\"line\"><span class=\"comment\"> * encoded URLs. Does not allow script URLs.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> a value sanitizer</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ValueSanitizer <span class=\"title function_\">getUrlLegal</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sURLLegal;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Return a value sanitizer that allows all the characters used by</span></span><br><span class=\"line\"><span class=\"comment\"> * encoded URLs and allows spaces, which are not technically legal</span></span><br><span class=\"line\"><span class=\"comment\"> * in encoded URLs, but commonly appear anyway.</span></span><br><span class=\"line\"><span class=\"comment\"> * Does not allow script URLs.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> a value sanitizer</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ValueSanitizer <span class=\"title function_\">getUrlAndSpaceLegal</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sUrlAndSpaceLegal;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Return a value sanitizer that does not allow any special characters</span></span><br><span class=\"line\"><span class=\"comment\"> * except ampersand ('&amp;'). Does not allow script URLs.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> a value sanitizer</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ValueSanitizer <span class=\"title function_\">getAmpLegal</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sAmpLegal;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Return a value sanitizer that does not allow any special characters</span></span><br><span class=\"line\"><span class=\"comment\"> * except ampersand ('&amp;') and space (' '). Does not allow script URLs.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> a value sanitizer</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ValueSanitizer <span class=\"title function_\">getAmpAndSpaceLegal</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sAmpAndSpaceLegal;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Return a value sanitizer that does not allow any special characters</span></span><br><span class=\"line\"><span class=\"comment\"> * except space (' '). Does not allow script URLs.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> a value sanitizer</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ValueSanitizer <span class=\"title function_\">getSpaceLegal</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sSpaceLegal;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Return a value sanitizer that allows any special characters</span></span><br><span class=\"line\"><span class=\"comment\"> * except angle brackets ('&lt;' and '&gt;') and Nul ('\\0').</span></span><br><span class=\"line\"><span class=\"comment\"> * Allows script URLs.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> a value sanitizer</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ValueSanitizer <span class=\"title function_\">getAllButNulAndAngleBracketsLegal</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sAllButNulAndAngleBracketsLegal;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>每种 ValueSanitizer 都对应过滤哪些字符，被过滤掉的特殊字符会被替换成_或者空格。<br>如果默认的 ValueSanitizer 不能满足开发需求，还可以自己构造 ValueSanitizer：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">parseUrl</span><span class=\"params\">(String url)</span> {</span><br><span class=\"line\">\t.....</span><br><span class=\"line\">\t<span class=\"type\">ValueSanitizer</span> <span class=\"variable\">sanitizer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UrlQuerySanitizer</span>.IllegalCharacterValueSanitizer(UrlQuerySanitizer.IllegalCharacterValueSanitizer.ALL_OK);</span><br><span class=\"line\">\tsetUnregisteredParameterValueSanitizer(sanitizer);</span><br><span class=\"line\">\t.....</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>UrlQuerySanitizer 也可以通过 key 来获取相应的 value，比如给一个 url：<a href=\"http://coolerfall.com/?name=vincent%EF%BC%9A\">http://coolerfall.com?name=vincent：</a></p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">parseUrl</span><span class=\"params\">(String url)</span> {</span><br><span class=\"line\">\t<span class=\"type\">UrlQuerySanitizer</span> <span class=\"variable\">sanitizer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UrlQuerySanitizer</span>();</span><br><span class=\"line\">\tsanitizer.setAllowUnregisteredParamaters(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\tsanitizer.setUnregisteredParameterValueSanitizer(UrlQuerySanitizer.getAllButNulLegal());</span><br><span class=\"line\">\tsanitizer.parseUrl(url);</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> sanitizer.getValue(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>UrlQuerySanitizer 还可以只解析 query 参数，比如：name=vincent&amp;article=first：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">parseUrl</span><span class=\"params\">(String query)</span> {</span><br><span class=\"line\">\t<span class=\"type\">UrlQuerySanitizer</span> <span class=\"variable\">sanitizer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UrlQuerySanitizer</span>();</span><br><span class=\"line\">\tsanitizer.setAllowUnregisteredParamaters(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\tsanitizer.setUnregisteredParameterValueSanitizer(UrlQuerySanitizer.getAllButNulLegal());</span><br><span class=\"line\">\tsanitizer.parseQuery(query);</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> sanitizer.getValue(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">\t.....</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>以上就是 UrlQuerySanitizer 大致用法，用来解析处理 url 非常的方便。</p>\n","site":{"data":{}},"excerpt":"<p>网上对于 UrlQuerySanitizer 的资料比较少，这个是 Android 提供的一个用来处理 url 的 API。由于项目的需要，需要对 url 的 query 参数进行排序，因此需要解析 url 并处理 query 参数。</p>","more":"<p>最初的方法是使用 Uri：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">parseUrl</span><span class=\"params\">(String url)</span> {</span><br><span class=\"line\">\t<span class=\"type\">Uri</span> <span class=\"variable\">uri</span> <span class=\"operator\">=</span> Uri.parse(url);</span><br><span class=\"line\">\tSet&lt;String&gt; query = uri.getQueryParameterNames();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!query.isEmpty()) {</span><br><span class=\"line\">\t\tTreeSet&lt;String&gt; treeQuery = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeSet</span>&lt;&gt;(query);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (String key : treeQuery) {</span><br><span class=\"line\">\t\t\t<span class=\"type\">String</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> uri.getQueryParameter(key);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>通过这样的方式就可以解析 url，并获取到各个 query 参数。但后来发现 Uri 不能处理一些特殊字符，比如<code>#</code>，Uri 会截断<code>#</code>以后的内容，这样就不能满足开发需求。经过各种 google，最后发现了一个 UrlQuerySanitizer 的 API：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">parseUrl</span><span class=\"params\">(String url)</span> {</span><br><span class=\"line\">\t<span class=\"type\">UrlQuerySanitizer</span> <span class=\"variable\">sanitizer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UrlQuerySanitizer</span>();</span><br><span class=\"line\">\tsanitizer.setAllowUnregisteredParamaters(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\tsanitizer.setUnregisteredParameterValueSanitizer(UrlQuerySanitizer.getAllButNulLegal());</span><br><span class=\"line\">\tsanitizer.parseUrl(url);</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> Set&lt;String&gt; query = sanitizer.getParameterSet();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!query.isEmpty()) {</span><br><span class=\"line\">\t\tTreeSet&lt;String&gt; treeQuery = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeSet</span>&lt;&gt;(query);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (String key : treeQuery) {</span><br><span class=\"line\">\t\t\t<span class=\"type\">String</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> sanitizer.getValue(key);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>首先要使用 <code>setAllowUnregisteredParamaters</code> 让其支持特殊字符，然后使用 <code>setUnregisteredParameterValueSanitizer</code> 来设置支持哪些特殊字符，UrlQuerySanitizer 提供了集中默认的 ValueSanitizer：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Return a value sanitizer that does not allow any special characters,</span></span><br><span class=\"line\"><span class=\"comment\"> * and also does not allow script URLs.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> a value sanitizer</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ValueSanitizer <span class=\"title function_\">getAllIllegal</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sAllIllegal;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Return a value sanitizer that allows everything except Nul ('\\0')</span></span><br><span class=\"line\"><span class=\"comment\"> * characters. Script URLs are allowed.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> a value sanitizer</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ValueSanitizer <span class=\"title function_\">getAllButNulLegal</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sAllButNulLegal;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Return a value sanitizer that allows everything except Nul ('\\0')</span></span><br><span class=\"line\"><span class=\"comment\"> * characters, space (' '), and other whitespace characters.</span></span><br><span class=\"line\"><span class=\"comment\"> * Script URLs are allowed.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> a value sanitizer</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ValueSanitizer <span class=\"title function_\">getAllButWhitespaceLegal</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sAllButWhitespaceLegal;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Return a value sanitizer that allows all the characters used by</span></span><br><span class=\"line\"><span class=\"comment\"> * encoded URLs. Does not allow script URLs.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> a value sanitizer</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ValueSanitizer <span class=\"title function_\">getUrlLegal</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sURLLegal;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Return a value sanitizer that allows all the characters used by</span></span><br><span class=\"line\"><span class=\"comment\"> * encoded URLs and allows spaces, which are not technically legal</span></span><br><span class=\"line\"><span class=\"comment\"> * in encoded URLs, but commonly appear anyway.</span></span><br><span class=\"line\"><span class=\"comment\"> * Does not allow script URLs.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> a value sanitizer</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ValueSanitizer <span class=\"title function_\">getUrlAndSpaceLegal</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sUrlAndSpaceLegal;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Return a value sanitizer that does not allow any special characters</span></span><br><span class=\"line\"><span class=\"comment\"> * except ampersand ('&amp;'). Does not allow script URLs.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> a value sanitizer</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ValueSanitizer <span class=\"title function_\">getAmpLegal</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sAmpLegal;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Return a value sanitizer that does not allow any special characters</span></span><br><span class=\"line\"><span class=\"comment\"> * except ampersand ('&amp;') and space (' '). Does not allow script URLs.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> a value sanitizer</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ValueSanitizer <span class=\"title function_\">getAmpAndSpaceLegal</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sAmpAndSpaceLegal;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Return a value sanitizer that does not allow any special characters</span></span><br><span class=\"line\"><span class=\"comment\"> * except space (' '). Does not allow script URLs.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> a value sanitizer</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ValueSanitizer <span class=\"title function_\">getSpaceLegal</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sSpaceLegal;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Return a value sanitizer that allows any special characters</span></span><br><span class=\"line\"><span class=\"comment\"> * except angle brackets ('&lt;' and '&gt;') and Nul ('\\0').</span></span><br><span class=\"line\"><span class=\"comment\"> * Allows script URLs.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> a value sanitizer</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ValueSanitizer <span class=\"title function_\">getAllButNulAndAngleBracketsLegal</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sAllButNulAndAngleBracketsLegal;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>每种 ValueSanitizer 都对应过滤哪些字符，被过滤掉的特殊字符会被替换成_或者空格。<br>如果默认的 ValueSanitizer 不能满足开发需求，还可以自己构造 ValueSanitizer：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">parseUrl</span><span class=\"params\">(String url)</span> {</span><br><span class=\"line\">\t.....</span><br><span class=\"line\">\t<span class=\"type\">ValueSanitizer</span> <span class=\"variable\">sanitizer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UrlQuerySanitizer</span>.IllegalCharacterValueSanitizer(UrlQuerySanitizer.IllegalCharacterValueSanitizer.ALL_OK);</span><br><span class=\"line\">\tsetUnregisteredParameterValueSanitizer(sanitizer);</span><br><span class=\"line\">\t.....</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>UrlQuerySanitizer 也可以通过 key 来获取相应的 value，比如给一个 url：<a href=\"http://coolerfall.com/?name=vincent%EF%BC%9A\">http://coolerfall.com?name=vincent：</a></p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">parseUrl</span><span class=\"params\">(String url)</span> {</span><br><span class=\"line\">\t<span class=\"type\">UrlQuerySanitizer</span> <span class=\"variable\">sanitizer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UrlQuerySanitizer</span>();</span><br><span class=\"line\">\tsanitizer.setAllowUnregisteredParamaters(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\tsanitizer.setUnregisteredParameterValueSanitizer(UrlQuerySanitizer.getAllButNulLegal());</span><br><span class=\"line\">\tsanitizer.parseUrl(url);</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> sanitizer.getValue(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>UrlQuerySanitizer 还可以只解析 query 参数，比如：name=vincent&amp;article=first：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">parseUrl</span><span class=\"params\">(String query)</span> {</span><br><span class=\"line\">\t<span class=\"type\">UrlQuerySanitizer</span> <span class=\"variable\">sanitizer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UrlQuerySanitizer</span>();</span><br><span class=\"line\">\tsanitizer.setAllowUnregisteredParamaters(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\tsanitizer.setUnregisteredParameterValueSanitizer(UrlQuerySanitizer.getAllButNulLegal());</span><br><span class=\"line\">\tsanitizer.parseQuery(query);</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> sanitizer.getValue(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">\t.....</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>以上就是 UrlQuerySanitizer 大致用法，用来解析处理 url 非常的方便。</p>"},{"title":"从 Jekyll 迁移到 Hexo","date":"2018-10-16T07:41:22.000Z","_content":"\n自上次更新博客以来已超过2年，其一是工作太忙，其二主要是因为自己太懒，不过这其间学习非常多的新知识。最近新增了几个项目之后，发现已经太久没更新博客，同时感觉jekyll用起来还是不够舒服，经过一番google，找到[hexo][1]，hexo原理和jekyll差不多，但是代码块高亮直接使用的markdown的语法，无需像jekyll那样的高亮语法，又找了个简洁的主题[hexo-theme-next][2],于是折腾起hexo来，至于为什么不去折腾hugo，主要是因为找了半天主题没找到满意的，遂放弃了。hexo的使用可以参见[官网][3]的步骤，非常的详细，大致记录一下迁移过程。\n<!-- more -->\n#### 项目初始化\n```shell\n$ npm install -g hexo-cli\n$ hexo init coolerfall.github.io\n$ cd coolerfall.github.io && npm install\n```\n\n#### 配置\n完全配置文件可参考官网的文档，一般来说需要改下作者信息，描述等等，默认是使用landscape主题，我这里使用的是[hexo-theme-next][2]，参见文档将代码加入hexo目录下的`themes`下，修改根目录`_config.yml`中的`theme`为`next`即可，next主题完全配置参见官网文档，需要注意的是next默认没有生成`tags`和`categories`的index页面，需要自己手动生成：\n```shell\n$ hexo new page tags\n$ hexo new page categories\n```\n生成的文件在`_posts`下的`tags`和`categories`中，将`type`分别改为`tags`和`categories`即可，后面自动生成。配置好后，可以简单运行下看看效果：\n```shell\n$ hexo serve\n```\n\n#### 迁移\n由于之前用的是Jekyll，post文章的格式为`:year-:month-:day-:title.md`，因此hexo也采用同样的格式即可，只需将`new_post_name`改为这种格式。将Jekyll目录下的`_posts`中文章全部copy到hexo目录下的`source/_posts`中，由于文章是Markdown格式，所以基本没有太大改动，我之前使用了Jekyll的一个高亮插件，写法与Markdown有所区别，只需把这些写法改为Markdown的写法即可，然后运行可看到效果。关于文章长度太长，需显示`阅读全文`，有两种方式：\n* 自动截取\n需修改`next`主题配置文件中`auto_excerpt`为true，以及截取开始长度（但这种方式不推荐）。\n* 手动添加\n只需要在每篇post中需要截取的地方加入`<!-- more -->`即可。\n\n#### 部署\n最后部署至github，hexo有多种部署方式，可部署至`Git`，`Heroku`，`Netlify`等等，都有相应部署工具。这里使用`hexo-deployer-git`，需在根目录下加入\n```shell\n$ npm install hexo-deployer-git --save\n```\n在根目录配置文件中的`deploy`中加入相关配置，然后执行部署\n```shell\n$ hexo g -d\n```\n注意，Hexo与Jekyll有区别，github默认在服务器上生成并部署，而Hexo需要我们在本地生成好静态文件后再上传，因此，需要分两个分支来存放代码，master分支放静态文件，另起一个分支（如：source）来存放源码，这里就需要在deploy中加入这两个分支的操作：\n```yml\ndeploy:\n  - type: git\n    repo: git@github.com:you/your.github.io.git\n    branch: [master]\n  - type: git\n    repo: git@github.com:you/anothergit.git\n    branch: [master]\n    extend_dirs: /\n    ignore_hidden: false\n    ignore_pattern:\n        public: .\n```\n至此，博客从Jekll成功迁移到了Hexo。\n\n[1]: https://github.com/hexojs/hexo\n[2]: https://github.com/theme-next/hexo-theme-next\n[3]: https://hexo.io/zh-cn/docs/","source":"_posts/2018-10-16-jekyll-to-hexo.md","raw":"---\ntitle: 从Jekyll迁移到Hexo\ncategory: misc\ntags: [jekyll, hexo]\ndate: 2018-10-16 15:41:22\n---\n\n自上次更新博客以来已超过2年，其一是工作太忙，其二主要是因为自己太懒，不过这其间学习非常多的新知识。最近新增了几个项目之后，发现已经太久没更新博客，同时感觉jekyll用起来还是不够舒服，经过一番google，找到[hexo][1]，hexo原理和jekyll差不多，但是代码块高亮直接使用的markdown的语法，无需像jekyll那样的高亮语法，又找了个简洁的主题[hexo-theme-next][2],于是折腾起hexo来，至于为什么不去折腾hugo，主要是因为找了半天主题没找到满意的，遂放弃了。hexo的使用可以参见[官网][3]的步骤，非常的详细，大致记录一下迁移过程。\n<!-- more -->\n#### 项目初始化\n```shell\n$ npm install -g hexo-cli\n$ hexo init coolerfall.github.io\n$ cd coolerfall.github.io && npm install\n```\n\n#### 配置\n完全配置文件可参考官网的文档，一般来说需要改下作者信息，描述等等，默认是使用landscape主题，我这里使用的是[hexo-theme-next][2]，参见文档将代码加入hexo目录下的`themes`下，修改根目录`_config.yml`中的`theme`为`next`即可，next主题完全配置参见官网文档，需要注意的是next默认没有生成`tags`和`categories`的index页面，需要自己手动生成：\n```shell\n$ hexo new page tags\n$ hexo new page categories\n```\n生成的文件在`_posts`下的`tags`和`categories`中，将`type`分别改为`tags`和`categories`即可，后面自动生成。配置好后，可以简单运行下看看效果：\n```shell\n$ hexo serve\n```\n\n#### 迁移\n由于之前用的是Jekyll，post文章的格式为`:year-:month-:day-:title.md`，因此hexo也采用同样的格式即可，只需将`new_post_name`改为这种格式。将Jekyll目录下的`_posts`中文章全部copy到hexo目录下的`source/_posts`中，由于文章是Markdown格式，所以基本没有太大改动，我之前使用了Jekyll的一个高亮插件，写法与Markdown有所区别，只需把这些写法改为Markdown的写法即可，然后运行可看到效果。关于文章长度太长，需显示`阅读全文`，有两种方式：\n* 自动截取\n需修改`next`主题配置文件中`auto_excerpt`为true，以及截取开始长度（但这种方式不推荐）。\n* 手动添加\n只需要在每篇post中需要截取的地方加入`<!-- more -->`即可。\n\n#### 部署\n最后部署至github，hexo有多种部署方式，可部署至`Git`，`Heroku`，`Netlify`等等，都有相应部署工具。这里使用`hexo-deployer-git`，需在根目录下加入\n```shell\n$ npm install hexo-deployer-git --save\n```\n在根目录配置文件中的`deploy`中加入相关配置，然后执行部署\n```shell\n$ hexo g -d\n```\n注意，Hexo与Jekyll有区别，github默认在服务器上生成并部署，而Hexo需要我们在本地生成好静态文件后再上传，因此，需要分两个分支来存放代码，master分支放静态文件，另起一个分支（如：source）来存放源码，这里就需要在deploy中加入这两个分支的操作：\n```yml\ndeploy:\n  - type: git\n    repo: git@github.com:you/your.github.io.git\n    branch: [master]\n  - type: git\n    repo: git@github.com:you/anothergit.git\n    branch: [master]\n    extend_dirs: /\n    ignore_hidden: false\n    ignore_pattern:\n        public: .\n```\n至此，博客从Jekll成功迁移到了Hexo。\n\n[1]: https://github.com/hexojs/hexo\n[2]: https://github.com/theme-next/hexo-theme-next\n[3]: https://hexo.io/zh-cn/docs/","slug":"jekyll-to-hexo","published":1,"updated":"2023-05-23T03:07:55.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli00ivm1001uz0in6zd91o1n","content":"<p>自上次更新博客以来已超过 2 年，其一是工作太忙，其二主要是因为自己太懒，不过这其间学习非常多的新知识。最近新增了几个项目之后，发现已经太久没更新博客，同时感觉 jekyll 用起来还是不够舒服，经过一番 google，找到 <a href=\"https://github.com/hexojs/hexo\">hexo</a>，hexo 原理和 jekyll 差不多，但是代码块高亮直接使用的 markdown 的语法，无需像 jekyll 那样的高亮语法，又找了个简洁的主题 <a href=\"https://github.com/theme-next/hexo-theme-next\">hexo-theme-next</a>, 于是折腾起 hexo 来，至于为什么不去折腾 hugo，主要是因为找了半天主题没找到满意的，遂放弃了。hexo 的使用可以参见<a href=\"https://hexo.io/zh-cn/docs/\">官网</a>的步骤，非常的详细，大致记录一下迁移过程。</p>\n<span id=\"more\"></span>\n<h4 id=\"项目初始化\"><a href=\"#项目初始化\" class=\"headerlink\" title=\"项目初始化\"></a>项目初始化</h4><figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">npm install -g hexo-cli</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">hexo init coolerfall.github.io</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> coolerfall.github.io &amp;&amp; npm install</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>完全配置文件可参考官网的文档，一般来说需要改下作者信息，描述等等，默认是使用 landscape 主题，我这里使用的是 <a href=\"https://github.com/theme-next/hexo-theme-next\">hexo-theme-next</a>，参见文档将代码加入 hexo 目录下的 <code>themes</code> 下，修改根目录<code>_config.yml</code> 中的 <code>theme</code> 为 <code>next</code> 即可，next 主题完全配置参见官网文档，需要注意的是 next 默认没有生成 <code>tags</code> 和 <code>categories</code> 的 index 页面，需要自己手动生成：</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">hexo new page tags</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">hexo new page categories</span></span><br></pre></td></tr></tbody></table></figure>\n<p>生成的文件在<code>_posts</code> 下的 <code>tags</code> 和 <code>categories</code> 中，将 <code>type</code> 分别改为 <code>tags</code> 和 <code>categories</code> 即可，后面自动生成。配置好后，可以简单运行下看看效果：</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">hexo serve</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"迁移\"><a href=\"#迁移\" class=\"headerlink\" title=\"迁移\"></a>迁移</h4><p>由于之前用的是 Jekyll，post 文章的格式为<code>:year-:month-:day-:title.md</code>，因此 hexo 也采用同样的格式即可，只需将 <code>new_post_name</code> 改为这种格式。将 Jekyll 目录下的<code>_posts</code> 中文章全部 copy 到 hexo 目录下的 <code>source/_posts</code> 中，由于文章是 Markdown 格式，所以基本没有太大改动，我之前使用了 Jekyll 的一个高亮插件，写法与 Markdown 有所区别，只需把这些写法改为 Markdown 的写法即可，然后运行可看到效果。关于文章长度太长，需显示<code>阅读全文</code>，有两种方式：</p>\n<ul>\n<li>自动截取<br>需修改 <code>next</code> 主题配置文件中 <code>auto_excerpt</code> 为 true，以及截取开始长度（但这种方式不推荐）。</li>\n<li>手动添加<br>只需要在每篇 post 中需要截取的地方加入 <code>&lt;!-- more --&gt;</code> 即可。</li>\n</ul>\n<h4 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h4><p>最后部署至 github，hexo 有多种部署方式，可部署至 <code>Git</code>，<code>Heroku</code>，<code>Netlify</code> 等等，都有相应部署工具。这里使用 <code>hexo-deployer-git</code>，需在根目录下加入</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">npm install hexo-deployer-git --save</span></span><br></pre></td></tr></tbody></table></figure>\n<p>在根目录配置文件中的 <code>deploy</code> 中加入相关配置，然后执行部署</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">hexo g -d</span></span><br></pre></td></tr></tbody></table></figure>\n<p>注意，Hexo 与 Jekyll 有区别，github 默认在服务器上生成并部署，而 Hexo 需要我们在本地生成好静态文件后再上传，因此，需要分两个分支来存放代码，master 分支放静态文件，另起一个分支（如：source）来存放源码，这里就需要在 deploy 中加入这两个分支的操作：</p>\n<figure class=\"highlight yml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">    <span class=\"attr\">repo:</span> <span class=\"string\">git@github.com:you/your.github.io.git</span></span><br><span class=\"line\">    <span class=\"attr\">branch:</span> [<span class=\"string\">master</span>]</span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">    <span class=\"attr\">repo:</span> <span class=\"string\">git@github.com:you/anothergit.git</span></span><br><span class=\"line\">    <span class=\"attr\">branch:</span> [<span class=\"string\">master</span>]</span><br><span class=\"line\">    <span class=\"attr\">extend_dirs:</span> <span class=\"string\">/</span></span><br><span class=\"line\">    <span class=\"attr\">ignore_hidden:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">ignore_pattern:</span></span><br><span class=\"line\">        <span class=\"attr\">public:</span> <span class=\"string\">.</span></span><br></pre></td></tr></tbody></table></figure>\n<p>至此，博客从 Jekll 成功迁移到了 Hexo。</p>\n","site":{"data":{}},"excerpt":"<p>自上次更新博客以来已超过 2 年，其一是工作太忙，其二主要是因为自己太懒，不过这其间学习非常多的新知识。最近新增了几个项目之后，发现已经太久没更新博客，同时感觉 jekyll 用起来还是不够舒服，经过一番 google，找到 <a href=\"https://github.com/hexojs/hexo\">hexo</a>，hexo 原理和 jekyll 差不多，但是代码块高亮直接使用的 markdown 的语法，无需像 jekyll 那样的高亮语法，又找了个简洁的主题 <a href=\"https://github.com/theme-next/hexo-theme-next\">hexo-theme-next</a>, 于是折腾起 hexo 来，至于为什么不去折腾 hugo，主要是因为找了半天主题没找到满意的，遂放弃了。hexo 的使用可以参见<a href=\"https://hexo.io/zh-cn/docs/\">官网</a>的步骤，非常的详细，大致记录一下迁移过程。</p>","more":"<h4 id=\"项目初始化\"><a href=\"#项目初始化\" class=\"headerlink\" title=\"项目初始化\"></a>项目初始化</h4><figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">npm install -g hexo-cli</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">hexo init coolerfall.github.io</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> coolerfall.github.io &amp;&amp; npm install</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>完全配置文件可参考官网的文档，一般来说需要改下作者信息，描述等等，默认是使用 landscape 主题，我这里使用的是 <a href=\"https://github.com/theme-next/hexo-theme-next\">hexo-theme-next</a>，参见文档将代码加入 hexo 目录下的 <code>themes</code> 下，修改根目录<code>_config.yml</code> 中的 <code>theme</code> 为 <code>next</code> 即可，next 主题完全配置参见官网文档，需要注意的是 next 默认没有生成 <code>tags</code> 和 <code>categories</code> 的 index 页面，需要自己手动生成：</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">hexo new page tags</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">hexo new page categories</span></span><br></pre></td></tr></tbody></table></figure>\n<p>生成的文件在<code>_posts</code> 下的 <code>tags</code> 和 <code>categories</code> 中，将 <code>type</code> 分别改为 <code>tags</code> 和 <code>categories</code> 即可，后面自动生成。配置好后，可以简单运行下看看效果：</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">hexo serve</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"迁移\"><a href=\"#迁移\" class=\"headerlink\" title=\"迁移\"></a>迁移</h4><p>由于之前用的是 Jekyll，post 文章的格式为<code>:year-:month-:day-:title.md</code>，因此 hexo 也采用同样的格式即可，只需将 <code>new_post_name</code> 改为这种格式。将 Jekyll 目录下的<code>_posts</code> 中文章全部 copy 到 hexo 目录下的 <code>source/_posts</code> 中，由于文章是 Markdown 格式，所以基本没有太大改动，我之前使用了 Jekyll 的一个高亮插件，写法与 Markdown 有所区别，只需把这些写法改为 Markdown 的写法即可，然后运行可看到效果。关于文章长度太长，需显示<code>阅读全文</code>，有两种方式：</p>\n<ul>\n<li>自动截取<br>需修改 <code>next</code> 主题配置文件中 <code>auto_excerpt</code> 为 true，以及截取开始长度（但这种方式不推荐）。</li>\n<li>手动添加<br>只需要在每篇 post 中需要截取的地方加入 <code>&lt;!-- more --&gt;</code> 即可。</li>\n</ul>\n<h4 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h4><p>最后部署至 github，hexo 有多种部署方式，可部署至 <code>Git</code>，<code>Heroku</code>，<code>Netlify</code> 等等，都有相应部署工具。这里使用 <code>hexo-deployer-git</code>，需在根目录下加入</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">npm install hexo-deployer-git --save</span></span><br></pre></td></tr></tbody></table></figure>\n<p>在根目录配置文件中的 <code>deploy</code> 中加入相关配置，然后执行部署</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">hexo g -d</span></span><br></pre></td></tr></tbody></table></figure>\n<p>注意，Hexo 与 Jekyll 有区别，github 默认在服务器上生成并部署，而 Hexo 需要我们在本地生成好静态文件后再上传，因此，需要分两个分支来存放代码，master 分支放静态文件，另起一个分支（如：source）来存放源码，这里就需要在 deploy 中加入这两个分支的操作：</p>\n<figure class=\"highlight yml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">    <span class=\"attr\">repo:</span> <span class=\"string\">git@github.com:you/your.github.io.git</span></span><br><span class=\"line\">    <span class=\"attr\">branch:</span> [<span class=\"string\">master</span>]</span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">    <span class=\"attr\">repo:</span> <span class=\"string\">git@github.com:you/anothergit.git</span></span><br><span class=\"line\">    <span class=\"attr\">branch:</span> [<span class=\"string\">master</span>]</span><br><span class=\"line\">    <span class=\"attr\">extend_dirs:</span> <span class=\"string\">/</span></span><br><span class=\"line\">    <span class=\"attr\">ignore_hidden:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">ignore_pattern:</span></span><br><span class=\"line\">        <span class=\"attr\">public:</span> <span class=\"string\">.</span></span><br></pre></td></tr></tbody></table></figure>\n<p>至此，博客从 Jekll 成功迁移到了 Hexo。</p>"},{"title":"在 Linux 下进行开发工作（三）","date":"2018-10-22T02:52:13.000Z","_content":"\n{% post_link work-on-linux-part-two %}中记录了Manjaro日常使用中的一些常用软件和配置。基本可以在Linux进行开发了，不过由于屏幕适配以及字体的问题，会出现字体发虚，太小等等问题（4k屏以上一般来说不会有这些问题，但也不排除有个别情况），在Manjaro上的中文展示不是特别理想。这一篇主要记录下如何通过配置来调优字体显示，以适配自己的电脑。依然那句话，如果没准备好用Linux作为日常开发桌面，千万不要尝试 : )。\n<!-- more -->\n\n\n#### 字体安装\n首先找一个能够对中文展示比较友好字体，几番寻找，找到了`Noto Sans CJK`，也有人使用`文泉驿微米黑`，不过我试用了几天，还是觉得`Noto`系列看起来舒服些（这就看个人喜好了），这些字体都可以直接使用`pacman`安装：\n```shell\n$ sudo pacman -S noto-fonts noto-fonts-cjk noto-fonts-emoji wqy-microhei  \n```\n\n#### 配置字体\n在`$HOME/.config/fontconfig/fonts.conf`（若没有则创建，若存在则覆盖）中添加如下配置：\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE fontconfig SYSTEM \"fonts.dtd\">\n\n<fontconfig>\n\n  <match target=\"font\">\n    <edit mode=\"assign\" name=\"rgba\">\n      <const>rgb</const>\n    </edit>\n  </match>\n\n  <match target=\"font\">\n    <edit mode=\"assign\" name=\"hintstyle\">\n      <const>hintfull</const>\n    </edit>\n  </match>\n\n  <match target=\"font\">\n    <edit mode=\"assign\" name=\"antialias\">\n      <bool>true</bool>\n    </edit>\n  </match>\n\n  <match target=\"font\">\n    <edit name=\"lcdfilter\" mode=\"assign\">\n      <const>lcddefault</const>\n    </edit>\n  </match>\n\n  <!-- Default font (no fc-match pattern) -->\n  <match>\n    <edit mode=\"prepend\" name=\"family\">\n      <string>Noto Sans Mono</string>\n    </edit>\n  </match>\n\n  <!-- Default font for the zh_CN locale (no fc-match pattern) -->\n  <match>\n    <test compare=\"contains\" name=\"lang\">\n      <string>zh_CN</string>\n    </test>\n    <edit mode=\"prepend\" name=\"family\">\n      <string>Noto Sans CJK SC</string>\n    </edit>\n  </match>\n\n  <!-- Default sans-serif font -->\n  <match target=\"pattern\">\n    <test qual=\"any\" name=\"family\">\n      <string>sans-serif</string></test>\n    <edit name=\"family\" mode=\"prepend\" binding=\"same\">\n      <string>Noto Sans</string>\n    </edit>\n  </match>\n\n  <!-- Default serif fonts -->\n  <match target=\"pattern\">\n    <test qual=\"any\" name=\"family\">\n      <string>serif</string>\n    </test>\n    <edit name=\"family\" mode=\"prepend\" binding=\"same\">\n      <string>Noto Serif</string>\n    </edit>\n  </match>\n\n  <!-- Fallback fonts preference order -->\n  <alias>\n    <family>sans-serif</family>\n    <prefer>\n      <family>Noto Sans</family>\n      <family>Noto Sans CJK SC</family>\n      <family>Noto Sans CJK TC</family>\n      <family>Noto Sans CJK JP</family>\n      <family>Noto Sans CJK KR</family>\n      <family>Noto Color Emoji</family>\n      <family>Noto Emoji</family>\n    </prefer>\n  </alias>\n  <alias>\n    <family>serif</family>\n    <prefer>\n      <family>Noto Serif</family>\n      <family>Noto Serif CJK SC</family>\n      <family>Noto Serif CJK TC</family>\n      <family>Noto Serif CJK JP</family>\n      <family>Noto Serif CJK KR</family>\n      <family>Noto Color Emoji</family>\n      <family>Noto Emoji</family>\n    </prefer>\n  </alias>\n  <alias>\n    <family>monospace</family>\n    <prefer>\n      <family>Noto Sans Mono</family>\n      <family>Noto Color Emoji</family>\n      <family>Noto Emoji</family>\n    </prefer>\n  </alias>\n\n</fontconfig>\n```\n然后刷新字体缓存：\n```shell\n$ fc-cache -fv\n```\n\n#### 桌面字体设置\n* 在`菜单->首选项->外观->字体`中可以找到桌面相关字体配置，这里将这些字体（除等宽）都改为`Noto Sans CJK SC Regular`，等宽字体改为`Noto Sans Mono Regular`，字体大小设置为10左右，当然这些根据个人的电脑的效果调整。\n* 在渲染中的细节中，关闭分辨率的自动检测，然后手动设置DPI，我的电脑是1080的，故设置为124左右即可（其他屏幕可视效果调整）；微调设置为完全，其他的可以保持不动。\n\n#### Qt应用字体设置\n* 在`菜单->首选项->Qt5设置`中，将字体设置为`Noto Sans CJK`系列，根据效果调整大小。\n\n#### 浏览器字体设置\n浏览器页面的字体不受桌面字体设置的影响，桌面字体仅仅只能改变浏览器顶部选项卡以及菜单的字体大小，网页的字体还需要在浏览器中单独设置，这里以chrome为例，其他浏览器有类似设置。打开chrome设置页面，找到自定义字体，然后打开高级字体设置。浏览器的配置经过反复的尝试折腾，最终配置如下:\n![img][1]\n以上为`Default`的配置，还需要配置下`Simplified Han`，在Script中找到并修改成一样即可。如果有emoji显示不正常的问题，需检查[字体配置](#配置字体)是否正确，最后看下我的配置效果：\n![img][2]\n![img][3]\n至于中文字体的效果，可根据自己的喜好选择Noto系列或者文泉驿字体，或者其他好看的中文字体。\n\n#### 其他\n至于其他应用（如：IDEA，VS Code等等），内部都有相应设置字体的地方，按自己的喜好设置字体及大小即可。\n\n\n[1]: /images/work-on-linux/font-config.png\n[2]: /images/work-on-linux/font-config-effects1.png\n[3]: /images/work-on-linux/font-config-effects2.png","source":"_posts/2018-10-22-work-on-linux-part-three.md","raw":"---\ntitle: 在Linux下进行开发工作（三）\ndate: 2018-10-22 10:52:13\ncategories: misc\ntags: linux\n---\n\n{% post_link work-on-linux-part-two %}中记录了Manjaro日常使用中的一些常用软件和配置。基本可以在Linux进行开发了，不过由于屏幕适配以及字体的问题，会出现字体发虚，太小等等问题（4k屏以上一般来说不会有这些问题，但也不排除有个别情况），在Manjaro上的中文展示不是特别理想。这一篇主要记录下如何通过配置来调优字体显示，以适配自己的电脑。依然那句话，如果没准备好用Linux作为日常开发桌面，千万不要尝试 : )。\n<!-- more -->\n\n\n#### 字体安装\n首先找一个能够对中文展示比较友好字体，几番寻找，找到了`Noto Sans CJK`，也有人使用`文泉驿微米黑`，不过我试用了几天，还是觉得`Noto`系列看起来舒服些（这就看个人喜好了），这些字体都可以直接使用`pacman`安装：\n```shell\n$ sudo pacman -S noto-fonts noto-fonts-cjk noto-fonts-emoji wqy-microhei  \n```\n\n#### 配置字体\n在`$HOME/.config/fontconfig/fonts.conf`（若没有则创建，若存在则覆盖）中添加如下配置：\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE fontconfig SYSTEM \"fonts.dtd\">\n\n<fontconfig>\n\n  <match target=\"font\">\n    <edit mode=\"assign\" name=\"rgba\">\n      <const>rgb</const>\n    </edit>\n  </match>\n\n  <match target=\"font\">\n    <edit mode=\"assign\" name=\"hintstyle\">\n      <const>hintfull</const>\n    </edit>\n  </match>\n\n  <match target=\"font\">\n    <edit mode=\"assign\" name=\"antialias\">\n      <bool>true</bool>\n    </edit>\n  </match>\n\n  <match target=\"font\">\n    <edit name=\"lcdfilter\" mode=\"assign\">\n      <const>lcddefault</const>\n    </edit>\n  </match>\n\n  <!-- Default font (no fc-match pattern) -->\n  <match>\n    <edit mode=\"prepend\" name=\"family\">\n      <string>Noto Sans Mono</string>\n    </edit>\n  </match>\n\n  <!-- Default font for the zh_CN locale (no fc-match pattern) -->\n  <match>\n    <test compare=\"contains\" name=\"lang\">\n      <string>zh_CN</string>\n    </test>\n    <edit mode=\"prepend\" name=\"family\">\n      <string>Noto Sans CJK SC</string>\n    </edit>\n  </match>\n\n  <!-- Default sans-serif font -->\n  <match target=\"pattern\">\n    <test qual=\"any\" name=\"family\">\n      <string>sans-serif</string></test>\n    <edit name=\"family\" mode=\"prepend\" binding=\"same\">\n      <string>Noto Sans</string>\n    </edit>\n  </match>\n\n  <!-- Default serif fonts -->\n  <match target=\"pattern\">\n    <test qual=\"any\" name=\"family\">\n      <string>serif</string>\n    </test>\n    <edit name=\"family\" mode=\"prepend\" binding=\"same\">\n      <string>Noto Serif</string>\n    </edit>\n  </match>\n\n  <!-- Fallback fonts preference order -->\n  <alias>\n    <family>sans-serif</family>\n    <prefer>\n      <family>Noto Sans</family>\n      <family>Noto Sans CJK SC</family>\n      <family>Noto Sans CJK TC</family>\n      <family>Noto Sans CJK JP</family>\n      <family>Noto Sans CJK KR</family>\n      <family>Noto Color Emoji</family>\n      <family>Noto Emoji</family>\n    </prefer>\n  </alias>\n  <alias>\n    <family>serif</family>\n    <prefer>\n      <family>Noto Serif</family>\n      <family>Noto Serif CJK SC</family>\n      <family>Noto Serif CJK TC</family>\n      <family>Noto Serif CJK JP</family>\n      <family>Noto Serif CJK KR</family>\n      <family>Noto Color Emoji</family>\n      <family>Noto Emoji</family>\n    </prefer>\n  </alias>\n  <alias>\n    <family>monospace</family>\n    <prefer>\n      <family>Noto Sans Mono</family>\n      <family>Noto Color Emoji</family>\n      <family>Noto Emoji</family>\n    </prefer>\n  </alias>\n\n</fontconfig>\n```\n然后刷新字体缓存：\n```shell\n$ fc-cache -fv\n```\n\n#### 桌面字体设置\n* 在`菜单->首选项->外观->字体`中可以找到桌面相关字体配置，这里将这些字体（除等宽）都改为`Noto Sans CJK SC Regular`，等宽字体改为`Noto Sans Mono Regular`，字体大小设置为10左右，当然这些根据个人的电脑的效果调整。\n* 在渲染中的细节中，关闭分辨率的自动检测，然后手动设置DPI，我的电脑是1080的，故设置为124左右即可（其他屏幕可视效果调整）；微调设置为完全，其他的可以保持不动。\n\n#### Qt应用字体设置\n* 在`菜单->首选项->Qt5设置`中，将字体设置为`Noto Sans CJK`系列，根据效果调整大小。\n\n#### 浏览器字体设置\n浏览器页面的字体不受桌面字体设置的影响，桌面字体仅仅只能改变浏览器顶部选项卡以及菜单的字体大小，网页的字体还需要在浏览器中单独设置，这里以chrome为例，其他浏览器有类似设置。打开chrome设置页面，找到自定义字体，然后打开高级字体设置。浏览器的配置经过反复的尝试折腾，最终配置如下:\n![img][1]\n以上为`Default`的配置，还需要配置下`Simplified Han`，在Script中找到并修改成一样即可。如果有emoji显示不正常的问题，需检查[字体配置](#配置字体)是否正确，最后看下我的配置效果：\n![img][2]\n![img][3]\n至于中文字体的效果，可根据自己的喜好选择Noto系列或者文泉驿字体，或者其他好看的中文字体。\n\n#### 其他\n至于其他应用（如：IDEA，VS Code等等），内部都有相应设置字体的地方，按自己的喜好设置字体及大小即可。\n\n\n[1]: /images/work-on-linux/font-config.png\n[2]: /images/work-on-linux/font-config-effects1.png\n[3]: /images/work-on-linux/font-config-effects2.png","slug":"work-on-linux-part-three","published":1,"updated":"2023-05-23T06:12:37.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli00ivm2001yz0inhxxz6pxp","content":"<a href=\"/2018/10/18/work-on-linux-part-two/\" title=\"在Linux下进行开发工作（二）\">在 Linux 下进行开发工作（二）</a>中记录了Manjaro日常使用中的一些常用软件和配置。基本可以在Linux进行开发了，不过由于屏幕适配以及字体的问题，会出现字体发虚，太小等等问题（4k屏以上一般来说不会有这些问题，但也不排除有个别情况），在Manjaro上的中文展示不是特别理想。这一篇主要记录下如何通过配置来调优字体显示，以适配自己的电脑。依然那句话，如果没准备好用Linux作为日常开发桌面，千万不要尝试 : )。\n<span id=\"more\"></span>\n\n\n<h4 id=\"字体安装\"><a href=\"#字体安装\" class=\"headerlink\" title=\"字体安装\"></a>字体安装</h4><p>首先找一个能够对中文展示比较友好字体，几番寻找，找到了 <code>Noto Sans CJK</code>，也有人使用<code>文泉驿微米黑</code>，不过我试用了几天，还是觉得 <code>Noto</code> 系列看起来舒服些（这就看个人喜好了），这些字体都可以直接使用 <code>pacman</code> 安装：</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo pacman -S noto-fonts noto-fonts-cjk noto-fonts-emoji wqy-microhei</span>  </span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"配置字体\"><a href=\"#配置字体\" class=\"headerlink\" title=\"配置字体\"></a>配置字体</h4><p>在 <code>$HOME/.config/fontconfig/fonts.conf</code>（若没有则创建，若存在则覆盖）中添加如下配置：</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">fontconfig</span> <span class=\"keyword\">SYSTEM</span> <span class=\"string\">\"fonts.dtd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">fontconfig</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">match</span> <span class=\"attr\">target</span>=<span class=\"string\">\"font\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">edit</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"assign\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"rgba\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">const</span>&gt;</span>rgb<span class=\"tag\">&lt;/<span class=\"name\">const</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">edit</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">match</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">match</span> <span class=\"attr\">target</span>=<span class=\"string\">\"font\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">edit</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"assign\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hintstyle\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">const</span>&gt;</span>hintfull<span class=\"tag\">&lt;/<span class=\"name\">const</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">edit</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">match</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">match</span> <span class=\"attr\">target</span>=<span class=\"string\">\"font\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">edit</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"assign\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"antialias\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bool</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">bool</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">edit</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">match</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">match</span> <span class=\"attr\">target</span>=<span class=\"string\">\"font\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">edit</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lcdfilter\"</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"assign\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">const</span>&gt;</span>lcddefault<span class=\"tag\">&lt;/<span class=\"name\">const</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">edit</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">match</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- Default font (no fc-match pattern) --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">match</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">edit</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"prepend\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"family\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Noto Sans Mono<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">edit</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">match</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- Default font for the zh_CN locale (no fc-match pattern) --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">match</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">test</span> <span class=\"attr\">compare</span>=<span class=\"string\">\"contains\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lang\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>zh_CN<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">test</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">edit</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"prepend\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"family\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Noto Sans CJK SC<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">edit</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">match</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- Default sans-serif font --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">match</span> <span class=\"attr\">target</span>=<span class=\"string\">\"pattern\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">test</span> <span class=\"attr\">qual</span>=<span class=\"string\">\"any\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"family\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>sans-serif<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">test</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">edit</span> <span class=\"attr\">name</span>=<span class=\"string\">\"family\"</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"prepend\"</span> <span class=\"attr\">binding</span>=<span class=\"string\">\"same\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Noto Sans<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">edit</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">match</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- Default serif fonts --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">match</span> <span class=\"attr\">target</span>=<span class=\"string\">\"pattern\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">test</span> <span class=\"attr\">qual</span>=<span class=\"string\">\"any\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"family\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>serif<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">test</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">edit</span> <span class=\"attr\">name</span>=<span class=\"string\">\"family\"</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"prepend\"</span> <span class=\"attr\">binding</span>=<span class=\"string\">\"same\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Noto Serif<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">edit</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">match</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- Fallback fonts preference order --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">alias</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>sans-serif<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">prefer</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Sans<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Sans CJK SC<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Sans CJK TC<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Sans CJK JP<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Sans CJK KR<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Color Emoji<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Emoji<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">prefer</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">alias</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">alias</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>serif<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">prefer</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Serif<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Serif CJK SC<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Serif CJK TC<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Serif CJK JP<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Serif CJK KR<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Color Emoji<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Emoji<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">prefer</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">alias</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">alias</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>monospace<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">prefer</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Sans Mono<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Color Emoji<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Emoji<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">prefer</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">alias</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">fontconfig</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n<p>然后刷新字体缓存：</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">fc-cache -fv</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"桌面字体设置\"><a href=\"#桌面字体设置\" class=\"headerlink\" title=\"桌面字体设置\"></a>桌面字体设置</h4><ul>\n<li>在<code>菜单-&gt;首选项-&gt;外观-&gt;字体</code>中可以找到桌面相关字体配置，这里将这些字体（除等宽）都改为 <code>Noto Sans CJK SC Regular</code>，等宽字体改为 <code>Noto Sans Mono Regular</code>，字体大小设置为 10 左右，当然这些根据个人的电脑的效果调整。</li>\n<li>在渲染中的细节中，关闭分辨率的自动检测，然后手动设置 DPI，我的电脑是 1080 的，故设置为 124 左右即可（其他屏幕可视效果调整）；微调设置为完全，其他的可以保持不动。</li>\n</ul>\n<h4 id=\"Qt应用字体设置\"><a href=\"#Qt应用字体设置\" class=\"headerlink\" title=\"Qt应用字体设置\"></a>Qt 应用字体设置</h4><ul>\n<li>在<code>菜单-&gt;首选项-&gt;Qt5设置</code>中，将字体设置为 <code>Noto Sans CJK</code> 系列，根据效果调整大小。</li>\n</ul>\n<h4 id=\"浏览器字体设置\"><a href=\"#浏览器字体设置\" class=\"headerlink\" title=\"浏览器字体设置\"></a>浏览器字体设置</h4><p>浏览器页面的字体不受桌面字体设置的影响，桌面字体仅仅只能改变浏览器顶部选项卡以及菜单的字体大小，网页的字体还需要在浏览器中单独设置，这里以 chrome 为例，其他浏览器有类似设置。打开 chrome 设置页面，找到自定义字体，然后打开高级字体设置。浏览器的配置经过反复的尝试折腾，最终配置如下:<br><img src=\"/images/work-on-linux/font-config.png\" alt=\"img\"><br>以上为 <code>Default</code> 的配置，还需要配置下 <code>Simplified Han</code>，在 Script 中找到并修改成一样即可。如果有 emoji 显示不正常的问题，需检查<a href=\"#%E9%85%8D%E7%BD%AE%E5%AD%97%E4%BD%93\">字体配置</a>是否正确，最后看下我的配置效果：<br><img src=\"/images/work-on-linux/font-config-effects1.png\" alt=\"img\"><br><img src=\"/images/work-on-linux/font-config-effects2.png\" alt=\"img\"><br>至于中文字体的效果，可根据自己的喜好选择 Noto 系列或者文泉驿字体，或者其他好看的中文字体。</p>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p>至于其他应用（如：IDEA，VS Code 等等），内部都有相应设置字体的地方，按自己的喜好设置字体及大小即可。</p>\n","site":{"data":{}},"excerpt":"<a href=\"/2018/10/18/work-on-linux-part-two/\" title=\"在Linux下进行开发工作（二）\">在 Linux 下进行开发工作（二）</a>中记录了Manjaro日常使用中的一些常用软件和配置。基本可以在Linux进行开发了，不过由于屏幕适配以及字体的问题，会出现字体发虚，太小等等问题（4k屏以上一般来说不会有这些问题，但也不排除有个别情况），在Manjaro上的中文展示不是特别理想。这一篇主要记录下如何通过配置来调优字体显示，以适配自己的电脑。依然那句话，如果没准备好用Linux作为日常开发桌面，千万不要尝试 : )。","more":"<h4 id=\"字体安装\"><a href=\"#字体安装\" class=\"headerlink\" title=\"字体安装\"></a>字体安装</h4><p>首先找一个能够对中文展示比较友好字体，几番寻找，找到了 <code>Noto Sans CJK</code>，也有人使用<code>文泉驿微米黑</code>，不过我试用了几天，还是觉得 <code>Noto</code> 系列看起来舒服些（这就看个人喜好了），这些字体都可以直接使用 <code>pacman</code> 安装：</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo pacman -S noto-fonts noto-fonts-cjk noto-fonts-emoji wqy-microhei</span>  </span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"配置字体\"><a href=\"#配置字体\" class=\"headerlink\" title=\"配置字体\"></a>配置字体</h4><p>在 <code>$HOME/.config/fontconfig/fonts.conf</code>（若没有则创建，若存在则覆盖）中添加如下配置：</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">fontconfig</span> <span class=\"keyword\">SYSTEM</span> <span class=\"string\">\"fonts.dtd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">fontconfig</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">match</span> <span class=\"attr\">target</span>=<span class=\"string\">\"font\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">edit</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"assign\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"rgba\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">const</span>&gt;</span>rgb<span class=\"tag\">&lt;/<span class=\"name\">const</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">edit</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">match</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">match</span> <span class=\"attr\">target</span>=<span class=\"string\">\"font\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">edit</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"assign\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hintstyle\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">const</span>&gt;</span>hintfull<span class=\"tag\">&lt;/<span class=\"name\">const</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">edit</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">match</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">match</span> <span class=\"attr\">target</span>=<span class=\"string\">\"font\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">edit</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"assign\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"antialias\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bool</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">bool</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">edit</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">match</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">match</span> <span class=\"attr\">target</span>=<span class=\"string\">\"font\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">edit</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lcdfilter\"</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"assign\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">const</span>&gt;</span>lcddefault<span class=\"tag\">&lt;/<span class=\"name\">const</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">edit</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">match</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- Default font (no fc-match pattern) --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">match</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">edit</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"prepend\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"family\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Noto Sans Mono<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">edit</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">match</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- Default font for the zh_CN locale (no fc-match pattern) --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">match</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">test</span> <span class=\"attr\">compare</span>=<span class=\"string\">\"contains\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lang\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>zh_CN<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">test</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">edit</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"prepend\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"family\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Noto Sans CJK SC<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">edit</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">match</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- Default sans-serif font --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">match</span> <span class=\"attr\">target</span>=<span class=\"string\">\"pattern\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">test</span> <span class=\"attr\">qual</span>=<span class=\"string\">\"any\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"family\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>sans-serif<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">test</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">edit</span> <span class=\"attr\">name</span>=<span class=\"string\">\"family\"</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"prepend\"</span> <span class=\"attr\">binding</span>=<span class=\"string\">\"same\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Noto Sans<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">edit</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">match</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- Default serif fonts --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">match</span> <span class=\"attr\">target</span>=<span class=\"string\">\"pattern\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">test</span> <span class=\"attr\">qual</span>=<span class=\"string\">\"any\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"family\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>serif<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">test</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">edit</span> <span class=\"attr\">name</span>=<span class=\"string\">\"family\"</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"prepend\"</span> <span class=\"attr\">binding</span>=<span class=\"string\">\"same\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Noto Serif<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">edit</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">match</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- Fallback fonts preference order --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">alias</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>sans-serif<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">prefer</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Sans<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Sans CJK SC<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Sans CJK TC<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Sans CJK JP<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Sans CJK KR<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Color Emoji<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Emoji<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">prefer</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">alias</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">alias</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>serif<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">prefer</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Serif<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Serif CJK SC<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Serif CJK TC<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Serif CJK JP<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Serif CJK KR<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Color Emoji<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Emoji<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">prefer</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">alias</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">alias</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>monospace<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">prefer</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Sans Mono<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Color Emoji<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Noto Emoji<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">prefer</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">alias</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">fontconfig</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n<p>然后刷新字体缓存：</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">fc-cache -fv</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"桌面字体设置\"><a href=\"#桌面字体设置\" class=\"headerlink\" title=\"桌面字体设置\"></a>桌面字体设置</h4><ul>\n<li>在<code>菜单-&gt;首选项-&gt;外观-&gt;字体</code>中可以找到桌面相关字体配置，这里将这些字体（除等宽）都改为 <code>Noto Sans CJK SC Regular</code>，等宽字体改为 <code>Noto Sans Mono Regular</code>，字体大小设置为 10 左右，当然这些根据个人的电脑的效果调整。</li>\n<li>在渲染中的细节中，关闭分辨率的自动检测，然后手动设置 DPI，我的电脑是 1080 的，故设置为 124 左右即可（其他屏幕可视效果调整）；微调设置为完全，其他的可以保持不动。</li>\n</ul>\n<h4 id=\"Qt应用字体设置\"><a href=\"#Qt应用字体设置\" class=\"headerlink\" title=\"Qt应用字体设置\"></a>Qt 应用字体设置</h4><ul>\n<li>在<code>菜单-&gt;首选项-&gt;Qt5设置</code>中，将字体设置为 <code>Noto Sans CJK</code> 系列，根据效果调整大小。</li>\n</ul>\n<h4 id=\"浏览器字体设置\"><a href=\"#浏览器字体设置\" class=\"headerlink\" title=\"浏览器字体设置\"></a>浏览器字体设置</h4><p>浏览器页面的字体不受桌面字体设置的影响，桌面字体仅仅只能改变浏览器顶部选项卡以及菜单的字体大小，网页的字体还需要在浏览器中单独设置，这里以 chrome 为例，其他浏览器有类似设置。打开 chrome 设置页面，找到自定义字体，然后打开高级字体设置。浏览器的配置经过反复的尝试折腾，最终配置如下:<br><img src=\"/images/work-on-linux/font-config.png\" alt=\"img\"><br>以上为 <code>Default</code> 的配置，还需要配置下 <code>Simplified Han</code>，在 Script 中找到并修改成一样即可。如果有 emoji 显示不正常的问题，需检查<a href=\"#%E9%85%8D%E7%BD%AE%E5%AD%97%E4%BD%93\">字体配置</a>是否正确，最后看下我的配置效果：<br><img src=\"/images/work-on-linux/font-config-effects1.png\" alt=\"img\"><br><img src=\"/images/work-on-linux/font-config-effects2.png\" alt=\"img\"><br>至于中文字体的效果，可根据自己的喜好选择 Noto 系列或者文泉驿字体，或者其他好看的中文字体。</p>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p>至于其他应用（如：IDEA，VS Code 等等），内部都有相应设置字体的地方，按自己的喜好设置字体及大小即可。</p>"},{"title":"在 Linux 下进行开发工作（二）","date":"2018-10-18T09:37:14.000Z","_content":"\n{% post_link work-on-linux-part-one %}中记录了Manjaro的安装过程以及源设置等等，这一篇主要记录下常用软件的安装等等。Manjaro固然非常的方便，各种开发工具一条命令就可以安装好，但有些Windows常用软件Linux上也没有，有的可以使用Linux上的替代品，不过还是有少许软件不可避免的要使用（如微信，QQ等），这会给我们的工作带来了不少的麻烦，刚从Windows转Linux会有诸多的不习惯，不过都还好，我们总是有各种各样的办法来折腾Linux来适合我们用来做日常的开发桌面。还是那句话，如果没准备好用Linux作为日常开发桌面，千万不要尝试 : )。\n<!-- more -->\n\n\n#### 输入法\n毕竟日常还是使用中文，中文输入法是必须得安装的，Linux下的输入框架常用的有`fcitx`和`ibus`，我选用的是[fcitx][1]：\n* 安装fcitx\n    ```shell\n    $ sudo pacman -S fcitx fcitx-configtool \n    ```\n* 安装输入法引擎\n    fcitx默认自带了中文输入引擎，其他选择就比较多了，（比如国内常用的sougou拼音），我选择的是[Rime][2]，配上一个`fcitx-skin-material`用来非常不错。不过Rime默认是繁体输入，如果要改为默认简体，需新增一个自定义配置文件`$HOME/.config/fcitx/rime/\n    luna_pinyin.custom.yaml`：\n    ```yml\n    patch:\n    \"menu/page_size\": 9\n    switches:                   # 注意缩进\n        - name: ascii_mode\n        reset: 0                # reset 0 的作用是当从其他输入法切换到本输入法重设为指定状态\n        states: [ 中文, 西文 ]   # 选择输入方案后通常需要立即输入中文，故重设 ascii_mode = 0\n        - name: full_shape\n        states: [ 半角, 全角 ]   # 而全／半角则可沿用之前方案的用法。\n        - name: simplification\n        reset: 1                # 增加这一行：默认启用「繁→簡」转换。\n        states: [ 漢字, 汉字 ]\n    ```\n    这里面还包括候选字数，全/半角等配置。\n* 安装输入法模组\n    要在桌面上使用（包括浏览器，应用等等），还需要安装输入法模组，尽可能的安装完全：\n    ```shell\n    $ sudo pacman -S fcitx-gtk2 fcitx-gtk3 fcitx-qt4 fcitx-qt5\n    ```\n* 添加配置\n    在`$HOME/.xprofile`中添加如下配置\n    ```text\n    export GTK_IM_MODULE=fcitx\n    export QT_IM_MODULE=fcitx\n    export XMODIFIERS=@im=fcitx\n    ```\n最后重启电脑，既可以使用输入法了，关于快捷键和字体大小，可在fcitx config GUI里面配置。至此，输入法基本上就搞定了。\n\n#### 微信\n日常中微信使用的频率比较高，不可避免的要安装，一般有几种解决方案：\n* [electronic-wechat][3]\n使用的是微信web版，然后用electronic封装的，作者似乎以及停更了，安装后体验了下，弃了。\n* [weweChat][4]\n界面做得比较好看，和electronic-wechat使用同样的原理，没体验过。\n* [deepin-wechat][5]\n使用deepin自己定制的[wine][6]，安装后，不知道为什么我电脑上问题挺多（比如不能贴图），遂弃之。\n\n体验过这么多之后，最后还是决定使用wine版本的，不过是自己进行配置。在github上找到一个专门针对国内软件的wine脚本[winetricks-zh][7]，会自动安装一些依赖，最后尝试下来这个版本体验最好，除了不能截图（当然有替代方案，[shutter][8]），其他基本和Windows上没太大差别。\n* 安装wine及相关依赖\n    ```shell\n    $ sudo pacman -S wine wine-mono wine_gecko\n    ```\n* 使用winetricks-zh安装微信\n    作者有较长时间未更新了，目前微信官网的微信已更新，会导致文件校验失败，不过只需要把脚本中的hash值改一下即可（文件为在`winetricks-zh/verb/wechat.verb`），下载官网最新安装包，然后计算sha256:\n    ```shell\n    $ sha256sum WeChatSetup.exe\n    ```\n    最后将hash值替换为此hash值即可，后续就会自动安装一些依赖。\n* 配置\n    安装完后可以直接打开使用，不过由于屏幕适配以及字体问题，可能会导致乱码，字体小的问题，因此我们还需要修改些配置才能正常使用。\n    - 字体安\n    需要将`微软雅黑`和`新宋`字体复制到`$HOME/.local/share/fonts`下，并刷新字体缓存：\n    ```shell\n    $ fc-cache -fv\n    ```\n    - 修改`$HOME/.wine/system.reg`\n    找到`LogPixels`，将值修改为80（根据自己的屏幕调整）\n    - 修改`$HOME/.wine/driver_c/windows/win.ini`\n    在文件尾新增：\n    ```text\n    [Desktop]\n    menufontsize=13\n    messagefontsize=13\n    statusfontsize=13\n    IconTitleSize=13\n    ```\n    - 新增`$HOME/.wine/zh.reg`\n    在文件中添加以下参数：\n    ```text\n    REGEDIT4\n\n    [HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\FontSubstitutes]\n\n    \"Arial\"=\"simsun\"\n    \"Arial CE,238\"=\"simsun\"\n    \"Arial CYR,204\"=\"simsun\"\n    \"Arial Greek,161\"=\"simsun\"\n    \"Arial TUR,162\"=\"simsun\"\n    \"Courier New\"=\"simsun\"\n    \"Courier New CE,238\"=\"simsun\"\n    \"Courier New CYR,204\"=\"simsun\"\n    \"Courier New Greek,161\"=\"simsun\"\n    \"Courier New TUR,162\"=\"simsun\"\n    \"FixedSys\"=\"simsun\"\n    \"Helv\"=\"simsun\"\n    \"Helvetica\"=\"simsun\"\n    \"MS Sans Serif\"=\"simsun\"\n    \"MS Shell Dlg\"=\"simsun\"\n    \"MS Shell Dlg 2\"=\"simsun\"\n    \"System\"=\"simsun\"\n    \"Tahoma\"=\"simsun\"\n    \"Times\"=\"simsun\"\n    \"Times New Roman CE,238\"=\"simsun\"\n    \"Times New Roman CYR,204\"=\"simsun\"\n    \"Times New Roman Greek,161\"=\"simsun\"\n    \"Times New Roman TUR,162\"=\"simsun\"\n    \"Tms Rmn\"=\"simsun\"\n    ```\n重新打开微信，应该就没什么问题了。关于快捷键问题，Linux下无法直接使用微信中的快捷键（其实是没有焦点，如果打开微信的设置页面，再使用打开快捷键，发现还是有用的，当然这非常不方便），最后找了个办法，在系统快捷键中，添加一个快捷键来打开微信即可，命令使用wine来打开：\n```text\nenv WINEPREFIX=\"/home/cooler/.wine\" wine \"/home/cooler/.wine/drive_c/Program Files/Tencent/WeChat/WeChat.exe\"\n```\n这样就可以使用快捷键打开微信，不过不能关闭，只能使用`Esc`来关闭，不过这点小问题不影响使用。至于其他软件，可以参考`winetricks-zh`。\n\n#### 开发软件\n一般开发软件都有Linux版本的，除非是系统特有的软件（如Windows的visual studio等等），这种就没办法了，只能放弃使用Linux了。\n\n#### 截图软件\nLinux下首推[shutter][8]，功能已经非常完善了，在系统快捷键中新增一个，命令如下：\n```text\nshutter -s\n```\n然后配合微信，QQ等使用，直接粘贴到对话框中即可。\n\n#### 办公软件\nWindows下办公软件莫过于Office全家桶，但Linux下就没这么好的办公软件了，替代品为[WPS Office][9]和[Libre Office][10]，wps用起来比较接近MS Office，这个看个人喜好选择。\n\n#### 其他\n* 制图软件[GIMP][11]\n* 思维导图[XMind][12]\n* PDF阅读使用自带的`Atril Document Viewer`就可以了\n* 视频播放软件[VLC][13]。\n* 邮件客户端[Evolution][14]\n* ......\n\n[1]: https://wiki.archlinux.org/index.php/Fcitx\n[2]: https://wiki.archlinux.org/index.php/Rime_IME\n[3]: https://github.com/geeeeeeeeek/electronic-wechat\n[4]: https://github.com/trazyn/weweChat\n[5]: https://aur.archlinux.org/packages/deepin-wechat/\n[6]: https://www.winehq.org/\n[7]: https://github.com/hillwoodroc/winetricks-zh\n[8]: http://shutter-project.org/\n[9]: https://www.wps.com/\n[10]: https://www.libreoffice.org/\n[11]: https://www.gimp.org/\n[12]: https://www.xmind.net/\n[13]: https://www.videolan.org/vlc/\n[14]: https://wiki.gnome.org/Apps/Evolution","source":"_posts/2018-10-18-work-on-linux-part-two.md","raw":"---\ntitle: 在Linux下进行开发工作（二）\ndate: 2018-10-18 17:37:14\ncategories: misc\ntags: linux\n---\n\n{% post_link work-on-linux-part-one %}中记录了Manjaro的安装过程以及源设置等等，这一篇主要记录下常用软件的安装等等。Manjaro固然非常的方便，各种开发工具一条命令就可以安装好，但有些Windows常用软件Linux上也没有，有的可以使用Linux上的替代品，不过还是有少许软件不可避免的要使用（如微信，QQ等），这会给我们的工作带来了不少的麻烦，刚从Windows转Linux会有诸多的不习惯，不过都还好，我们总是有各种各样的办法来折腾Linux来适合我们用来做日常的开发桌面。还是那句话，如果没准备好用Linux作为日常开发桌面，千万不要尝试 : )。\n<!-- more -->\n\n\n#### 输入法\n毕竟日常还是使用中文，中文输入法是必须得安装的，Linux下的输入框架常用的有`fcitx`和`ibus`，我选用的是[fcitx][1]：\n* 安装fcitx\n    ```shell\n    $ sudo pacman -S fcitx fcitx-configtool \n    ```\n* 安装输入法引擎\n    fcitx默认自带了中文输入引擎，其他选择就比较多了，（比如国内常用的sougou拼音），我选择的是[Rime][2]，配上一个`fcitx-skin-material`用来非常不错。不过Rime默认是繁体输入，如果要改为默认简体，需新增一个自定义配置文件`$HOME/.config/fcitx/rime/\n    luna_pinyin.custom.yaml`：\n    ```yml\n    patch:\n    \"menu/page_size\": 9\n    switches:                   # 注意缩进\n        - name: ascii_mode\n        reset: 0                # reset 0 的作用是当从其他输入法切换到本输入法重设为指定状态\n        states: [ 中文, 西文 ]   # 选择输入方案后通常需要立即输入中文，故重设 ascii_mode = 0\n        - name: full_shape\n        states: [ 半角, 全角 ]   # 而全／半角则可沿用之前方案的用法。\n        - name: simplification\n        reset: 1                # 增加这一行：默认启用「繁→簡」转换。\n        states: [ 漢字, 汉字 ]\n    ```\n    这里面还包括候选字数，全/半角等配置。\n* 安装输入法模组\n    要在桌面上使用（包括浏览器，应用等等），还需要安装输入法模组，尽可能的安装完全：\n    ```shell\n    $ sudo pacman -S fcitx-gtk2 fcitx-gtk3 fcitx-qt4 fcitx-qt5\n    ```\n* 添加配置\n    在`$HOME/.xprofile`中添加如下配置\n    ```text\n    export GTK_IM_MODULE=fcitx\n    export QT_IM_MODULE=fcitx\n    export XMODIFIERS=@im=fcitx\n    ```\n最后重启电脑，既可以使用输入法了，关于快捷键和字体大小，可在fcitx config GUI里面配置。至此，输入法基本上就搞定了。\n\n#### 微信\n日常中微信使用的频率比较高，不可避免的要安装，一般有几种解决方案：\n* [electronic-wechat][3]\n使用的是微信web版，然后用electronic封装的，作者似乎以及停更了，安装后体验了下，弃了。\n* [weweChat][4]\n界面做得比较好看，和electronic-wechat使用同样的原理，没体验过。\n* [deepin-wechat][5]\n使用deepin自己定制的[wine][6]，安装后，不知道为什么我电脑上问题挺多（比如不能贴图），遂弃之。\n\n体验过这么多之后，最后还是决定使用wine版本的，不过是自己进行配置。在github上找到一个专门针对国内软件的wine脚本[winetricks-zh][7]，会自动安装一些依赖，最后尝试下来这个版本体验最好，除了不能截图（当然有替代方案，[shutter][8]），其他基本和Windows上没太大差别。\n* 安装wine及相关依赖\n    ```shell\n    $ sudo pacman -S wine wine-mono wine_gecko\n    ```\n* 使用winetricks-zh安装微信\n    作者有较长时间未更新了，目前微信官网的微信已更新，会导致文件校验失败，不过只需要把脚本中的hash值改一下即可（文件为在`winetricks-zh/verb/wechat.verb`），下载官网最新安装包，然后计算sha256:\n    ```shell\n    $ sha256sum WeChatSetup.exe\n    ```\n    最后将hash值替换为此hash值即可，后续就会自动安装一些依赖。\n* 配置\n    安装完后可以直接打开使用，不过由于屏幕适配以及字体问题，可能会导致乱码，字体小的问题，因此我们还需要修改些配置才能正常使用。\n    - 字体安\n    需要将`微软雅黑`和`新宋`字体复制到`$HOME/.local/share/fonts`下，并刷新字体缓存：\n    ```shell\n    $ fc-cache -fv\n    ```\n    - 修改`$HOME/.wine/system.reg`\n    找到`LogPixels`，将值修改为80（根据自己的屏幕调整）\n    - 修改`$HOME/.wine/driver_c/windows/win.ini`\n    在文件尾新增：\n    ```text\n    [Desktop]\n    menufontsize=13\n    messagefontsize=13\n    statusfontsize=13\n    IconTitleSize=13\n    ```\n    - 新增`$HOME/.wine/zh.reg`\n    在文件中添加以下参数：\n    ```text\n    REGEDIT4\n\n    [HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\FontSubstitutes]\n\n    \"Arial\"=\"simsun\"\n    \"Arial CE,238\"=\"simsun\"\n    \"Arial CYR,204\"=\"simsun\"\n    \"Arial Greek,161\"=\"simsun\"\n    \"Arial TUR,162\"=\"simsun\"\n    \"Courier New\"=\"simsun\"\n    \"Courier New CE,238\"=\"simsun\"\n    \"Courier New CYR,204\"=\"simsun\"\n    \"Courier New Greek,161\"=\"simsun\"\n    \"Courier New TUR,162\"=\"simsun\"\n    \"FixedSys\"=\"simsun\"\n    \"Helv\"=\"simsun\"\n    \"Helvetica\"=\"simsun\"\n    \"MS Sans Serif\"=\"simsun\"\n    \"MS Shell Dlg\"=\"simsun\"\n    \"MS Shell Dlg 2\"=\"simsun\"\n    \"System\"=\"simsun\"\n    \"Tahoma\"=\"simsun\"\n    \"Times\"=\"simsun\"\n    \"Times New Roman CE,238\"=\"simsun\"\n    \"Times New Roman CYR,204\"=\"simsun\"\n    \"Times New Roman Greek,161\"=\"simsun\"\n    \"Times New Roman TUR,162\"=\"simsun\"\n    \"Tms Rmn\"=\"simsun\"\n    ```\n重新打开微信，应该就没什么问题了。关于快捷键问题，Linux下无法直接使用微信中的快捷键（其实是没有焦点，如果打开微信的设置页面，再使用打开快捷键，发现还是有用的，当然这非常不方便），最后找了个办法，在系统快捷键中，添加一个快捷键来打开微信即可，命令使用wine来打开：\n```text\nenv WINEPREFIX=\"/home/cooler/.wine\" wine \"/home/cooler/.wine/drive_c/Program Files/Tencent/WeChat/WeChat.exe\"\n```\n这样就可以使用快捷键打开微信，不过不能关闭，只能使用`Esc`来关闭，不过这点小问题不影响使用。至于其他软件，可以参考`winetricks-zh`。\n\n#### 开发软件\n一般开发软件都有Linux版本的，除非是系统特有的软件（如Windows的visual studio等等），这种就没办法了，只能放弃使用Linux了。\n\n#### 截图软件\nLinux下首推[shutter][8]，功能已经非常完善了，在系统快捷键中新增一个，命令如下：\n```text\nshutter -s\n```\n然后配合微信，QQ等使用，直接粘贴到对话框中即可。\n\n#### 办公软件\nWindows下办公软件莫过于Office全家桶，但Linux下就没这么好的办公软件了，替代品为[WPS Office][9]和[Libre Office][10]，wps用起来比较接近MS Office，这个看个人喜好选择。\n\n#### 其他\n* 制图软件[GIMP][11]\n* 思维导图[XMind][12]\n* PDF阅读使用自带的`Atril Document Viewer`就可以了\n* 视频播放软件[VLC][13]。\n* 邮件客户端[Evolution][14]\n* ......\n\n[1]: https://wiki.archlinux.org/index.php/Fcitx\n[2]: https://wiki.archlinux.org/index.php/Rime_IME\n[3]: https://github.com/geeeeeeeeek/electronic-wechat\n[4]: https://github.com/trazyn/weweChat\n[5]: https://aur.archlinux.org/packages/deepin-wechat/\n[6]: https://www.winehq.org/\n[7]: https://github.com/hillwoodroc/winetricks-zh\n[8]: http://shutter-project.org/\n[9]: https://www.wps.com/\n[10]: https://www.libreoffice.org/\n[11]: https://www.gimp.org/\n[12]: https://www.xmind.net/\n[13]: https://www.videolan.org/vlc/\n[14]: https://wiki.gnome.org/Apps/Evolution","slug":"work-on-linux-part-two","published":1,"updated":"2023-05-23T06:00:32.378Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli00ivm30021z0inhdn13gyc","content":"<a href=\"/2018/10/17/work-on-linux-part-one/\" title=\"在Linux下进行开发工作（一）\">在 Linux 下进行开发工作（一）</a>中记录了Manjaro的安装过程以及源设置等等，这一篇主要记录下常用软件的安装等等。Manjaro固然非常的方便，各种开发工具一条命令就可以安装好，但有些Windows常用软件Linux上也没有，有的可以使用Linux上的替代品，不过还是有少许软件不可避免的要使用（如微信，QQ等），这会给我们的工作带来了不少的麻烦，刚从Windows转Linux会有诸多的不习惯，不过都还好，我们总是有各种各样的办法来折腾Linux来适合我们用来做日常的开发桌面。还是那句话，如果没准备好用Linux作为日常开发桌面，千万不要尝试 : )。\n<span id=\"more\"></span>\n\n\n<h4 id=\"输入法\"><a href=\"#输入法\" class=\"headerlink\" title=\"输入法\"></a>输入法</h4><p>毕竟日常还是使用中文，中文输入法是必须得安装的，Linux 下的输入框架常用的有 <code>fcitx</code> 和 <code>ibus</code>，我选用的是 <a href=\"https://wiki.archlinux.org/index.php/Fcitx\">fcitx</a>：</p>\n<ul>\n<li>安装 fcitx  <figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo pacman -S fcitx fcitx-configtool</span> </span><br></pre></td></tr></tbody></table></figure></li>\n<li>安装输入法引擎<br>  fcitx 默认自带了中文输入引擎，其他选择就比较多了，（比如国内常用的 sougou 拼音），我选择的是 <a href=\"https://wiki.archlinux.org/index.php/Rime_IME\">Rime</a>，配上一个 <code>fcitx-skin-material</code> 用来非常不错。不过 Rime 默认是繁体输入，如果要改为默认简体，需新增一个自定义配置文件 <code>$HOME/.config/fcitx/rime/   luna_pinyin.custom.yaml</code>：  <figure class=\"highlight yml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">patch:</span></span><br><span class=\"line\"><span class=\"attr\">\"menu/page_size\":</span> <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"attr\">switches:</span>                   <span class=\"comment\"># 注意缩进</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ascii_mode</span></span><br><span class=\"line\">    <span class=\"attr\">reset:</span> <span class=\"number\">0</span>                <span class=\"comment\"># reset 0 的作用是当从其他输入法切换到本输入法重设为指定状态</span></span><br><span class=\"line\">    <span class=\"attr\">states:</span> [ <span class=\"string\">中文</span>, <span class=\"string\">西文</span> ]   <span class=\"comment\"># 选择输入方案后通常需要立即输入中文，故重设 ascii_mode = 0</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">full_shape</span></span><br><span class=\"line\">    <span class=\"attr\">states:</span> [ <span class=\"string\">半角</span>, <span class=\"string\">全角</span> ]   <span class=\"comment\"># 而全／半角则可沿用之前方案的用法。</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">simplification</span></span><br><span class=\"line\">    <span class=\"attr\">reset:</span> <span class=\"number\">1</span>                <span class=\"comment\"># 增加这一行：默认启用「繁→簡」转换。</span></span><br><span class=\"line\">    <span class=\"attr\">states:</span> [ <span class=\"string\">漢字</span>, <span class=\"string\">汉字</span> ]</span><br></pre></td></tr></tbody></table></figure>\n  这里面还包括候选字数，全 / 半角等配置。</li>\n<li>安装输入法模组<br>  要在桌面上使用（包括浏览器，应用等等），还需要安装输入法模组，尽可能的安装完全：  <figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo pacman -S fcitx-gtk2 fcitx-gtk3 fcitx-qt4 fcitx-qt5</span></span><br></pre></td></tr></tbody></table></figure></li>\n<li>添加配置<br>  在 <code>$HOME/.xprofile</code> 中添加如下配置  <figure class=\"highlight text\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export GTK_IM_MODULE=fcitx</span><br><span class=\"line\">export QT_IM_MODULE=fcitx</span><br><span class=\"line\">export XMODIFIERS=@im=fcitx</span><br></pre></td></tr></tbody></table></figure>\n最后重启电脑，既可以使用输入法了，关于快捷键和字体大小，可在 fcitx config GUI 里面配置。至此，输入法基本上就搞定了。</li>\n</ul>\n<h4 id=\"微信\"><a href=\"#微信\" class=\"headerlink\" title=\"微信\"></a>微信</h4><p>日常中微信使用的频率比较高，不可避免的要安装，一般有几种解决方案：</p>\n<ul>\n<li><a href=\"https://github.com/geeeeeeeeek/electronic-wechat\">electronic-wechat</a><br>使用的是微信 web 版，然后用 electronic 封装的，作者似乎以及停更了，安装后体验了下，弃了。</li>\n<li><a href=\"https://github.com/trazyn/weweChat\">weweChat</a><br>界面做得比较好看，和 electronic-wechat 使用同样的原理，没体验过。</li>\n<li><a href=\"https://aur.archlinux.org/packages/deepin-wechat/\">deepin-wechat</a><br>使用 deepin 自己定制的 <a href=\"https://www.winehq.org/\">wine</a>，安装后，不知道为什么我电脑上问题挺多（比如不能贴图），遂弃之。</li>\n</ul>\n<p>体验过这么多之后，最后还是决定使用 wine 版本的，不过是自己进行配置。在 github 上找到一个专门针对国内软件的 wine 脚本 <a href=\"https://github.com/hillwoodroc/winetricks-zh\">winetricks-zh</a>，会自动安装一些依赖，最后尝试下来这个版本体验最好，除了不能截图（当然有替代方案，<a href=\"http://shutter-project.org/\">shutter</a>），其他基本和 Windows 上没太大差别。</p>\n<ul>\n<li>安装 wine 及相关依赖  <figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo pacman -S wine wine-mono wine_gecko</span></span><br></pre></td></tr></tbody></table></figure></li>\n<li>使用 winetricks-zh 安装微信<br>  作者有较长时间未更新了，目前微信官网的微信已更新，会导致文件校验失败，不过只需要把脚本中的 hash 值改一下即可（文件为在 <code>winetricks-zh/verb/wechat.verb</code>），下载官网最新安装包，然后计算 sha256:  <figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">sha256sum</span> WeChatSetup.exe</span></span><br></pre></td></tr></tbody></table></figure>\n  最后将 hash 值替换为此 hash 值即可，后续就会自动安装一些依赖。</li>\n<li>配置<br>  安装完后可以直接打开使用，不过由于屏幕适配以及字体问题，可能会导致乱码，字体小的问题，因此我们还需要修改些配置才能正常使用。<ul>\n<li>字体安<br>  需要将<code>微软雅黑</code>和<code>新宋</code>字体复制到 <code>$HOME/.local/share/fonts</code> 下，并刷新字体缓存：  <figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">fc-cache -fv</span></span><br></pre></td></tr></tbody></table></figure></li>\n<li>修改 <code>$HOME/.wine/system.reg</code><br>  找到 <code>LogPixels</code>，将值修改为 80（根据自己的屏幕调整）</li>\n<li>修改 <code>$HOME/.wine/driver_c/windows/win.ini</code><br>  在文件尾新增：  <figure class=\"highlight text\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Desktop]</span><br><span class=\"line\">menufontsize=13</span><br><span class=\"line\">messagefontsize=13</span><br><span class=\"line\">statusfontsize=13</span><br><span class=\"line\">IconTitleSize=13</span><br></pre></td></tr></tbody></table></figure></li>\n<li>新增 <code>$HOME/.wine/zh.reg</code><br>  在文件中添加以下参数：  <figure class=\"highlight text\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REGEDIT4</span><br><span class=\"line\"></span><br><span class=\"line\">[HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\FontSubstitutes]</span><br><span class=\"line\"></span><br><span class=\"line\">\"Arial\"=\"simsun\"</span><br><span class=\"line\">\"Arial CE,238\"=\"simsun\"</span><br><span class=\"line\">\"Arial CYR,204\"=\"simsun\"</span><br><span class=\"line\">\"Arial Greek,161\"=\"simsun\"</span><br><span class=\"line\">\"Arial TUR,162\"=\"simsun\"</span><br><span class=\"line\">\"Courier New\"=\"simsun\"</span><br><span class=\"line\">\"Courier New CE,238\"=\"simsun\"</span><br><span class=\"line\">\"Courier New CYR,204\"=\"simsun\"</span><br><span class=\"line\">\"Courier New Greek,161\"=\"simsun\"</span><br><span class=\"line\">\"Courier New TUR,162\"=\"simsun\"</span><br><span class=\"line\">\"FixedSys\"=\"simsun\"</span><br><span class=\"line\">\"Helv\"=\"simsun\"</span><br><span class=\"line\">\"Helvetica\"=\"simsun\"</span><br><span class=\"line\">\"MS Sans Serif\"=\"simsun\"</span><br><span class=\"line\">\"MS Shell Dlg\"=\"simsun\"</span><br><span class=\"line\">\"MS Shell Dlg 2\"=\"simsun\"</span><br><span class=\"line\">\"System\"=\"simsun\"</span><br><span class=\"line\">\"Tahoma\"=\"simsun\"</span><br><span class=\"line\">\"Times\"=\"simsun\"</span><br><span class=\"line\">\"Times New Roman CE,238\"=\"simsun\"</span><br><span class=\"line\">\"Times New Roman CYR,204\"=\"simsun\"</span><br><span class=\"line\">\"Times New Roman Greek,161\"=\"simsun\"</span><br><span class=\"line\">\"Times New Roman TUR,162\"=\"simsun\"</span><br><span class=\"line\">\"Tms Rmn\"=\"simsun\"</span><br></pre></td></tr></tbody></table></figure>\n重新打开微信，应该就没什么问题了。关于快捷键问题，Linux 下无法直接使用微信中的快捷键（其实是没有焦点，如果打开微信的设置页面，再使用打开快捷键，发现还是有用的，当然这非常不方便），最后找了个办法，在系统快捷键中，添加一个快捷键来打开微信即可，命令使用 wine 来打开：<figure class=\"highlight text\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">env WINEPREFIX=\"/home/cooler/.wine\" wine \"/home/cooler/.wine/drive_c/Program Files/Tencent/WeChat/WeChat.exe\"</span><br></pre></td></tr></tbody></table></figure>\n这样就可以使用快捷键打开微信，不过不能关闭，只能使用 <code>Esc</code> 来关闭，不过这点小问题不影响使用。至于其他软件，可以参考 <code>winetricks-zh</code>。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"开发软件\"><a href=\"#开发软件\" class=\"headerlink\" title=\"开发软件\"></a>开发软件</h4><p>一般开发软件都有 Linux 版本的，除非是系统特有的软件（如 Windows 的 visual studio 等等），这种就没办法了，只能放弃使用 Linux 了。</p>\n<h4 id=\"截图软件\"><a href=\"#截图软件\" class=\"headerlink\" title=\"截图软件\"></a>截图软件</h4><p>Linux 下首推 <a href=\"http://shutter-project.org/\">shutter</a>，功能已经非常完善了，在系统快捷键中新增一个，命令如下：</p>\n<figure class=\"highlight text\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shutter -s</span><br></pre></td></tr></tbody></table></figure>\n<p>然后配合微信，QQ 等使用，直接粘贴到对话框中即可。</p>\n<h4 id=\"办公软件\"><a href=\"#办公软件\" class=\"headerlink\" title=\"办公软件\"></a>办公软件</h4><p>Windows 下办公软件莫过于 Office 全家桶，但 Linux 下就没这么好的办公软件了，替代品为 <a href=\"https://www.wps.com/\">WPS Office</a> 和 <a href=\"https://www.libreoffice.org/\">Libre Office</a>，wps 用起来比较接近 MS Office，这个看个人喜好选择。</p>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><ul>\n<li>制图软件 <a href=\"https://www.gimp.org/\">GIMP</a></li>\n<li> 思维导图 <a href=\"https://www.xmind.net/\">XMind</a></li>\n<li>PDF 阅读使用自带的 <code>Atril Document Viewer</code> 就可以了</li>\n<li>视频播放软件 <a href=\"https://www.videolan.org/vlc/\">VLC</a>。</li>\n<li>邮件客户端 <a href=\"https://wiki.gnome.org/Apps/Evolution\">Evolution</a></li>\n<li>……</li>\n</ul>\n","site":{"data":{}},"excerpt":"<a href=\"/2018/10/17/work-on-linux-part-one/\" title=\"在Linux下进行开发工作（一）\">在 Linux 下进行开发工作（一）</a>中记录了Manjaro的安装过程以及源设置等等，这一篇主要记录下常用软件的安装等等。Manjaro固然非常的方便，各种开发工具一条命令就可以安装好，但有些Windows常用软件Linux上也没有，有的可以使用Linux上的替代品，不过还是有少许软件不可避免的要使用（如微信，QQ等），这会给我们的工作带来了不少的麻烦，刚从Windows转Linux会有诸多的不习惯，不过都还好，我们总是有各种各样的办法来折腾Linux来适合我们用来做日常的开发桌面。还是那句话，如果没准备好用Linux作为日常开发桌面，千万不要尝试 : )。","more":"<h4 id=\"输入法\"><a href=\"#输入法\" class=\"headerlink\" title=\"输入法\"></a>输入法</h4><p>毕竟日常还是使用中文，中文输入法是必须得安装的，Linux 下的输入框架常用的有 <code>fcitx</code> 和 <code>ibus</code>，我选用的是 <a href=\"https://wiki.archlinux.org/index.php/Fcitx\">fcitx</a>：</p>\n<ul>\n<li>安装 fcitx  <figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo pacman -S fcitx fcitx-configtool</span> </span><br></pre></td></tr></tbody></table></figure></li>\n<li>安装输入法引擎<br>  fcitx 默认自带了中文输入引擎，其他选择就比较多了，（比如国内常用的 sougou 拼音），我选择的是 <a href=\"https://wiki.archlinux.org/index.php/Rime_IME\">Rime</a>，配上一个 <code>fcitx-skin-material</code> 用来非常不错。不过 Rime 默认是繁体输入，如果要改为默认简体，需新增一个自定义配置文件 <code>$HOME/.config/fcitx/rime/   luna_pinyin.custom.yaml</code>：  <figure class=\"highlight yml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">patch:</span></span><br><span class=\"line\"><span class=\"attr\">\"menu/page_size\":</span> <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"attr\">switches:</span>                   <span class=\"comment\"># 注意缩进</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ascii_mode</span></span><br><span class=\"line\">    <span class=\"attr\">reset:</span> <span class=\"number\">0</span>                <span class=\"comment\"># reset 0 的作用是当从其他输入法切换到本输入法重设为指定状态</span></span><br><span class=\"line\">    <span class=\"attr\">states:</span> [ <span class=\"string\">中文</span>, <span class=\"string\">西文</span> ]   <span class=\"comment\"># 选择输入方案后通常需要立即输入中文，故重设 ascii_mode = 0</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">full_shape</span></span><br><span class=\"line\">    <span class=\"attr\">states:</span> [ <span class=\"string\">半角</span>, <span class=\"string\">全角</span> ]   <span class=\"comment\"># 而全／半角则可沿用之前方案的用法。</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">simplification</span></span><br><span class=\"line\">    <span class=\"attr\">reset:</span> <span class=\"number\">1</span>                <span class=\"comment\"># 增加这一行：默认启用「繁→簡」转换。</span></span><br><span class=\"line\">    <span class=\"attr\">states:</span> [ <span class=\"string\">漢字</span>, <span class=\"string\">汉字</span> ]</span><br></pre></td></tr></tbody></table></figure>\n  这里面还包括候选字数，全 / 半角等配置。</li>\n<li>安装输入法模组<br>  要在桌面上使用（包括浏览器，应用等等），还需要安装输入法模组，尽可能的安装完全：  <figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo pacman -S fcitx-gtk2 fcitx-gtk3 fcitx-qt4 fcitx-qt5</span></span><br></pre></td></tr></tbody></table></figure></li>\n<li>添加配置<br>  在 <code>$HOME/.xprofile</code> 中添加如下配置  <figure class=\"highlight text\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export GTK_IM_MODULE=fcitx</span><br><span class=\"line\">export QT_IM_MODULE=fcitx</span><br><span class=\"line\">export XMODIFIERS=@im=fcitx</span><br></pre></td></tr></tbody></table></figure>\n最后重启电脑，既可以使用输入法了，关于快捷键和字体大小，可在 fcitx config GUI 里面配置。至此，输入法基本上就搞定了。</li>\n</ul>\n<h4 id=\"微信\"><a href=\"#微信\" class=\"headerlink\" title=\"微信\"></a>微信</h4><p>日常中微信使用的频率比较高，不可避免的要安装，一般有几种解决方案：</p>\n<ul>\n<li><a href=\"https://github.com/geeeeeeeeek/electronic-wechat\">electronic-wechat</a><br>使用的是微信 web 版，然后用 electronic 封装的，作者似乎以及停更了，安装后体验了下，弃了。</li>\n<li><a href=\"https://github.com/trazyn/weweChat\">weweChat</a><br>界面做得比较好看，和 electronic-wechat 使用同样的原理，没体验过。</li>\n<li><a href=\"https://aur.archlinux.org/packages/deepin-wechat/\">deepin-wechat</a><br>使用 deepin 自己定制的 <a href=\"https://www.winehq.org/\">wine</a>，安装后，不知道为什么我电脑上问题挺多（比如不能贴图），遂弃之。</li>\n</ul>\n<p>体验过这么多之后，最后还是决定使用 wine 版本的，不过是自己进行配置。在 github 上找到一个专门针对国内软件的 wine 脚本 <a href=\"https://github.com/hillwoodroc/winetricks-zh\">winetricks-zh</a>，会自动安装一些依赖，最后尝试下来这个版本体验最好，除了不能截图（当然有替代方案，<a href=\"http://shutter-project.org/\">shutter</a>），其他基本和 Windows 上没太大差别。</p>\n<ul>\n<li>安装 wine 及相关依赖  <figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo pacman -S wine wine-mono wine_gecko</span></span><br></pre></td></tr></tbody></table></figure></li>\n<li>使用 winetricks-zh 安装微信<br>  作者有较长时间未更新了，目前微信官网的微信已更新，会导致文件校验失败，不过只需要把脚本中的 hash 值改一下即可（文件为在 <code>winetricks-zh/verb/wechat.verb</code>），下载官网最新安装包，然后计算 sha256:  <figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">sha256sum</span> WeChatSetup.exe</span></span><br></pre></td></tr></tbody></table></figure>\n  最后将 hash 值替换为此 hash 值即可，后续就会自动安装一些依赖。</li>\n<li>配置<br>  安装完后可以直接打开使用，不过由于屏幕适配以及字体问题，可能会导致乱码，字体小的问题，因此我们还需要修改些配置才能正常使用。<ul>\n<li>字体安<br>  需要将<code>微软雅黑</code>和<code>新宋</code>字体复制到 <code>$HOME/.local/share/fonts</code> 下，并刷新字体缓存：  <figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">fc-cache -fv</span></span><br></pre></td></tr></tbody></table></figure></li>\n<li>修改 <code>$HOME/.wine/system.reg</code><br>  找到 <code>LogPixels</code>，将值修改为 80（根据自己的屏幕调整）</li>\n<li>修改 <code>$HOME/.wine/driver_c/windows/win.ini</code><br>  在文件尾新增：  <figure class=\"highlight text\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Desktop]</span><br><span class=\"line\">menufontsize=13</span><br><span class=\"line\">messagefontsize=13</span><br><span class=\"line\">statusfontsize=13</span><br><span class=\"line\">IconTitleSize=13</span><br></pre></td></tr></tbody></table></figure></li>\n<li>新增 <code>$HOME/.wine/zh.reg</code><br>  在文件中添加以下参数：  <figure class=\"highlight text\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REGEDIT4</span><br><span class=\"line\"></span><br><span class=\"line\">[HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\FontSubstitutes]</span><br><span class=\"line\"></span><br><span class=\"line\">\"Arial\"=\"simsun\"</span><br><span class=\"line\">\"Arial CE,238\"=\"simsun\"</span><br><span class=\"line\">\"Arial CYR,204\"=\"simsun\"</span><br><span class=\"line\">\"Arial Greek,161\"=\"simsun\"</span><br><span class=\"line\">\"Arial TUR,162\"=\"simsun\"</span><br><span class=\"line\">\"Courier New\"=\"simsun\"</span><br><span class=\"line\">\"Courier New CE,238\"=\"simsun\"</span><br><span class=\"line\">\"Courier New CYR,204\"=\"simsun\"</span><br><span class=\"line\">\"Courier New Greek,161\"=\"simsun\"</span><br><span class=\"line\">\"Courier New TUR,162\"=\"simsun\"</span><br><span class=\"line\">\"FixedSys\"=\"simsun\"</span><br><span class=\"line\">\"Helv\"=\"simsun\"</span><br><span class=\"line\">\"Helvetica\"=\"simsun\"</span><br><span class=\"line\">\"MS Sans Serif\"=\"simsun\"</span><br><span class=\"line\">\"MS Shell Dlg\"=\"simsun\"</span><br><span class=\"line\">\"MS Shell Dlg 2\"=\"simsun\"</span><br><span class=\"line\">\"System\"=\"simsun\"</span><br><span class=\"line\">\"Tahoma\"=\"simsun\"</span><br><span class=\"line\">\"Times\"=\"simsun\"</span><br><span class=\"line\">\"Times New Roman CE,238\"=\"simsun\"</span><br><span class=\"line\">\"Times New Roman CYR,204\"=\"simsun\"</span><br><span class=\"line\">\"Times New Roman Greek,161\"=\"simsun\"</span><br><span class=\"line\">\"Times New Roman TUR,162\"=\"simsun\"</span><br><span class=\"line\">\"Tms Rmn\"=\"simsun\"</span><br></pre></td></tr></tbody></table></figure>\n重新打开微信，应该就没什么问题了。关于快捷键问题，Linux 下无法直接使用微信中的快捷键（其实是没有焦点，如果打开微信的设置页面，再使用打开快捷键，发现还是有用的，当然这非常不方便），最后找了个办法，在系统快捷键中，添加一个快捷键来打开微信即可，命令使用 wine 来打开：<figure class=\"highlight text\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">env WINEPREFIX=\"/home/cooler/.wine\" wine \"/home/cooler/.wine/drive_c/Program Files/Tencent/WeChat/WeChat.exe\"</span><br></pre></td></tr></tbody></table></figure>\n这样就可以使用快捷键打开微信，不过不能关闭，只能使用 <code>Esc</code> 来关闭，不过这点小问题不影响使用。至于其他软件，可以参考 <code>winetricks-zh</code>。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"开发软件\"><a href=\"#开发软件\" class=\"headerlink\" title=\"开发软件\"></a>开发软件</h4><p>一般开发软件都有 Linux 版本的，除非是系统特有的软件（如 Windows 的 visual studio 等等），这种就没办法了，只能放弃使用 Linux 了。</p>\n<h4 id=\"截图软件\"><a href=\"#截图软件\" class=\"headerlink\" title=\"截图软件\"></a>截图软件</h4><p>Linux 下首推 <a href=\"http://shutter-project.org/\">shutter</a>，功能已经非常完善了，在系统快捷键中新增一个，命令如下：</p>\n<figure class=\"highlight text\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shutter -s</span><br></pre></td></tr></tbody></table></figure>\n<p>然后配合微信，QQ 等使用，直接粘贴到对话框中即可。</p>\n<h4 id=\"办公软件\"><a href=\"#办公软件\" class=\"headerlink\" title=\"办公软件\"></a>办公软件</h4><p>Windows 下办公软件莫过于 Office 全家桶，但 Linux 下就没这么好的办公软件了，替代品为 <a href=\"https://www.wps.com/\">WPS Office</a> 和 <a href=\"https://www.libreoffice.org/\">Libre Office</a>，wps 用起来比较接近 MS Office，这个看个人喜好选择。</p>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><ul>\n<li>制图软件 <a href=\"https://www.gimp.org/\">GIMP</a></li>\n<li> 思维导图 <a href=\"https://www.xmind.net/\">XMind</a></li>\n<li>PDF 阅读使用自带的 <code>Atril Document Viewer</code> 就可以了</li>\n<li>视频播放软件 <a href=\"https://www.videolan.org/vlc/\">VLC</a>。</li>\n<li>邮件客户端 <a href=\"https://wiki.gnome.org/Apps/Evolution\">Evolution</a></li>\n<li>……</li>\n</ul>"},{"title":"在 Linux 下进行开发工作（一）","date":"2018-10-17T09:47:03.000Z","_content":"\n之前在做嵌入式开发时，经常会使用到Linux，但都是使用的虚拟机来安装Linux，然后在Windows上通过ssh连接，使用的命令行方式，并未使用Linux当桌面。后来做Android开发后，基本是在Windows下进行开发工作的，部分Linux下的命令工具可以通过[mingw][1]来使用，但终究还是不如直接在Linux下来得方便。年中的时候，入手了一台新本，开始折腾起来Linux，选择的是[Manjaro][2]发行版的Mate Desktop，几个桌面版本尝试后，最终选择了Mate。Manjaro是[Arch Linux][3]衍生版，但是简化了安装过程，几乎是一键安装，省去了Arch Linux的繁琐配置，但却拥有Arch Linux同样丰富的软件库。折腾过程中遇到不少问题，都通过各种google解决了，如果没准备好用Linux作为日常开发桌面，千万不要尝试 : )。\n<!-- more -->\n\n\n#### 安装Manjaro\n在[Manjaro官网][2]找自己比较喜欢的桌面下载镜像文件，准备一个空的U盘（后面会被格式化），Windows下使用[rufus][4]来创建USB启动盘。将镜像文件烧写到U盘（注意：rufus中需选择DD模式），电脑上选择U盘启动，就会进入到Manjaro的安装界面，选择对应的语言，驱动等等，然后启动可以进入到Manjaro系统进行体验，直接进入安装步骤，都是些个性化设置。在分区的时候需要注意，选择手动分区，如果想要安装双系统，需要找到Windows的`efi`分区（一般是一个100M的FAT32分区），然后挂载`/boot/efi`（不要选择格式化），其他分区按需分配即可。我的分区结构：\n* `/`分区（必须有此分区） --- 50G\n* `/boot`分区 --- 512M\n* `/var`分区（pacman会缓存安装包） --- 30G\n* `/swap`分区 --- 4G\n* `/home`分区 --- 余下的所有空间\n最后到安装等待界面，待安装完成重新启动应该会有个GRUB bootloader了。但我的电脑死活没看到grub，最后看到[官网安装教程][5]才知道，有些电脑装双系统后，GRUB会显示不出来，解决方案就是安装[rEFInd][6]，这步操作需要重启电脑，通过USB启动，这里会显示出刚刚安装的系统（不要选择安装在U盘的那个系统，其实就是通过U盘来做引导），选择进入，然后在Terminal中安装rEFInd：\n```shell\n$ sudo pacman -S refind-efi\n```\n安装完后重启，这次就看到rEFInd界面了，在这里可以选择启动Windows或者Manjaro。\n\n#### 更新系统\n首次进入系统，第一件事情就是更新系统，首先我们需要做的是设置国内的镜像源，这样下载的速度会快些。\n* 配置镜像源\n    ```\n    $ sudo pacman-mirrors -i -c China -m rank\n    ```\n    这条命令会获取中国的镜像源并进行排序，最后生成一个镜像列表，然后选择需要的源地址。\n* 设置archlinux源\n    打开`/etc/pacman.conf`，并添加一下内容\n    ```text\n    [archlinuxcn]\n    SigLevel = Optional TrustedOnly\n    Server = http://repo.archlinuxcn.org/$arch\n    ```\n    然后根据上面的配置，生成一个新的`mirrolist`：\n    ```shell\n    $ sudo pacman-mirrors -g\n    ```\n* 更新\n    镜像里面设置完成后，就进行系统的全面升级:\n    ```shell\n    $ sudo pacman -Syyu\n    ```\n    由于使用了archlinuxcn的镜像，还需要安装`archlinuxcn-keyring`，才能安装镜像上的软件：\n    ```shell\n    $ sudo pacman -S archlinuxcn-keyring\n    ```\n平时使用中还会安装一些非官方软件（也就是AUR包），这需要安装一个额外的工具，一般安装的`yaourt`，当然还有其他很多[AUR工具][7]，可以根据喜好自行选择。如果不习惯使用命令行安装，也可以使用pacman的GUI，在首选项中可以设置打开AUR，然后搜索时候选择AUR即可安装相应的AUR包。\n\n\n[1]: http://www.mingw.org/\n[2]: https://manjaro.org/get-manjaro/\n[3]: https://www.archlinux.org/\n[4]: http://rufus.ie/\n[5]: https://wiki.manjaro.org/index.php?title=UEFI_-_Install_Guide\n[6]: http://www.rodsbooks.com/refind/index.html\n[7]: https://wiki.archlinux.org/index.php/AUR_helpers","source":"_posts/2018-10-17-work-on-linux-part-one.md","raw":"---\ntitle: 在Linux下进行开发工作（一）\ndate: 2018-10-17 17:47:03\ncategories: misc\ntags: linux\n---\n\n之前在做嵌入式开发时，经常会使用到Linux，但都是使用的虚拟机来安装Linux，然后在Windows上通过ssh连接，使用的命令行方式，并未使用Linux当桌面。后来做Android开发后，基本是在Windows下进行开发工作的，部分Linux下的命令工具可以通过[mingw][1]来使用，但终究还是不如直接在Linux下来得方便。年中的时候，入手了一台新本，开始折腾起来Linux，选择的是[Manjaro][2]发行版的Mate Desktop，几个桌面版本尝试后，最终选择了Mate。Manjaro是[Arch Linux][3]衍生版，但是简化了安装过程，几乎是一键安装，省去了Arch Linux的繁琐配置，但却拥有Arch Linux同样丰富的软件库。折腾过程中遇到不少问题，都通过各种google解决了，如果没准备好用Linux作为日常开发桌面，千万不要尝试 : )。\n<!-- more -->\n\n\n#### 安装Manjaro\n在[Manjaro官网][2]找自己比较喜欢的桌面下载镜像文件，准备一个空的U盘（后面会被格式化），Windows下使用[rufus][4]来创建USB启动盘。将镜像文件烧写到U盘（注意：rufus中需选择DD模式），电脑上选择U盘启动，就会进入到Manjaro的安装界面，选择对应的语言，驱动等等，然后启动可以进入到Manjaro系统进行体验，直接进入安装步骤，都是些个性化设置。在分区的时候需要注意，选择手动分区，如果想要安装双系统，需要找到Windows的`efi`分区（一般是一个100M的FAT32分区），然后挂载`/boot/efi`（不要选择格式化），其他分区按需分配即可。我的分区结构：\n* `/`分区（必须有此分区） --- 50G\n* `/boot`分区 --- 512M\n* `/var`分区（pacman会缓存安装包） --- 30G\n* `/swap`分区 --- 4G\n* `/home`分区 --- 余下的所有空间\n最后到安装等待界面，待安装完成重新启动应该会有个GRUB bootloader了。但我的电脑死活没看到grub，最后看到[官网安装教程][5]才知道，有些电脑装双系统后，GRUB会显示不出来，解决方案就是安装[rEFInd][6]，这步操作需要重启电脑，通过USB启动，这里会显示出刚刚安装的系统（不要选择安装在U盘的那个系统，其实就是通过U盘来做引导），选择进入，然后在Terminal中安装rEFInd：\n```shell\n$ sudo pacman -S refind-efi\n```\n安装完后重启，这次就看到rEFInd界面了，在这里可以选择启动Windows或者Manjaro。\n\n#### 更新系统\n首次进入系统，第一件事情就是更新系统，首先我们需要做的是设置国内的镜像源，这样下载的速度会快些。\n* 配置镜像源\n    ```\n    $ sudo pacman-mirrors -i -c China -m rank\n    ```\n    这条命令会获取中国的镜像源并进行排序，最后生成一个镜像列表，然后选择需要的源地址。\n* 设置archlinux源\n    打开`/etc/pacman.conf`，并添加一下内容\n    ```text\n    [archlinuxcn]\n    SigLevel = Optional TrustedOnly\n    Server = http://repo.archlinuxcn.org/$arch\n    ```\n    然后根据上面的配置，生成一个新的`mirrolist`：\n    ```shell\n    $ sudo pacman-mirrors -g\n    ```\n* 更新\n    镜像里面设置完成后，就进行系统的全面升级:\n    ```shell\n    $ sudo pacman -Syyu\n    ```\n    由于使用了archlinuxcn的镜像，还需要安装`archlinuxcn-keyring`，才能安装镜像上的软件：\n    ```shell\n    $ sudo pacman -S archlinuxcn-keyring\n    ```\n平时使用中还会安装一些非官方软件（也就是AUR包），这需要安装一个额外的工具，一般安装的`yaourt`，当然还有其他很多[AUR工具][7]，可以根据喜好自行选择。如果不习惯使用命令行安装，也可以使用pacman的GUI，在首选项中可以设置打开AUR，然后搜索时候选择AUR即可安装相应的AUR包。\n\n\n[1]: http://www.mingw.org/\n[2]: https://manjaro.org/get-manjaro/\n[3]: https://www.archlinux.org/\n[4]: http://rufus.ie/\n[5]: https://wiki.manjaro.org/index.php?title=UEFI_-_Install_Guide\n[6]: http://www.rodsbooks.com/refind/index.html\n[7]: https://wiki.archlinux.org/index.php/AUR_helpers","slug":"work-on-linux-part-one","published":1,"updated":"2023-05-23T05:58:45.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli00ivm40025z0in2c1hcktg","content":"<p>之前在做嵌入式开发时，经常会使用到 Linux，但都是使用的虚拟机来安装 Linux，然后在 Windows 上通过 ssh 连接，使用的命令行方式，并未使用 Linux 当桌面。后来做 Android 开发后，基本是在 Windows 下进行开发工作的，部分 Linux 下的命令工具可以通过 <a href=\"http://www.mingw.org/\">mingw</a> 来使用，但终究还是不如直接在 Linux 下来得方便。年中的时候，入手了一台新本，开始折腾起来 Linux，选择的是 <a href=\"https://manjaro.org/get-manjaro/\">Manjaro</a> 发行版的 Mate Desktop，几个桌面版本尝试后，最终选择了 Mate。Manjaro 是 <a href=\"https://www.archlinux.org/\">Arch Linux</a> 衍生版，但是简化了安装过程，几乎是一键安装，省去了 Arch Linux 的繁琐配置，但却拥有 Arch Linux 同样丰富的软件库。折腾过程中遇到不少问题，都通过各种 google 解决了，如果没准备好用 Linux 作为日常开发桌面，千万不要尝试 : )。</p>\n<span id=\"more\"></span>\n\n\n<h4 id=\"安装Manjaro\"><a href=\"#安装Manjaro\" class=\"headerlink\" title=\"安装Manjaro\"></a>安装 Manjaro</h4><p>在 <a href=\"https://manjaro.org/get-manjaro/\">Manjaro 官网</a>找自己比较喜欢的桌面下载镜像文件，准备一个空的 U 盘（后面会被格式化），Windows 下使用 <a href=\"http://rufus.ie/\">rufus</a> 来创建 USB 启动盘。将镜像文件烧写到 U 盘（注意：rufus 中需选择 DD 模式），电脑上选择 U 盘启动，就会进入到 Manjaro 的安装界面，选择对应的语言，驱动等等，然后启动可以进入到 Manjaro 系统进行体验，直接进入安装步骤，都是些个性化设置。在分区的时候需要注意，选择手动分区，如果想要安装双系统，需要找到 Windows 的 <code>efi</code> 分区（一般是一个 100M 的 FAT32 分区），然后挂载 <code>/boot/efi</code>（不要选择格式化），其他分区按需分配即可。我的分区结构：</p>\n<ul>\n<li><code>/</code> 分区（必须有此分区） — 50G</li>\n<li><code>/boot</code> 分区 — 512M</li>\n<li><code>/var</code> 分区（pacman 会缓存安装包） — 30G</li>\n<li><code>/swap</code> 分区 — 4G</li>\n<li><code>/home</code> 分区 — 余下的所有空间<br>最后到安装等待界面，待安装完成重新启动应该会有个 GRUB bootloader 了。但我的电脑死活没看到 grub，最后看到<a href=\"https://wiki.manjaro.org/index.php?title=UEFI_-_Install_Guide\">官网安装教程</a>才知道，有些电脑装双系统后，GRUB 会显示不出来，解决方案就是安装 <a href=\"http://www.rodsbooks.com/refind/index.html\">rEFInd</a>，这步操作需要重启电脑，通过 USB 启动，这里会显示出刚刚安装的系统（不要选择安装在 U 盘的那个系统，其实就是通过 U 盘来做引导），选择进入，然后在 Terminal 中安装 rEFInd：<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo pacman -S refind-efi</span></span><br></pre></td></tr></tbody></table></figure>\n安装完后重启，这次就看到 rEFInd 界面了，在这里可以选择启动 Windows 或者 Manjaro。</li>\n</ul>\n<h4 id=\"更新系统\"><a href=\"#更新系统\" class=\"headerlink\" title=\"更新系统\"></a>更新系统</h4><p>首次进入系统，第一件事情就是更新系统，首先我们需要做的是设置国内的镜像源，这样下载的速度会快些。</p>\n<ul>\n<li>配置镜像源  <figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman-mirrors -i -c China -m rank</span><br></pre></td></tr></tbody></table></figure>\n  这条命令会获取中国的镜像源并进行排序，最后生成一个镜像列表，然后选择需要的源地址。</li>\n<li>设置 archlinux 源<br>  打开 <code>/etc/pacman.conf</code>，并添加一下内容  <figure class=\"highlight text\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[archlinuxcn]</span><br><span class=\"line\">SigLevel = Optional TrustedOnly</span><br><span class=\"line\">Server = http://repo.archlinuxcn.org/$arch</span><br></pre></td></tr></tbody></table></figure>\n  然后根据上面的配置，生成一个新的 <code>mirrolist</code>：  <figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo pacman-mirrors -g</span></span><br></pre></td></tr></tbody></table></figure></li>\n<li>更新<br>  镜像里面设置完成后，就进行系统的全面升级:  <figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo pacman -Syyu</span></span><br></pre></td></tr></tbody></table></figure>\n  由于使用了 archlinuxcn 的镜像，还需要安装 <code>archlinuxcn-keyring</code>，才能安装镜像上的软件：  <figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo pacman -S archlinuxcn-keyring</span></span><br></pre></td></tr></tbody></table></figure>\n平时使用中还会安装一些非官方软件（也就是 AUR 包），这需要安装一个额外的工具，一般安装的 <code>yaourt</code>，当然还有其他很多 <a href=\"https://wiki.archlinux.org/index.php/AUR_helpers\">AUR 工具</a>，可以根据喜好自行选择。如果不习惯使用命令行安装，也可以使用 pacman 的 GUI，在首选项中可以设置打开 AUR，然后搜索时候选择 AUR 即可安装相应的 AUR 包。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>之前在做嵌入式开发时，经常会使用到 Linux，但都是使用的虚拟机来安装 Linux，然后在 Windows 上通过 ssh 连接，使用的命令行方式，并未使用 Linux 当桌面。后来做 Android 开发后，基本是在 Windows 下进行开发工作的，部分 Linux 下的命令工具可以通过 <a href=\"http://www.mingw.org/\">mingw</a> 来使用，但终究还是不如直接在 Linux 下来得方便。年中的时候，入手了一台新本，开始折腾起来 Linux，选择的是 <a href=\"https://manjaro.org/get-manjaro/\">Manjaro</a> 发行版的 Mate Desktop，几个桌面版本尝试后，最终选择了 Mate。Manjaro 是 <a href=\"https://www.archlinux.org/\">Arch Linux</a> 衍生版，但是简化了安装过程，几乎是一键安装，省去了 Arch Linux 的繁琐配置，但却拥有 Arch Linux 同样丰富的软件库。折腾过程中遇到不少问题，都通过各种 google 解决了，如果没准备好用 Linux 作为日常开发桌面，千万不要尝试 : )。</p>","more":"<h4 id=\"安装Manjaro\"><a href=\"#安装Manjaro\" class=\"headerlink\" title=\"安装Manjaro\"></a>安装 Manjaro</h4><p>在 <a href=\"https://manjaro.org/get-manjaro/\">Manjaro 官网</a>找自己比较喜欢的桌面下载镜像文件，准备一个空的 U 盘（后面会被格式化），Windows 下使用 <a href=\"http://rufus.ie/\">rufus</a> 来创建 USB 启动盘。将镜像文件烧写到 U 盘（注意：rufus 中需选择 DD 模式），电脑上选择 U 盘启动，就会进入到 Manjaro 的安装界面，选择对应的语言，驱动等等，然后启动可以进入到 Manjaro 系统进行体验，直接进入安装步骤，都是些个性化设置。在分区的时候需要注意，选择手动分区，如果想要安装双系统，需要找到 Windows 的 <code>efi</code> 分区（一般是一个 100M 的 FAT32 分区），然后挂载 <code>/boot/efi</code>（不要选择格式化），其他分区按需分配即可。我的分区结构：</p>\n<ul>\n<li><code>/</code> 分区（必须有此分区） — 50G</li>\n<li><code>/boot</code> 分区 — 512M</li>\n<li><code>/var</code> 分区（pacman 会缓存安装包） — 30G</li>\n<li><code>/swap</code> 分区 — 4G</li>\n<li><code>/home</code> 分区 — 余下的所有空间<br>最后到安装等待界面，待安装完成重新启动应该会有个 GRUB bootloader 了。但我的电脑死活没看到 grub，最后看到<a href=\"https://wiki.manjaro.org/index.php?title=UEFI_-_Install_Guide\">官网安装教程</a>才知道，有些电脑装双系统后，GRUB 会显示不出来，解决方案就是安装 <a href=\"http://www.rodsbooks.com/refind/index.html\">rEFInd</a>，这步操作需要重启电脑，通过 USB 启动，这里会显示出刚刚安装的系统（不要选择安装在 U 盘的那个系统，其实就是通过 U 盘来做引导），选择进入，然后在 Terminal 中安装 rEFInd：<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo pacman -S refind-efi</span></span><br></pre></td></tr></tbody></table></figure>\n安装完后重启，这次就看到 rEFInd 界面了，在这里可以选择启动 Windows 或者 Manjaro。</li>\n</ul>\n<h4 id=\"更新系统\"><a href=\"#更新系统\" class=\"headerlink\" title=\"更新系统\"></a>更新系统</h4><p>首次进入系统，第一件事情就是更新系统，首先我们需要做的是设置国内的镜像源，这样下载的速度会快些。</p>\n<ul>\n<li>配置镜像源  <figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman-mirrors -i -c China -m rank</span><br></pre></td></tr></tbody></table></figure>\n  这条命令会获取中国的镜像源并进行排序，最后生成一个镜像列表，然后选择需要的源地址。</li>\n<li>设置 archlinux 源<br>  打开 <code>/etc/pacman.conf</code>，并添加一下内容  <figure class=\"highlight text\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[archlinuxcn]</span><br><span class=\"line\">SigLevel = Optional TrustedOnly</span><br><span class=\"line\">Server = http://repo.archlinuxcn.org/$arch</span><br></pre></td></tr></tbody></table></figure>\n  然后根据上面的配置，生成一个新的 <code>mirrolist</code>：  <figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo pacman-mirrors -g</span></span><br></pre></td></tr></tbody></table></figure></li>\n<li>更新<br>  镜像里面设置完成后，就进行系统的全面升级:  <figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo pacman -Syyu</span></span><br></pre></td></tr></tbody></table></figure>\n  由于使用了 archlinuxcn 的镜像，还需要安装 <code>archlinuxcn-keyring</code>，才能安装镜像上的软件：  <figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo pacman -S archlinuxcn-keyring</span></span><br></pre></td></tr></tbody></table></figure>\n平时使用中还会安装一些非官方软件（也就是 AUR 包），这需要安装一个额外的工具，一般安装的 <code>yaourt</code>，当然还有其他很多 <a href=\"https://wiki.archlinux.org/index.php/AUR_helpers\">AUR 工具</a>，可以根据喜好自行选择。如果不习惯使用命令行安装，也可以使用 pacman 的 GUI，在首选项中可以设置打开 AUR，然后搜索时候选择 AUR 即可安装相应的 AUR 包。</li>\n</ul>"},{"title":"迁移评论系统 disqus 到 colina","date":"2019-02-19T08:45:50.000Z","_content":"\n自从迁移至Hexo后，就开始折腾评论系统，现目前有比较多的评论系统，如`disqus`、`来必力`、`gitment`等等， 经过一番比较，选择了老牌的评论系统`disqus`，用起来还是非常不错的。但是用了一段时间，由于disqus需要科学上网才能使用，对于国内的用户不太友好，于是乎开始寻找其他的解决方案，找到了一些可以自己搭建的博客系统，发现多多少少不能满足需求，最终还是决定自己来造个轮子，方便自己管理评论系统，又可以保证数据不丢失。于是利用空闲时间，花了些时间折腾出了[colina][1]，一款轻量、简单易用、支持Markdown的评论系统。\n\n<!-- more -->\n\n#### 部署Colina\n现目前colina的主要功能已开发完成，但还有不少细节未完善，暂时只提供了`docker`的部署方式，后续将逐步完善。\n```shell\n$ docker pull coolerfall/colina:latest\n```\n使用`docker compose`来编排，方便启动/关闭：\n```yml\nversion: 3\n\nservices:\n  colina:\n    restart: always\n    image: coolerfall/colina:latest\n    depends_on:\n      - db\n    environment:\n      - COLINA_URL=http://localhost:3000\n      - COLINA_DSN=postgres://colina:colinapass@db/colina?sslmode=disable\n      - COLINA_DATA_DIR=/data\n    ports:\n      - 3000:3000\n    volumes:\n      - /home/colina:/data\n  db:\n    restart: always\n    image: postgres:11-alpine\n    environment:\n      - POSTGRES_USER=colina\n      - POSTGRES_PASSWORD=colinapass\n      - POSTGRES_INITDB_ARGS=\"--encoding=UTF8\"\n    volumes:\n      - /home/colina/db:/var/lib/postgresql/data\n```\n然后使用`docker-compose`命令启动起来即可：\n```shell\n$ docker-compose -f docker-compose.yml up -d \n```\n在浏览器中打开`http://localhost:3000`，显示管理登录页面即表示运行正常，根据提示配置后台相应参数。\n\n#### 在hexo中接入Colina（以[next][2]主题为例）\n* 在管理页面新增一个站点，获取到 `site id`。 -->\n\n* 在`themes/next/layout/_third-party`中新增`colina.swig`文件，并添加以下内容：\n```swig\n  {% if theme.colina.enable %}\n  <link rel=\"stylesheet\" href=\"{{ theme.colina.url }}/embed/colina.min.css\">\n\n  {% if theme.disqus.count %}\n    <script type=\"text/javascript\">\n      var colinaConfig = {\n        siteId: \"{{ theme.colina.site_id }}\",\n        apiUrl: \"{{ theme.colina.url }}\",\n        lang: \"{{ theme.colina.language }}\" || navigator.language || \n          navigator.systemLanguage || navigator.userLanguage\n      };\n      (function() {\n          var d = document, s = d.createElement(\"script\");\n          s.src = \"{{ theme.colina.url }}/embed/counter.min.js\";\n          (d.head || d.body).appendChild(s);\n        })();\n    </script>\n  {% endif %}\n\n  {% if page.comments %}\n    <script type=\"text/javascript\">\n      var colinaConfig = {\n        identifier: \"{{ page.path }}\",\n        siteId: \"{{ theme.colina.site_id }}\",\n        apiUrl: \"{{ theme.colina.url }}\",\n        title: \"{{ page.title| addslashes }}\",\n        lang: \"{{ theme.colina.language }}\" || navigator.language || \n          navigator.systemLanguage || navigator.userLanguage\n      };\n      function loadComments() {\n        (function() {\n          var d = document, s = d.createElement(\"script\");\n          s.src = \"{{ theme.colina.url }}/embed/colina.min.js\";\n          (d.head || d.body).appendChild(s);\n        })();\n      }\n\n      {% if theme.colina.lazyload %}\n        $(function () {\n          var offsetTop = $('#comments').offset().top - $(window).height();\n          if (offsetTop <= 0) {\n            // load directly when there's no a scrollbar\n            loadComments();\n          } else {\n            $(window).on('scroll.colina_scroll', function () {\n              // offsetTop may changes because of manually resizing browser window or lazy loading images.\n              var offsetTop = $('#comments').offset().top - $(window).height();\n              var scrollTop = $(window).scrollTop();\n\n              // pre-load comments a bit? (margin or anything else)\n              if (offsetTop - scrollTop < 60) {\n                $(window).off('.colina_scroll');\n                loadComments();\n              }\n            });\n          }\n        });\n      {% else %}\n        loadComments();\n      {% endif %}\n    </script>\n  {% endif %}\n\n{% endif %}\n```\n\n* 在同目录下的`index.swig`中追加：\n```swig\n{% include 'colina.swig' %}\n```\n\n* 在`themes/next/layout/_partials/comments.swig`中追加以下内容，用于渲染评论内容：\n```swig\n{% elseif theme.colina.enable %}\n    <div class=\"comments\" id=\"comments\">\n      <div id=\"colina-comments\">\n        <noscript>\n          Please enable JavaScript to view comments powered by Colina.\n        </noscript>\n      </div>\n    </div>\n```\n\n* 在`themes/next/layout/_macro/post.swig`中添加以下内容，用于展示评论条数：\n```swig\n  {% if post.comments %}\n  ...\n  ...\n\n    {% elseif theme.colina.enable and theme.colina.count %}\n      <span class=\"post-comments-count\">\n        <span class=\"post-meta-divider\">|</span>\n        <span class=\"post-meta-item-icon\">\n          <i class=\"fa fa-comment-o\"></i>\n        </span>\n        <a href=\"{{ url_for(post.path) }}#comments\" itemprop=\"discussionUrl\">\n          <span class=\"post-meta-item-text\">{{ __('post.comments_count') + __('symbol.colon') }}</span>\n          <span class=\"post-comments-count colina-comment-count\"\n                  data-colina-identifier=\"{{ post.path }}\" itemprop=\"commentCount\"></span>\n        </a>\n      </span>\n```\n\n* 在`themes/next/_config.yml`中添加配置项：\n```yml\ncolina:\n  enable: true\n  site_id: your site id\n  url: http://localhost:3000\n  count: true\n  lazyload: false\n  language:\n```\n\n* 最后运行hexo即可看到显示效果\n\n[1]: https://hub.docker.com/r/coolerfall/colina\n[2]: https://github.com/theme-next/hexo-theme-next\n","source":"_posts/2019-02-19-migrate-disqus-to-colina.md","raw":"---\ntitle: 迁移评论系统disqus到colina\ndate: 2019-02-19 16:45:50\ncategory: misc\ntags: [colina, comment]\n---\n\n自从迁移至Hexo后，就开始折腾评论系统，现目前有比较多的评论系统，如`disqus`、`来必力`、`gitment`等等， 经过一番比较，选择了老牌的评论系统`disqus`，用起来还是非常不错的。但是用了一段时间，由于disqus需要科学上网才能使用，对于国内的用户不太友好，于是乎开始寻找其他的解决方案，找到了一些可以自己搭建的博客系统，发现多多少少不能满足需求，最终还是决定自己来造个轮子，方便自己管理评论系统，又可以保证数据不丢失。于是利用空闲时间，花了些时间折腾出了[colina][1]，一款轻量、简单易用、支持Markdown的评论系统。\n\n<!-- more -->\n\n#### 部署Colina\n现目前colina的主要功能已开发完成，但还有不少细节未完善，暂时只提供了`docker`的部署方式，后续将逐步完善。\n```shell\n$ docker pull coolerfall/colina:latest\n```\n使用`docker compose`来编排，方便启动/关闭：\n```yml\nversion: 3\n\nservices:\n  colina:\n    restart: always\n    image: coolerfall/colina:latest\n    depends_on:\n      - db\n    environment:\n      - COLINA_URL=http://localhost:3000\n      - COLINA_DSN=postgres://colina:colinapass@db/colina?sslmode=disable\n      - COLINA_DATA_DIR=/data\n    ports:\n      - 3000:3000\n    volumes:\n      - /home/colina:/data\n  db:\n    restart: always\n    image: postgres:11-alpine\n    environment:\n      - POSTGRES_USER=colina\n      - POSTGRES_PASSWORD=colinapass\n      - POSTGRES_INITDB_ARGS=\"--encoding=UTF8\"\n    volumes:\n      - /home/colina/db:/var/lib/postgresql/data\n```\n然后使用`docker-compose`命令启动起来即可：\n```shell\n$ docker-compose -f docker-compose.yml up -d \n```\n在浏览器中打开`http://localhost:3000`，显示管理登录页面即表示运行正常，根据提示配置后台相应参数。\n\n#### 在hexo中接入Colina（以[next][2]主题为例）\n* 在管理页面新增一个站点，获取到 `site id`。 -->\n\n* 在`themes/next/layout/_third-party`中新增`colina.swig`文件，并添加以下内容：\n```swig\n  {% if theme.colina.enable %}\n  <link rel=\"stylesheet\" href=\"{{ theme.colina.url }}/embed/colina.min.css\">\n\n  {% if theme.disqus.count %}\n    <script type=\"text/javascript\">\n      var colinaConfig = {\n        siteId: \"{{ theme.colina.site_id }}\",\n        apiUrl: \"{{ theme.colina.url }}\",\n        lang: \"{{ theme.colina.language }}\" || navigator.language || \n          navigator.systemLanguage || navigator.userLanguage\n      };\n      (function() {\n          var d = document, s = d.createElement(\"script\");\n          s.src = \"{{ theme.colina.url }}/embed/counter.min.js\";\n          (d.head || d.body).appendChild(s);\n        })();\n    </script>\n  {% endif %}\n\n  {% if page.comments %}\n    <script type=\"text/javascript\">\n      var colinaConfig = {\n        identifier: \"{{ page.path }}\",\n        siteId: \"{{ theme.colina.site_id }}\",\n        apiUrl: \"{{ theme.colina.url }}\",\n        title: \"{{ page.title| addslashes }}\",\n        lang: \"{{ theme.colina.language }}\" || navigator.language || \n          navigator.systemLanguage || navigator.userLanguage\n      };\n      function loadComments() {\n        (function() {\n          var d = document, s = d.createElement(\"script\");\n          s.src = \"{{ theme.colina.url }}/embed/colina.min.js\";\n          (d.head || d.body).appendChild(s);\n        })();\n      }\n\n      {% if theme.colina.lazyload %}\n        $(function () {\n          var offsetTop = $('#comments').offset().top - $(window).height();\n          if (offsetTop <= 0) {\n            // load directly when there's no a scrollbar\n            loadComments();\n          } else {\n            $(window).on('scroll.colina_scroll', function () {\n              // offsetTop may changes because of manually resizing browser window or lazy loading images.\n              var offsetTop = $('#comments').offset().top - $(window).height();\n              var scrollTop = $(window).scrollTop();\n\n              // pre-load comments a bit? (margin or anything else)\n              if (offsetTop - scrollTop < 60) {\n                $(window).off('.colina_scroll');\n                loadComments();\n              }\n            });\n          }\n        });\n      {% else %}\n        loadComments();\n      {% endif %}\n    </script>\n  {% endif %}\n\n{% endif %}\n```\n\n* 在同目录下的`index.swig`中追加：\n```swig\n{% include 'colina.swig' %}\n```\n\n* 在`themes/next/layout/_partials/comments.swig`中追加以下内容，用于渲染评论内容：\n```swig\n{% elseif theme.colina.enable %}\n    <div class=\"comments\" id=\"comments\">\n      <div id=\"colina-comments\">\n        <noscript>\n          Please enable JavaScript to view comments powered by Colina.\n        </noscript>\n      </div>\n    </div>\n```\n\n* 在`themes/next/layout/_macro/post.swig`中添加以下内容，用于展示评论条数：\n```swig\n  {% if post.comments %}\n  ...\n  ...\n\n    {% elseif theme.colina.enable and theme.colina.count %}\n      <span class=\"post-comments-count\">\n        <span class=\"post-meta-divider\">|</span>\n        <span class=\"post-meta-item-icon\">\n          <i class=\"fa fa-comment-o\"></i>\n        </span>\n        <a href=\"{{ url_for(post.path) }}#comments\" itemprop=\"discussionUrl\">\n          <span class=\"post-meta-item-text\">{{ __('post.comments_count') + __('symbol.colon') }}</span>\n          <span class=\"post-comments-count colina-comment-count\"\n                  data-colina-identifier=\"{{ post.path }}\" itemprop=\"commentCount\"></span>\n        </a>\n      </span>\n```\n\n* 在`themes/next/_config.yml`中添加配置项：\n```yml\ncolina:\n  enable: true\n  site_id: your site id\n  url: http://localhost:3000\n  count: true\n  lazyload: false\n  language:\n```\n\n* 最后运行hexo即可看到显示效果\n\n[1]: https://hub.docker.com/r/coolerfall/colina\n[2]: https://github.com/theme-next/hexo-theme-next\n","slug":"migrate-disqus-to-colina","published":1,"updated":"2023-05-23T03:07:55.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli00ivm50028z0infk5xhiv7","content":"<p>自从迁移至 Hexo 后，就开始折腾评论系统，现目前有比较多的评论系统，如 <code>disqus</code>、<code>来必力</code>、<code>gitment</code> 等等， 经过一番比较，选择了老牌的评论系统 <code>disqus</code>，用起来还是非常不错的。但是用了一段时间，由于 disqus 需要科学上网才能使用，对于国内的用户不太友好，于是乎开始寻找其他的解决方案，找到了一些可以自己搭建的博客系统，发现多多少少不能满足需求，最终还是决定自己来造个轮子，方便自己管理评论系统，又可以保证数据不丢失。于是利用空闲时间，花了些时间折腾出了 <a href=\"https://hub.docker.com/r/coolerfall/colina\">colina</a>，一款轻量、简单易用、支持 Markdown 的评论系统。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"部署Colina\"><a href=\"#部署Colina\" class=\"headerlink\" title=\"部署Colina\"></a>部署 Colina</h4><p>现目前 colina 的主要功能已开发完成，但还有不少细节未完善，暂时只提供了 <code>docker</code> 的部署方式，后续将逐步完善。</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">docker pull coolerfall/colina:latest</span></span><br></pre></td></tr></tbody></table></figure>\n<p>使用 <code>docker compose</code> 来编排，方便启动 / 关闭：</p>\n<figure class=\"highlight yml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">colina:</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">coolerfall/colina:latest</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">db</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">COLINA_URL=http://localhost:3000</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">COLINA_DSN=postgres://colina:colinapass@db/colina?sslmode=disable</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">COLINA_DATA_DIR=/data</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">3000</span><span class=\"string\">:3000</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/colina:/data</span></span><br><span class=\"line\">  <span class=\"attr\">db:</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">postgres:11-alpine</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">POSTGRES_USER=colina</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">POSTGRES_PASSWORD=colinapass</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">POSTGRES_INITDB_ARGS=\"--encoding=UTF8\"</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/colina/db:/var/lib/postgresql/data</span></span><br></pre></td></tr></tbody></table></figure>\n<p>然后使用 <code>docker-compose</code> 命令启动起来即可：</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">docker-compose -f docker-compose.yml up -d</span> </span><br></pre></td></tr></tbody></table></figure>\n<p>在浏览器中打开 <code>http://localhost:3000</code>，显示管理登录页面即表示运行正常，根据提示配置后台相应参数。</p>\n<h4 id=\"在hexo中接入Colina（以next主题为例）\"><a href=\"#在hexo中接入Colina（以next主题为例）\" class=\"headerlink\" title=\"在hexo中接入Colina（以next主题为例）\"></a>在 hexo 中接入 Colina（以 <a href=\"https://github.com/theme-next/hexo-theme-next\">next</a> 主题为例）</h4><ul>\n<li><p>在管理页面新增一个站点，获取到 <code>site id</code>。 –&gt;</p>\n</li>\n<li><p>在 <code>themes/next/layout/_third-party</code> 中新增 <code>colina.swig</code> 文件，并添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  {% if theme.colina.enable %}</span><br><span class=\"line\">  &lt;link rel=\"stylesheet\" href=\"{{ theme.colina.url }}/embed/colina.min.css\"&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  {% if theme.disqus.count %}</span><br><span class=\"line\">    &lt;script type=\"text/javascript\"&gt;</span><br><span class=\"line\">      var colinaConfig = {</span><br><span class=\"line\">        siteId: \"{{ theme.colina.site_id }}\",</span><br><span class=\"line\">        apiUrl: \"{{ theme.colina.url }}\",</span><br><span class=\"line\">        lang: \"{{ theme.colina.language }}\" || navigator.language || </span><br><span class=\"line\">          navigator.systemLanguage || navigator.userLanguage</span><br><span class=\"line\">      };</span><br><span class=\"line\">      (function() {</span><br><span class=\"line\">          var d = document, s = d.createElement(\"script\");</span><br><span class=\"line\">          s.src = \"{{ theme.colina.url }}/embed/counter.min.js\";</span><br><span class=\"line\">          (d.head || d.body).appendChild(s);</span><br><span class=\"line\">        })();</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  {% endif %}</span><br><span class=\"line\"></span><br><span class=\"line\">  {% if page.comments %}</span><br><span class=\"line\">    &lt;script type=\"text/javascript\"&gt;</span><br><span class=\"line\">      var colinaConfig = {</span><br><span class=\"line\">        identifier: \"{{ page.path }}\",</span><br><span class=\"line\">        siteId: \"{{ theme.colina.site_id }}\",</span><br><span class=\"line\">        apiUrl: \"{{ theme.colina.url }}\",</span><br><span class=\"line\">        title: \"{{ page.title| addslashes }}\",</span><br><span class=\"line\">        lang: \"{{ theme.colina.language }}\" || navigator.language || </span><br><span class=\"line\">          navigator.systemLanguage || navigator.userLanguage</span><br><span class=\"line\">      };</span><br><span class=\"line\">      function loadComments() {</span><br><span class=\"line\">        (function() {</span><br><span class=\"line\">          var d = document, s = d.createElement(\"script\");</span><br><span class=\"line\">          s.src = \"{{ theme.colina.url }}/embed/colina.min.js\";</span><br><span class=\"line\">          (d.head || d.body).appendChild(s);</span><br><span class=\"line\">        })();</span><br><span class=\"line\">      }</span><br><span class=\"line\"></span><br><span class=\"line\">      {% if theme.colina.lazyload %}</span><br><span class=\"line\">        $(function () {</span><br><span class=\"line\">          var offsetTop = $('#comments').offset().top - $(window).height();</span><br><span class=\"line\">          if (offsetTop &lt;= 0) {</span><br><span class=\"line\">            // load directly when there's no a scrollbar</span><br><span class=\"line\">            loadComments();</span><br><span class=\"line\">          } else {</span><br><span class=\"line\">            $(window).on('scroll.colina_scroll', function () {</span><br><span class=\"line\">              // offsetTop may changes because of manually resizing browser window or lazy loading images.</span><br><span class=\"line\">              var offsetTop = $('#comments').offset().top - $(window).height();</span><br><span class=\"line\">              var scrollTop = $(window).scrollTop();</span><br><span class=\"line\"></span><br><span class=\"line\">              // pre-load comments a bit? (margin or anything else)</span><br><span class=\"line\">              if (offsetTop - scrollTop &lt; 60) {</span><br><span class=\"line\">                $(window).off('.colina_scroll');</span><br><span class=\"line\">                loadComments();</span><br><span class=\"line\">              }</span><br><span class=\"line\">            });</span><br><span class=\"line\">          }</span><br><span class=\"line\">        });</span><br><span class=\"line\">      {% else %}</span><br><span class=\"line\">        loadComments();</span><br><span class=\"line\">      {% endif %}</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  {% endif %}</span><br><span class=\"line\"></span><br><span class=\"line\">{% endif %}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>在同目录下的 <code>index.swig</code> 中追加：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{% include 'colina.swig' %}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>在 <code>themes/next/layout/_partials/comments.swig</code> 中追加以下内容，用于渲染评论内容：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{% elseif theme.colina.enable %}</span><br><span class=\"line\">    &lt;div class=\"comments\" id=\"comments\"&gt;</span><br><span class=\"line\">      &lt;div id=\"colina-comments\"&gt;</span><br><span class=\"line\">        &lt;noscript&gt;</span><br><span class=\"line\">          Please enable JavaScript to view comments powered by Colina.</span><br><span class=\"line\">        &lt;/noscript&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>在 <code>themes/next/layout/_macro/post.swig</code> 中添加以下内容，用于展示评论条数：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{% if post.comments %}</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">  {% elseif theme.colina.enable and theme.colina.count %}</span><br><span class=\"line\">    &lt;span class=\"post-comments-count\"&gt;</span><br><span class=\"line\">      &lt;span class=\"post-meta-divider\"&gt;|&lt;/span&gt;</span><br><span class=\"line\">      &lt;span class=\"post-meta-item-icon\"&gt;</span><br><span class=\"line\">        &lt;i class=\"fa fa-comment-o\"&gt;&lt;/i&gt;</span><br><span class=\"line\">      &lt;/span&gt;</span><br><span class=\"line\">      &lt;a href=\"{{ url_for(post.path) }}#comments\" itemprop=\"discussionUrl\"&gt;</span><br><span class=\"line\">        &lt;span class=\"post-meta-item-text\"&gt;{{ __('post.comments_count') + __('symbol.colon') }}&lt;/span&gt;</span><br><span class=\"line\">        &lt;span class=\"post-comments-count colina-comment-count\"</span><br><span class=\"line\">                data-colina-identifier=\"{{ post.path }}\" itemprop=\"commentCount\"&gt;&lt;/span&gt;</span><br><span class=\"line\">      &lt;/a&gt;</span><br><span class=\"line\">    &lt;/span&gt;</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>在 <code>themes/next/_config.yml</code> 中添加配置项：</p>\n<figure class=\"highlight yml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">colina:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">site_id:</span> <span class=\"string\">your</span> <span class=\"string\">site</span> <span class=\"string\">id</span></span><br><span class=\"line\">  <span class=\"attr\">url:</span> <span class=\"string\">http://localhost:3000</span></span><br><span class=\"line\">  <span class=\"attr\">count:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">lazyload:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">language:</span></span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>最后运行 hexo 即可看到显示效果</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>自从迁移至 Hexo 后，就开始折腾评论系统，现目前有比较多的评论系统，如 <code>disqus</code>、<code>来必力</code>、<code>gitment</code> 等等， 经过一番比较，选择了老牌的评论系统 <code>disqus</code>，用起来还是非常不错的。但是用了一段时间，由于 disqus 需要科学上网才能使用，对于国内的用户不太友好，于是乎开始寻找其他的解决方案，找到了一些可以自己搭建的博客系统，发现多多少少不能满足需求，最终还是决定自己来造个轮子，方便自己管理评论系统，又可以保证数据不丢失。于是利用空闲时间，花了些时间折腾出了 <a href=\"https://hub.docker.com/r/coolerfall/colina\">colina</a>，一款轻量、简单易用、支持 Markdown 的评论系统。</p>","more":"<h4 id=\"部署Colina\"><a href=\"#部署Colina\" class=\"headerlink\" title=\"部署Colina\"></a>部署 Colina</h4><p>现目前 colina 的主要功能已开发完成，但还有不少细节未完善，暂时只提供了 <code>docker</code> 的部署方式，后续将逐步完善。</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">docker pull coolerfall/colina:latest</span></span><br></pre></td></tr></tbody></table></figure>\n<p>使用 <code>docker compose</code> 来编排，方便启动 / 关闭：</p>\n<figure class=\"highlight yml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">colina:</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">coolerfall/colina:latest</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">db</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">COLINA_URL=http://localhost:3000</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">COLINA_DSN=postgres://colina:colinapass@db/colina?sslmode=disable</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">COLINA_DATA_DIR=/data</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">3000</span><span class=\"string\">:3000</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/colina:/data</span></span><br><span class=\"line\">  <span class=\"attr\">db:</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">postgres:11-alpine</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">POSTGRES_USER=colina</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">POSTGRES_PASSWORD=colinapass</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">POSTGRES_INITDB_ARGS=\"--encoding=UTF8\"</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/colina/db:/var/lib/postgresql/data</span></span><br></pre></td></tr></tbody></table></figure>\n<p>然后使用 <code>docker-compose</code> 命令启动起来即可：</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">docker-compose -f docker-compose.yml up -d</span> </span><br></pre></td></tr></tbody></table></figure>\n<p>在浏览器中打开 <code>http://localhost:3000</code>，显示管理登录页面即表示运行正常，根据提示配置后台相应参数。</p>\n<h4 id=\"在hexo中接入Colina（以next主题为例）\"><a href=\"#在hexo中接入Colina（以next主题为例）\" class=\"headerlink\" title=\"在hexo中接入Colina（以next主题为例）\"></a>在 hexo 中接入 Colina（以 <a href=\"https://github.com/theme-next/hexo-theme-next\">next</a> 主题为例）</h4><ul>\n<li><p>在管理页面新增一个站点，获取到 <code>site id</code>。 –&gt;</p>\n</li>\n<li><p>在 <code>themes/next/layout/_third-party</code> 中新增 <code>colina.swig</code> 文件，并添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  {% if theme.colina.enable %}</span><br><span class=\"line\">  &lt;link rel=\"stylesheet\" href=\"{{ theme.colina.url }}/embed/colina.min.css\"&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  {% if theme.disqus.count %}</span><br><span class=\"line\">    &lt;script type=\"text/javascript\"&gt;</span><br><span class=\"line\">      var colinaConfig = {</span><br><span class=\"line\">        siteId: \"{{ theme.colina.site_id }}\",</span><br><span class=\"line\">        apiUrl: \"{{ theme.colina.url }}\",</span><br><span class=\"line\">        lang: \"{{ theme.colina.language }}\" || navigator.language || </span><br><span class=\"line\">          navigator.systemLanguage || navigator.userLanguage</span><br><span class=\"line\">      };</span><br><span class=\"line\">      (function() {</span><br><span class=\"line\">          var d = document, s = d.createElement(\"script\");</span><br><span class=\"line\">          s.src = \"{{ theme.colina.url }}/embed/counter.min.js\";</span><br><span class=\"line\">          (d.head || d.body).appendChild(s);</span><br><span class=\"line\">        })();</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  {% endif %}</span><br><span class=\"line\"></span><br><span class=\"line\">  {% if page.comments %}</span><br><span class=\"line\">    &lt;script type=\"text/javascript\"&gt;</span><br><span class=\"line\">      var colinaConfig = {</span><br><span class=\"line\">        identifier: \"{{ page.path }}\",</span><br><span class=\"line\">        siteId: \"{{ theme.colina.site_id }}\",</span><br><span class=\"line\">        apiUrl: \"{{ theme.colina.url }}\",</span><br><span class=\"line\">        title: \"{{ page.title| addslashes }}\",</span><br><span class=\"line\">        lang: \"{{ theme.colina.language }}\" || navigator.language || </span><br><span class=\"line\">          navigator.systemLanguage || navigator.userLanguage</span><br><span class=\"line\">      };</span><br><span class=\"line\">      function loadComments() {</span><br><span class=\"line\">        (function() {</span><br><span class=\"line\">          var d = document, s = d.createElement(\"script\");</span><br><span class=\"line\">          s.src = \"{{ theme.colina.url }}/embed/colina.min.js\";</span><br><span class=\"line\">          (d.head || d.body).appendChild(s);</span><br><span class=\"line\">        })();</span><br><span class=\"line\">      }</span><br><span class=\"line\"></span><br><span class=\"line\">      {% if theme.colina.lazyload %}</span><br><span class=\"line\">        $(function () {</span><br><span class=\"line\">          var offsetTop = $('#comments').offset().top - $(window).height();</span><br><span class=\"line\">          if (offsetTop &lt;= 0) {</span><br><span class=\"line\">            // load directly when there's no a scrollbar</span><br><span class=\"line\">            loadComments();</span><br><span class=\"line\">          } else {</span><br><span class=\"line\">            $(window).on('scroll.colina_scroll', function () {</span><br><span class=\"line\">              // offsetTop may changes because of manually resizing browser window or lazy loading images.</span><br><span class=\"line\">              var offsetTop = $('#comments').offset().top - $(window).height();</span><br><span class=\"line\">              var scrollTop = $(window).scrollTop();</span><br><span class=\"line\"></span><br><span class=\"line\">              // pre-load comments a bit? (margin or anything else)</span><br><span class=\"line\">              if (offsetTop - scrollTop &lt; 60) {</span><br><span class=\"line\">                $(window).off('.colina_scroll');</span><br><span class=\"line\">                loadComments();</span><br><span class=\"line\">              }</span><br><span class=\"line\">            });</span><br><span class=\"line\">          }</span><br><span class=\"line\">        });</span><br><span class=\"line\">      {% else %}</span><br><span class=\"line\">        loadComments();</span><br><span class=\"line\">      {% endif %}</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  {% endif %}</span><br><span class=\"line\"></span><br><span class=\"line\">{% endif %}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>在同目录下的 <code>index.swig</code> 中追加：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{% include 'colina.swig' %}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>在 <code>themes/next/layout/_partials/comments.swig</code> 中追加以下内容，用于渲染评论内容：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{% elseif theme.colina.enable %}</span><br><span class=\"line\">    &lt;div class=\"comments\" id=\"comments\"&gt;</span><br><span class=\"line\">      &lt;div id=\"colina-comments\"&gt;</span><br><span class=\"line\">        &lt;noscript&gt;</span><br><span class=\"line\">          Please enable JavaScript to view comments powered by Colina.</span><br><span class=\"line\">        &lt;/noscript&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>在 <code>themes/next/layout/_macro/post.swig</code> 中添加以下内容，用于展示评论条数：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{% if post.comments %}</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">  {% elseif theme.colina.enable and theme.colina.count %}</span><br><span class=\"line\">    &lt;span class=\"post-comments-count\"&gt;</span><br><span class=\"line\">      &lt;span class=\"post-meta-divider\"&gt;|&lt;/span&gt;</span><br><span class=\"line\">      &lt;span class=\"post-meta-item-icon\"&gt;</span><br><span class=\"line\">        &lt;i class=\"fa fa-comment-o\"&gt;&lt;/i&gt;</span><br><span class=\"line\">      &lt;/span&gt;</span><br><span class=\"line\">      &lt;a href=\"{{ url_for(post.path) }}#comments\" itemprop=\"discussionUrl\"&gt;</span><br><span class=\"line\">        &lt;span class=\"post-meta-item-text\"&gt;{{ __('post.comments_count') + __('symbol.colon') }}&lt;/span&gt;</span><br><span class=\"line\">        &lt;span class=\"post-comments-count colina-comment-count\"</span><br><span class=\"line\">                data-colina-identifier=\"{{ post.path }}\" itemprop=\"commentCount\"&gt;&lt;/span&gt;</span><br><span class=\"line\">      &lt;/a&gt;</span><br><span class=\"line\">    &lt;/span&gt;</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>在 <code>themes/next/_config.yml</code> 中添加配置项：</p>\n<figure class=\"highlight yml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">colina:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">site_id:</span> <span class=\"string\">your</span> <span class=\"string\">site</span> <span class=\"string\">id</span></span><br><span class=\"line\">  <span class=\"attr\">url:</span> <span class=\"string\">http://localhost:3000</span></span><br><span class=\"line\">  <span class=\"attr\">count:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">lazyload:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">language:</span></span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>最后运行 hexo 即可看到显示效果</p>\n</li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"cli00ivl70001z0infsw60net","category_id":"cli00ivld0004z0inckti7ffl","_id":"cli00ivlk000fz0in339k3pos"},{"post_id":"cli00ivlb0003z0inda2043hb","category_id":"cli00ivlh000bz0in06za3mbt","_id":"cli00ivlp000nz0in7tka1e5x"},{"post_id":"cli00ivlf0007z0in51169fu2","category_id":"cli00ivlh000bz0in06za3mbt","_id":"cli00ivlr000tz0in5j8vgzil"},{"post_id":"cli00ivlg0009z0in7qzsdo66","category_id":"cli00ivlh000bz0in06za3mbt","_id":"cli00ivlt000yz0in6wzv4arx"},{"post_id":"cli00ivls000vz0in72g13hsn","category_id":"cli00ivlh000bz0in06za3mbt","_id":"cli00ivlu0013z0ing1cd6msl"},{"post_id":"cli00ivlh000az0incnm6aa82","category_id":"cli00ivlr000sz0in9fch5ha6","_id":"cli00ivlw0017z0in13ye1qhy"},{"post_id":"cli00ivls000xz0inapkrewr6","category_id":"cli00ivlr000sz0in9fch5ha6","_id":"cli00ivlw001az0in55502zqe"},{"post_id":"cli00ivlu0011z0indsulhgp2","category_id":"cli00ivlh000bz0in06za3mbt","_id":"cli00ivlx001ez0incduh7mtl"},{"post_id":"cli00ivli000dz0inbn3e0020","category_id":"cli00ivlr000sz0in9fch5ha6","_id":"cli00ivly001iz0indbs47vz2"},{"post_id":"cli00ivlu0012z0in12yed6bb","category_id":"cli00ivlr000sz0in9fch5ha6","_id":"cli00ivlz001lz0in5wds9d1p"},{"post_id":"cli00ivlv0016z0inc10084mp","category_id":"cli00ivlr000sz0in9fch5ha6","_id":"cli00ivm0001pz0inhbmja0z0"},{"post_id":"cli00ivlj000ez0in6851bjdt","category_id":"cli00ivlv0014z0in2y10h0bg","_id":"cli00ivm0001sz0inhrdt720c"},{"post_id":"cli00ivlw0019z0ind6g41nw2","category_id":"cli00ivlr000sz0in9fch5ha6","_id":"cli00ivm2001vz0inddnt9a07"},{"post_id":"cli00ivlx001dz0in5o0veoqq","category_id":"cli00ivlr000sz0in9fch5ha6","_id":"cli00ivm3001zz0in3wx7c4k0"},{"post_id":"cli00ivln000iz0in4arv5aum","category_id":"cli00ivlr000sz0in9fch5ha6","_id":"cli00ivm30022z0inb8f43uzu"},{"post_id":"cli00ivly001hz0in5f88biz9","category_id":"cli00ivlr000sz0in9fch5ha6","_id":"cli00ivm40026z0indvpd8tb3"},{"post_id":"cli00ivly001kz0in9ia6h8zm","category_id":"cli00ivlr000sz0in9fch5ha6","_id":"cli00ivm50029z0inepf31ttn"},{"post_id":"cli00ivlo000kz0inbso8facv","category_id":"cli00ivlr000sz0in9fch5ha6","_id":"cli00ivm5002bz0in29yu72ks"},{"post_id":"cli00ivm0001rz0in3a8d16nu","category_id":"cli00ivlr000sz0in9fch5ha6","_id":"cli00ivm6002ez0in1teoe1c2"},{"post_id":"cli00ivlp000pz0in7iub5b5i","category_id":"cli00ivlr000sz0in9fch5ha6","_id":"cli00ivm6002gz0in788jezth"},{"post_id":"cli00ivm1001uz0in6zd91o1n","category_id":"cli00ivld0004z0inckti7ffl","_id":"cli00ivm6002hz0indzce6eab"},{"post_id":"cli00ivm2001yz0inhxxz6pxp","category_id":"cli00ivld0004z0inckti7ffl","_id":"cli00ivm6002kz0inag5v7qc6"},{"post_id":"cli00ivlq000rz0in30ss9gns","category_id":"cli00ivlr000sz0in9fch5ha6","_id":"cli00ivm7002lz0in7m2yg39f"},{"post_id":"cli00ivm30021z0inhdn13gyc","category_id":"cli00ivld0004z0inckti7ffl","_id":"cli00ivm7002nz0inak4vd1ve"},{"post_id":"cli00ivm40025z0in2c1hcktg","category_id":"cli00ivld0004z0inckti7ffl","_id":"cli00ivm7002pz0inbuzn7mp4"},{"post_id":"cli00ivm50028z0infk5xhiv7","category_id":"cli00ivld0004z0inckti7ffl","_id":"cli00ivm7002rz0inh1tm3ckj"},{"post_id":"cli00ivlz001oz0in9mi43n5o","category_id":"cli00ivm40024z0in6jzec91m","_id":"cli00ivm8002tz0incqk9102k"}],"PostTag":[{"post_id":"cli00ivl70001z0infsw60net","tag_id":"cli00ivle0005z0induwj9lu4","_id":"cli00ivln000jz0inao4tcl2s"},{"post_id":"cli00ivl70001z0infsw60net","tag_id":"cli00ivli000cz0incmrq2czj","_id":"cli00ivlo000lz0inh6bhd2ya"},{"post_id":"cli00ivlb0003z0inda2043hb","tag_id":"cli00ivll000hz0in9hpjcayo","_id":"cli00ivlq000qz0indo38fc44"},{"post_id":"cli00ivlf0007z0in51169fu2","tag_id":"cli00ivll000hz0in9hpjcayo","_id":"cli00ivls000wz0indmz85yr8"},{"post_id":"cli00ivlg0009z0in7qzsdo66","tag_id":"cli00ivll000hz0in9hpjcayo","_id":"cli00ivlw0018z0inb6kudqb6"},{"post_id":"cli00ivlg0009z0in7qzsdo66","tag_id":"cli00ivlt0010z0indqjiflyx","_id":"cli00ivlx001bz0in33vn1vnm"},{"post_id":"cli00ivlh000az0incnm6aa82","tag_id":"cli00ivlv0015z0in9su11yva","_id":"cli00ivly001gz0ing85c2qsn"},{"post_id":"cli00ivli000dz0inbn3e0020","tag_id":"cli00ivlt0010z0indqjiflyx","_id":"cli00ivlz001nz0inhflj1c8e"},{"post_id":"cli00ivlj000ez0in6851bjdt","tag_id":"cli00ivlz001mz0in99yw1vhy","_id":"cli00ivm2001wz0infwix9tbk"},{"post_id":"cli00ivln000iz0in4arv5aum","tag_id":"cli00ivm1001tz0inaz2v930t","_id":"cli00ivm40023z0indiwde2rw"},{"post_id":"cli00ivlo000kz0inbso8facv","tag_id":"cli00ivll000hz0in9hpjcayo","_id":"cli00ivm5002az0inedaq16ku"},{"post_id":"cli00ivlo000kz0inbso8facv","tag_id":"cli00ivm30020z0infj7666m0","_id":"cli00ivm6002cz0in06x213uo"},{"post_id":"cli00ivlp000pz0in7iub5b5i","tag_id":"cli00ivlt0010z0indqjiflyx","_id":"cli00ivm6002fz0incfqlbhmt"},{"post_id":"cli00ivlq000rz0in30ss9gns","tag_id":"cli00ivm6002dz0in41qw7t7q","_id":"cli00ivm6002jz0ingkxy7rpv"},{"post_id":"cli00ivls000vz0in72g13hsn","tag_id":"cli00ivm6002iz0in0fghfg2z","_id":"cli00ivm7002oz0in02j0bp4n"},{"post_id":"cli00ivls000xz0inapkrewr6","tag_id":"cli00ivm7002mz0inc6um6apt","_id":"cli00ivm8002sz0ineui7gxsw"},{"post_id":"cli00ivlu0011z0indsulhgp2","tag_id":"cli00ivm7002qz0in6j941llq","_id":"cli00ivm8002vz0ina4ry5lo6"},{"post_id":"cli00ivlu0012z0in12yed6bb","tag_id":"cli00ivm8002uz0in3745h16t","_id":"cli00ivm9002xz0in637lfku2"},{"post_id":"cli00ivlv0016z0inc10084mp","tag_id":"cli00ivm7002mz0inc6um6apt","_id":"cli00ivm9002zz0in36018j60"},{"post_id":"cli00ivlw0019z0ind6g41nw2","tag_id":"cli00ivm9002yz0inhsyvbaw5","_id":"cli00ivma0031z0in7hgb5ow9"},{"post_id":"cli00ivlx001dz0in5o0veoqq","tag_id":"cli00ivm90030z0in9fzn662u","_id":"cli00ivma0033z0in2y810xlk"},{"post_id":"cli00ivly001hz0in5f88biz9","tag_id":"cli00ivlz001mz0in99yw1vhy","_id":"cli00ivmb0035z0incvup1u5l"},{"post_id":"cli00ivly001kz0in9ia6h8zm","tag_id":"cli00ivma0034z0ina76ndxf7","_id":"cli00ivmb0037z0inayfben60"},{"post_id":"cli00ivlz001oz0in9mi43n5o","tag_id":"cli00ivmb0036z0inbugac5ad","_id":"cli00ivmb0039z0inei1j0syr"},{"post_id":"cli00ivm0001rz0in3a8d16nu","tag_id":"cli00ivmb0038z0in9hxk723u","_id":"cli00ivmc003cz0incbew2a2k"},{"post_id":"cli00ivm0001rz0in3a8d16nu","tag_id":"cli00ivmb003az0in0krn7bwm","_id":"cli00ivmc003dz0in4r739nnh"},{"post_id":"cli00ivm1001uz0in6zd91o1n","tag_id":"cli00ivli000cz0incmrq2czj","_id":"cli00ivmd003fz0inexyf4qlf"},{"post_id":"cli00ivm1001uz0in6zd91o1n","tag_id":"cli00ivmc003bz0inbkt46nyg","_id":"cli00ivmd003gz0in7kuscn4q"},{"post_id":"cli00ivm2001yz0inhxxz6pxp","tag_id":"cli00ivmd003ez0inh3869qv3","_id":"cli00ivme003iz0in96caggum"},{"post_id":"cli00ivm30021z0inhdn13gyc","tag_id":"cli00ivmd003ez0inh3869qv3","_id":"cli00ivme003kz0inhh6r3ccg"},{"post_id":"cli00ivm40025z0in2c1hcktg","tag_id":"cli00ivmd003ez0inh3869qv3","_id":"cli00ivme003mz0in8swr28fv"},{"post_id":"cli00ivm50028z0infk5xhiv7","tag_id":"cli00ivme003lz0in0hgh9ir2","_id":"cli00ivmf003oz0incqu225oc"},{"post_id":"cli00ivm50028z0infk5xhiv7","tag_id":"cli00ivme003nz0in7ckx82pa","_id":"cli00ivmf003pz0in5a795fgn"}],"Tag":[{"name":"github pages","_id":"cli00ivle0005z0induwj9lu4"},{"name":"jekyll","_id":"cli00ivli000cz0incmrq2czj"},{"name":"android studio","_id":"cli00ivll000hz0in9hpjcayo"},{"name":"ndk","_id":"cli00ivlt0010z0indqjiflyx"},{"name":"home key","_id":"cli00ivlv0015z0in9su11yva"},{"name":"hash","_id":"cli00ivlz001mz0in99yw1vhy"},{"name":"taskAffinity","_id":"cli00ivm1001tz0inaz2v930t"},{"name":"maven","_id":"cli00ivm30020z0infj7666m0"},{"name":"launch mode","_id":"cli00ivm6002dz0in41qw7t7q"},{"name":"shell","_id":"cli00ivm6002iz0in0fghfg2z"},{"name":"jni","_id":"cli00ivm7002mz0inc6um6apt"},{"name":"git","_id":"cli00ivm7002qz0in6j941llq"},{"name":"widget","_id":"cli00ivm8002uz0in3745h16t"},{"name":"animation","_id":"cli00ivm9002yz0inhsyvbaw5"},{"name":"proguard","_id":"cli00ivm90030z0in9fzn662u"},{"name":"media","_id":"cli00ivma0034z0ina76ndxf7"},{"name":"c","_id":"cli00ivmb0036z0inbugac5ad"},{"name":"url","_id":"cli00ivmb0038z0in9hxk723u"},{"name":"sanitizer","_id":"cli00ivmb003az0in0krn7bwm"},{"name":"hexo","_id":"cli00ivmc003bz0inbkt46nyg"},{"name":"linux","_id":"cli00ivmd003ez0inh3869qv3"},{"name":"colina","_id":"cli00ivme003lz0in0hgh9ir2"},{"name":"comment","_id":"cli00ivme003nz0in7ckx82pa"}]}}